(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('moment')) :
    typeof define === 'function' && define.amd ? define('ngx-moment', ['@angular/core','exports', '@angular/core', 'moment'], factory) :
    (factory(global.ng.core,(global['ngx-moment'] = {}),global.ng.core,global.moment));
}(this, (function (ɵngcc0,exports,core,moment) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor = moment;
    var AddPipe = /** @class */ (function () {
        function AddPipe() {
        }
        /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
        AddPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
            function (value, amount, unit) {
                if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {
                    throw new Error('AddPipe: missing required arguments');
                }
                return momentConstructor(value).add(amount, unit);
            };
AddPipe.ɵfac = function AddPipe_Factory(t) { return new (t || AddPipe)(); };
AddPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amAdd", type: AddPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPipe, [{
        type: core.Pipe,
        args: [{ name: 'amAdd' }]
    }], function () { return []; }, null); })();
        return AddPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$1 = moment;
    var CalendarPipe = /** @class */ (function () {
        function CalendarPipe(cdRef, ngZone) {
            var _this = this;
            this.cdRef = cdRef;
            this.ngZone = ngZone;
            // using a single static timer for all instances of this pipe for performance reasons
            CalendarPipe.initTimer(ngZone);
            CalendarPipe.refs++;
            // values such as Today will need to be replaced with Yesterday after midnight,
            // so make sure we subscribe to an EventEmitter that we set up to emit at midnight
            this.midnightSub = CalendarPipe.midnight.subscribe(function () {
                _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
            });
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        CalendarPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                /** @type {?} */
                var formats = null;
                /** @type {?} */
                var referenceTime = null;
                for (var i = 0, len = args.length; i < len; i++) {
                    if (args[i] !== null) {
                        if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {
                            formats = args[i];
                        }
                        else {
                            referenceTime = momentConstructor$1(args[i]);
                        }
                    }
                }
                return momentConstructor$1(value).calendar(referenceTime, formats);
            };
        /**
         * @return {?}
         */
        CalendarPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (CalendarPipe.refs > 0) {
                    CalendarPipe.refs--;
                }
                if (CalendarPipe.refs === 0) {
                    CalendarPipe.removeTimer();
                }
                this.midnightSub.unsubscribe();
            };
        /**
         * @param {?} ngZone
         * @return {?}
         */
        CalendarPipe.initTimer = /**
         * @param {?} ngZone
         * @return {?}
         */
            function (ngZone) {
                // initialize the timer
                if (!CalendarPipe.midnight) {
                    CalendarPipe.midnight = new core.EventEmitter();
                    if (typeof window !== 'undefined') {
                        /** @type {?} */
                        var timeToUpdate_1 = CalendarPipe._getMillisecondsUntilUpdate();
                        CalendarPipe.timer = ngZone.runOutsideAngular(function () {
                            return window.setTimeout(function () {
                                // emit the current date
                                CalendarPipe.midnight.emit(new Date());
                                // refresh the timer
                                CalendarPipe.removeTimer();
                                CalendarPipe.initTimer(ngZone);
                            }, timeToUpdate_1);
                        });
                    }
                }
            };
        /**
         * @return {?}
         */
        CalendarPipe.removeTimer = /**
         * @return {?}
         */
            function () {
                if (CalendarPipe.timer) {
                    window.clearTimeout(CalendarPipe.timer);
                    CalendarPipe.timer = null;
                    CalendarPipe.midnight = null;
                }
            };
        /**
         * @return {?}
         */
        CalendarPipe._getMillisecondsUntilUpdate = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var now = momentConstructor$1();
                /** @type {?} */
                var tomorrow = momentConstructor$1().startOf('day').add(1, 'days');
                /** @type {?} */
                var timeToMidnight = tomorrow.valueOf() - now.valueOf();
                return timeToMidnight + 1000; // 1 second after midnight
            };
        /**
         * Internal reference counter, so we can clean up when no instances are in use
         */
        CalendarPipe.refs = 0;
        CalendarPipe.timer = null;
        CalendarPipe.midnight = null;
        /** @nocollapse */
        CalendarPipe.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: core.NgZone }
            ];
        };
CalendarPipe.ɵfac = function CalendarPipe_Factory(t) { return new (t || CalendarPipe)(ɵngcc0.ɵɵinjectPipeChangeDetectorRef(), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
CalendarPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amCalendar", type: CalendarPipe, pure: false });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarPipe, [{
        type: core.Pipe,
        args: [{ name: 'amCalendar', pure: false }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, null); })();
        return CalendarPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$2 = moment;
    var DateFormatPipe = /** @class */ (function () {
        function DateFormatPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        DateFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!value) {
                    return '';
                }
                return momentConstructor$2(value).format(args[0]);
            };
DateFormatPipe.ɵfac = function DateFormatPipe_Factory(t) { return new (t || DateFormatPipe)(); };
DateFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amDateFormat", type: DateFormatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateFormatPipe, [{
        type: core.Pipe,
        args: [{ name: 'amDateFormat' }]
    }], function () { return []; }, null); })();
        return DateFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$3 = moment;
    var DifferencePipe = /** @class */ (function () {
        function DifferencePipe() {
        }
        /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @param {?=} precision
         * @return {?}
         */
        DifferencePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @param {?=} precision
         * @return {?}
         */
            function (value, otherValue, unit, precision) {
                /** @type {?} */
                var date = momentConstructor$3(value);
                /** @type {?} */
                var date2 = (otherValue !== null) ? momentConstructor$3(otherValue) : momentConstructor$3();
                return date.diff(date2, unit, precision);
            };
DifferencePipe.ɵfac = function DifferencePipe_Factory(t) { return new (t || DifferencePipe)(); };
DifferencePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amDifference", type: DifferencePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DifferencePipe, [{
        type: core.Pipe,
        args: [{ name: 'amDifference' }]
    }], function () { return []; }, null); })();
        return DifferencePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGX_MOMENT_OPTIONS = new core.InjectionToken('NGX_MOMENT_OPTIONS');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DurationPipe = /** @class */ (function () {
        function DurationPipe(momentOptions) {
            this.allowedUnits = ['ss', 's', 'm', 'h', 'd', 'M'];
            this._applyOptions(momentOptions);
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        DurationPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (typeof args === 'undefined' || args.length !== 1) {
                    throw new Error('DurationPipe: missing required time unit argument');
                }
                return moment.duration(value, ( /** @type {?} */(args[0]))).humanize();
            };
        /**
         * @param {?} momentOptions
         * @return {?}
         */
        DurationPipe.prototype._applyOptions = /**
         * @param {?} momentOptions
         * @return {?}
         */
            function (momentOptions) {
                var _this = this;
                if (!momentOptions) {
                    return;
                }
                if (!!momentOptions.relativeTimeThresholdOptions) {
                    /** @type {?} */
                    var units = Object.keys(momentOptions.relativeTimeThresholdOptions);
                    /** @type {?} */
                    var filteredUnits = units.filter(function (unit) { return _this.allowedUnits.indexOf(unit) !== -1; });
                    filteredUnits.forEach(function (unit) {
                        moment.relativeTimeThreshold(unit, momentOptions.relativeTimeThresholdOptions[unit]);
                    });
                }
            };
        /** @nocollapse */
        DurationPipe.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [NGX_MOMENT_OPTIONS,] }] }
            ];
        };
DurationPipe.ɵfac = function DurationPipe_Factory(t) { return new (t || DurationPipe)(ɵngcc0.ɵɵdirectiveInject(NGX_MOMENT_OPTIONS, 8)); };
DurationPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amDuration", type: DurationPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DurationPipe, [{
        type: core.Pipe,
        args: [{ name: 'amDuration' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [NGX_MOMENT_OPTIONS]
            }] }]; }, null); })();
        return DurationPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FromUnixPipe = /** @class */ (function () {
        function FromUnixPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        FromUnixPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (typeof value === 'string') {
                    value = +value;
                }
                return moment.unix(value);
            };
FromUnixPipe.ɵfac = function FromUnixPipe_Factory(t) { return new (t || FromUnixPipe)(); };
FromUnixPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amFromUnix", type: FromUnixPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FromUnixPipe, [{
        type: core.Pipe,
        args: [{ name: 'amFromUnix' }]
    }], function () { return []; }, null); })();
        return FromUnixPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$4 = moment;
    var ParsePipe = /** @class */ (function () {
        function ParsePipe() {
        }
        /**
         * @param {?} value
         * @param {?} formats
         * @return {?}
         */
        ParsePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} formats
         * @return {?}
         */
            function (value, formats) {
                return momentConstructor$4(value, formats);
            };
ParsePipe.ɵfac = function ParsePipe_Factory(t) { return new (t || ParsePipe)(); };
ParsePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amParse", type: ParsePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ParsePipe, [{
        type: core.Pipe,
        args: [{ name: 'amParse' }]
    }], function () { return []; }, null); })();
        return ParsePipe;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FromUtcPipe = /** @class */ (function () {
        function FromUtcPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} formats
         * @param {...?} args
         * @return {?}
         */
        FromUtcPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} formats
         * @param {...?} args
         * @return {?}
         */
            function (value, formats) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                return formats ? moment.utc(value, formats) : moment.utc(value);
            };
FromUtcPipe.ɵfac = function FromUtcPipe_Factory(t) { return new (t || FromUtcPipe)(); };
FromUtcPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amFromUtc", type: FromUtcPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FromUtcPipe, [{
        type: core.Pipe,
        args: [{ name: 'amFromUtc' }]
    }], function () { return []; }, null); })();
        return FromUtcPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$5 = moment;
    var IsAfterPipe = /** @class */ (function () {
        function IsAfterPipe() {
        }
        /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @return {?}
         */
        IsAfterPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @return {?}
         */
            function (value, otherValue, unit) {
                return momentConstructor$5(value).isAfter(momentConstructor$5(otherValue), unit);
            };
IsAfterPipe.ɵfac = function IsAfterPipe_Factory(t) { return new (t || IsAfterPipe)(); };
IsAfterPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amIsAfter", type: IsAfterPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsAfterPipe, [{
        type: core.Pipe,
        args: [{
                name: 'amIsAfter'
            }]
    }], function () { return []; }, null); })();
        return IsAfterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$6 = moment;
    var IsBeforePipe = /** @class */ (function () {
        function IsBeforePipe() {
        }
        /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @return {?}
         */
        IsBeforePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @return {?}
         */
            function (value, otherValue, unit) {
                return momentConstructor$6(value).isBefore(momentConstructor$6(otherValue), unit);
            };
IsBeforePipe.ɵfac = function IsBeforePipe_Factory(t) { return new (t || IsBeforePipe)(); };
IsBeforePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amIsBefore", type: IsBeforePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsBeforePipe, [{
        type: core.Pipe,
        args: [{
                name: 'amIsBefore'
            }]
    }], function () { return []; }, null); })();
        return IsBeforePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$7 = moment;
    var LocalTimePipe = /** @class */ (function () {
        function LocalTimePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        LocalTimePipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return momentConstructor$7(value).local();
            };
LocalTimePipe.ɵfac = function LocalTimePipe_Factory(t) { return new (t || LocalTimePipe)(); };
LocalTimePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amLocal", type: LocalTimePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalTimePipe, [{
        type: core.Pipe,
        args: [{ name: 'amLocal' }]
    }], function () { return []; }, null); })();
        return LocalTimePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    // under systemjs, moment is actually exported as the default export, so we account for that
    /** @type {?} */
    var momentConstructor$8 = moment;
    var LocalePipe = /** @class */ (function () {
        function LocalePipe() {
        }
        /**
         * @param {?} value
         * @param {?} locale
         * @return {?}
         */
        LocalePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} locale
         * @return {?}
         */
            function (value, locale) {
                return momentConstructor$8(value).locale(locale);
            };
LocalePipe.ɵfac = function LocalePipe_Factory(t) { return new (t || LocalePipe)(); };
LocalePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amLocale", type: LocalePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalePipe, [{
        type: core.Pipe,
        args: [{ name: 'amLocale' }]
    }], function () { return []; }, null); })();
        return LocalePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ParseZonePipe = /** @class */ (function () {
        function ParseZonePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        ParseZonePipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return moment.parseZone(value);
            };
ParseZonePipe.ɵfac = function ParseZonePipe_Factory(t) { return new (t || ParseZonePipe)(); };
ParseZonePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amParseZone", type: ParseZonePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ParseZonePipe, [{
        type: core.Pipe,
        args: [{ name: 'amParseZone' }]
    }], function () { return []; }, null); })();
        return ParseZonePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$9 = moment;
    var SubtractPipe = /** @class */ (function () {
        function SubtractPipe() {
        }
        /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
        SubtractPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
            function (value, amount, unit) {
                if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {
                    throw new Error('SubtractPipe: missing required arguments');
                }
                return momentConstructor$9(value).subtract(amount, unit);
            };
SubtractPipe.ɵfac = function SubtractPipe_Factory(t) { return new (t || SubtractPipe)(); };
SubtractPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amSubtract", type: SubtractPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SubtractPipe, [{
        type: core.Pipe,
        args: [{ name: 'amSubtract' }]
    }], function () { return []; }, null); })();
        return SubtractPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$a = moment;
    var TimeAgoPipe = /** @class */ (function () {
        function TimeAgoPipe(cdRef, ngZone) {
            this.cdRef = cdRef;
            this.ngZone = ngZone;
        }
        /**
         * @param {?} m
         * @return {?}
         */
        TimeAgoPipe.prototype.format = /**
         * @param {?} m
         * @return {?}
         */
            function (m) {
                return m.from(momentConstructor$a(), this.lastOmitSuffix);
            };
        /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @param {?=} formatFn
         * @return {?}
         */
        TimeAgoPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @param {?=} formatFn
         * @return {?}
         */
            function (value, omitSuffix, formatFn) {
                if (this.hasChanged(value, omitSuffix)) {
                    this.lastTime = this.getTime(value);
                    this.lastValue = value;
                    this.lastOmitSuffix = omitSuffix;
                    this.lastLocale = this.getLocale(value);
                    this.formatFn = formatFn || this.format.bind(this);
                    this.removeTimer();
                    this.createTimer();
                    this.lastText = this.formatFn(momentConstructor$a(value));
                }
                else {
                    this.createTimer();
                }
                return this.lastText;
            };
        /**
         * @return {?}
         */
        TimeAgoPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeTimer();
            };
        /**
         * @return {?}
         */
        TimeAgoPipe.prototype.createTimer = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.currentTimer) {
                    return;
                }
                /** @type {?} */
                var momentInstance = momentConstructor$a(this.lastValue);
                /** @type {?} */
                var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
                this.currentTimer = this.ngZone.runOutsideAngular(function () {
                    if (typeof window !== 'undefined') {
                        return window.setTimeout(function () {
                            _this.lastText = _this.formatFn(momentConstructor$a(_this.lastValue));
                            _this.currentTimer = null;
                            _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
                        }, timeToUpdate);
                    }
                    else {
                        return null;
                    }
                });
            };
        /**
         * @return {?}
         */
        TimeAgoPipe.prototype.removeTimer = /**
         * @return {?}
         */
            function () {
                if (this.currentTimer) {
                    window.clearTimeout(this.currentTimer);
                    this.currentTimer = null;
                }
            };
        /**
         * @param {?} momentInstance
         * @return {?}
         */
        TimeAgoPipe.prototype.getSecondsUntilUpdate = /**
         * @param {?} momentInstance
         * @return {?}
         */
            function (momentInstance) {
                /** @type {?} */
                var howOld = Math.abs(momentConstructor$a().diff(momentInstance, 'minute'));
                if (howOld < 1) {
                    return 1;
                }
                else if (howOld < 60) {
                    return 30;
                }
                else if (howOld < 180) {
                    return 300;
                }
                else {
                    return 3600;
                }
            };
        /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @return {?}
         */
        TimeAgoPipe.prototype.hasChanged = /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @return {?}
         */
            function (value, omitSuffix) {
                return this.getTime(value) !== this.lastTime
                    || this.getLocale(value) !== this.lastLocale
                    || omitSuffix !== this.lastOmitSuffix;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TimeAgoPipe.prototype.getTime = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (moment.isDate(value)) {
                    return value.getTime();
                }
                else if (moment.isMoment(value)) {
                    return value.valueOf();
                }
                else {
                    return momentConstructor$a(value).valueOf();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TimeAgoPipe.prototype.getLocale = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return moment.isMoment(value) ? value.locale() : moment.locale();
            };
        /** @nocollapse */
        TimeAgoPipe.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: core.NgZone }
            ];
        };
TimeAgoPipe.ɵfac = function TimeAgoPipe_Factory(t) { return new (t || TimeAgoPipe)(ɵngcc0.ɵɵinjectPipeChangeDetectorRef(), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TimeAgoPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amTimeAgo", type: TimeAgoPipe, pure: false });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeAgoPipe, [{
        type: core.Pipe,
        args: [{ name: 'amTimeAgo', pure: false }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, null); })();
        return TimeAgoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$b = moment;
    var UtcPipe = /** @class */ (function () {
        function UtcPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        UtcPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return momentConstructor$b(value).utc();
            };
UtcPipe.ɵfac = function UtcPipe_Factory(t) { return new (t || UtcPipe)(); };
UtcPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amUtc", type: UtcPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UtcPipe, [{
        type: core.Pipe,
        args: [{ name: 'amUtc' }]
    }], function () { return []; }, null); })();
        return UtcPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ANGULAR_MOMENT_PIPES = [
        AddPipe,
        CalendarPipe,
        DateFormatPipe,
        DifferencePipe,
        DurationPipe,
        FromUnixPipe,
        ParsePipe,
        SubtractPipe,
        TimeAgoPipe,
        UtcPipe,
        FromUtcPipe,
        LocalTimePipe,
        LocalePipe,
        ParseZonePipe,
        IsBeforePipe,
        IsAfterPipe
    ];
    var MomentModule = /** @class */ (function () {
        function MomentModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        MomentModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: MomentModule,
                    providers: [
                        {
                            provide: NGX_MOMENT_OPTIONS, useValue: __assign({}, options)
                        }
                    ]
                };
            };
MomentModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MomentModule });
MomentModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MomentModule_Factory(t) { return new (t || MomentModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MomentModule, { declarations: [AddPipe,
        CalendarPipe,
        DateFormatPipe,
        DifferencePipe,
        DurationPipe,
        FromUnixPipe,
        ParsePipe,
        SubtractPipe,
        TimeAgoPipe,
        UtcPipe,
        FromUtcPipe,
        LocalTimePipe,
        LocalePipe,
        ParseZonePipe,
        IsBeforePipe,
        IsAfterPipe], exports: [AddPipe,
        CalendarPipe,
        DateFormatPipe,
        DifferencePipe,
        DurationPipe,
        FromUnixPipe,
        ParsePipe,
        SubtractPipe,
        TimeAgoPipe,
        UtcPipe,
        FromUtcPipe,
        LocalTimePipe,
        LocalePipe,
        ParseZonePipe,
        IsBeforePipe,
        IsAfterPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MomentModule, [{
        type: core.NgModule,
        args: [{
                declarations: ANGULAR_MOMENT_PIPES,
                exports: ANGULAR_MOMENT_PIPES
            }]
    }], function () { return []; }, null); })();
        return MomentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.AddPipe = AddPipe;
    exports.CalendarPipe = CalendarPipe;
    exports.DateFormatPipe = DateFormatPipe;
    exports.DifferencePipe = DifferencePipe;
    exports.DurationPipe = DurationPipe;
    exports.FromUnixPipe = FromUnixPipe;
    exports.ParsePipe = ParsePipe;
    exports.MomentModule = MomentModule;
    exports.SubtractPipe = SubtractPipe;
    exports.TimeAgoPipe = TimeAgoPipe;
    exports.UtcPipe = UtcPipe;
    exports.FromUtcPipe = FromUtcPipe;
    exports.LocalTimePipe = LocalTimePipe;
    exports.LocalePipe = LocalePipe;
    exports.ParseZonePipe = ParseZonePipe;
    exports.IsBeforePipe = IsBeforePipe;
    exports.IsAfterPipe = IsAfterPipe;
    exports.NGX_MOMENT_OPTIONS = NGX_MOMENT_OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,