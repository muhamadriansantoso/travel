import { __decorate, __param } from "tslib";
import { AfterViewInit, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Host, Input, OnChanges, OnDestroy, OnInit, Optional, Output, SimpleChanges, SkipSelf, ViewContainerRef } from '@angular/core';
import { AbstractControl, ControlContainer, FormControl, FormGroup, FormGroupName } from '@angular/forms';
import { NguiAutoCompleteComponent } from './auto-complete.component';
var NguiAutoCompleteDirective = /** @class */ (function () {
    function NguiAutoCompleteDirective(resolver, viewContainerRef, parentForm) {
        var _this = this;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.parentForm = parentForm;
        this.autocomplete = false;
        this.acceptUserInput = true;
        this.loadingTemplate = null;
        this.loadingText = 'Loading';
        this.tabToSelect = true;
        this.selectOnBlur = false;
        this.matchFormatted = false;
        this.autoSelectFirstItem = false;
        this.openOnFocus = true;
        this.closeOnFocusOut = true;
        this.reFocusAfterSelect = true;
        this.headerItemTemplate = null;
        this.ignoreAccents = true;
        this.zIndex = '1';
        this.isRtl = false;
        this.ngModelChange = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.customSelected = new EventEmitter();
        // show auto-complete list below the current element
        this.showAutoCompleteDropdown = function (event) {
            if (_this.dropdownJustHidden) {
                return;
            }
            _this.hideAutoCompleteDropdown();
            _this.scheduledBlurHandler = null;
            var factory = _this.resolver.resolveComponentFactory(NguiAutoCompleteComponent);
            _this.componentRef = _this.viewContainerRef.createComponent(factory);
            var component = _this.componentRef.instance;
            component.keyword = _this.inputEl.value;
            component.showInputTag = false; // Do NOT display autocomplete input tag separately
            component.pathToData = _this.pathToData;
            component.minChars = _this.minChars;
            component.source = _this.source;
            component.placeholder = _this.autoCompletePlaceholder;
            component.acceptUserInput = _this.acceptUserInput;
            component.maxNumList = parseInt(_this.maxNumList, 10);
            component.loadingText = _this.loadingText;
            component.loadingTemplate = _this.loadingTemplate;
            component.listFormatter = _this.listFormatter;
            component.blankOptionText = _this.blankOptionText;
            component.noMatchFoundText = _this.noMatchFoundText;
            component.tabToSelect = _this.tabToSelect;
            component.selectOnBlur = _this.selectOnBlur;
            component.matchFormatted = _this.matchFormatted;
            component.autoSelectFirstItem = _this.autoSelectFirstItem;
            component.headerItemTemplate = _this.headerItemTemplate;
            component.ignoreAccents = _this.ignoreAccents;
            component.valueSelected.subscribe(_this.selectNewValue);
            component.textEntered.subscribe(_this.enterNewText);
            component.customSelected.subscribe(_this.selectCustomValue);
            _this.acDropdownEl = _this.componentRef.location.nativeElement;
            _this.acDropdownEl.style.display = 'none';
            // if this element is not an input tag, move dropdown after input tag
            // so that it displays correctly
            // TODO: confirm with owners
            // with some reason, viewContainerRef.createComponent is creating element
            // to parent div which is created by us on ngOnInit, please try this with demo
            // if (this.el.tagName !== 'INPUT' && this.acDropdownEl) {
            _this.inputEl.parentElement.insertBefore(_this.acDropdownEl, _this.inputEl.nextSibling);
            // }
            _this.revertValue = typeof _this.ngModel !== 'undefined' ? _this.ngModel : _this.inputEl.value;
            setTimeout(function () {
                component.reloadList(_this.inputEl.value);
                _this.styleAutoCompleteDropdown();
                component.dropdownVisible = true;
            });
        };
        this.hideAutoCompleteDropdown = function (event) {
            if (_this.componentRef) {
                var currentItem = void 0;
                var hasRevertValue = (typeof _this.revertValue !== 'undefined');
                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false) {
                    currentItem = _this.componentRef.instance.findItemFromSelectValue(_this.inputEl.value);
                }
                _this.componentRef.destroy();
                _this.componentRef = undefined;
                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false && currentItem === null) {
                    _this.selectNewValue(_this.revertValue);
                }
                else if (_this.inputEl && _this.acceptUserInput === true && typeof currentItem === 'undefined' && event && event.target.value) {
                    _this.enterNewText(event.target.value);
                }
            }
            _this.dropdownJustHidden = true;
            setTimeout(function () { return _this.dropdownJustHidden = false; }, 100);
        };
        this.styleAutoCompleteDropdown = function () {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                /* setting width/height auto complete */
                var thisElBCR = _this.el.getBoundingClientRect();
                var thisInputElBCR = _this.inputEl.getBoundingClientRect();
                var closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;
                var directionOfStyle = _this.isRtl ? 'right' : 'left';
                _this.acDropdownEl.style.width = thisInputElBCR.width + 'px';
                _this.acDropdownEl.style.position = 'absolute';
                _this.acDropdownEl.style.zIndex = _this.zIndex;
                _this.acDropdownEl.style[directionOfStyle] = '0';
                _this.acDropdownEl.style.display = 'inline-block';
                if (closeToBottom) {
                    _this.acDropdownEl.style.bottom = thisInputElBCR.height + "px";
                }
                else {
                    _this.acDropdownEl.style.top = thisInputElBCR.height + "px";
                }
            }
        };
        this.selectNewValue = function (item) {
            // make displayable value
            if (item && typeof item === 'object') {
                item = _this.setToStringFunction(item);
            }
            _this.renderValue(item);
            // make return value
            var val = item;
            if (_this.selectValueOf && item[_this.selectValueOf]) {
                val = item[_this.selectValueOf];
            }
            if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {
                if (!!val) {
                    _this.formControl.patchValue(val);
                }
            }
            if (val !== _this.ngModel) {
                _this.ngModelChange.emit(val);
            }
            _this.valueChanged.emit(val);
            _this.hideAutoCompleteDropdown();
            setTimeout(function () {
                if (_this.reFocusAfterSelect) {
                    _this.inputEl.focus();
                }
                return _this.inputEl;
            });
        };
        this.selectCustomValue = function (text) {
            _this.customSelected.emit(text);
            _this.hideAutoCompleteDropdown();
            setTimeout(function () {
                if (_this.reFocusAfterSelect) {
                    _this.inputEl.focus();
                }
                return _this.inputEl;
            });
        };
        this.enterNewText = function (value) {
            _this.renderValue(value);
            _this.ngModelChange.emit(value);
            _this.valueChanged.emit(value);
            _this.hideAutoCompleteDropdown();
        };
        this.keydownEventHandler = function (evt) {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                component.inputElKeyHandler(evt);
            }
        };
        this.inputEventHandler = function (evt) {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                component.dropdownVisible = true;
                component.keyword = evt.target.value;
                component.reloadListInDelay(evt);
            }
            else {
                _this.showAutoCompleteDropdown();
            }
        };
        this.el = this.viewContainerRef.element.nativeElement;
    }
    NguiAutoCompleteDirective.prototype.ngOnInit = function () {
        var _this = this;
        // Blur event is handled only after a click event.
        // This is to prevent handling of blur events resulting from interacting with a scrollbar
        // introduced by content overflow (Internet explorer issue).
        // See issue description here: http://stackoverflow.com/questions/2023779/clicking-on-a-divs-scroll-bar-fires-the-blur-event-in-ie
        this.documentClickListener = function (e) {
            if (_this.scheduledBlurHandler) {
                _this.scheduledBlurHandler();
                _this.scheduledBlurHandler = null;
            }
        };
        document.addEventListener('click', this.documentClickListener);
        // wrap this element with <div class="ngui-auto-complete">
        this.wrapperEl = document.createElement('div');
        this.wrapperEl.className = 'ngui-auto-complete-wrapper';
        this.wrapperEl.style.position = 'relative';
        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);
        this.wrapperEl.appendChild(this.el);
        // Check if we were supplied with a [formControlName] and it is inside a [form]
        // else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag
        if (this.parentForm && this.formControlName) {
            if (this.parentForm['form']) {
                this.formControl = this.parentForm['form'].get(this.formControlName);
            }
            else if (this.parentForm instanceof FormGroupName) {
                this.formControl = this.parentForm.control.controls[this.formControlName];
            }
        }
        else if (this.extFormControl) {
            this.formControl = this.extFormControl;
        }
        // apply toString() method for the object
        if (!!this.ngModel) {
            this.selectNewValue(this.ngModel);
        }
        else if (!!this.formControl && this.formControl.value) {
            this.selectNewValue(this.formControl.value);
        }
    };
    NguiAutoCompleteDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // if this element is not an input tag, move dropdown after input tag
        // so that it displays correctly
        this.inputEl = this.el.tagName === 'INPUT' ? this.el : this.el.querySelector('input');
        if (this.openOnFocus) {
            this.inputEl.addEventListener('focus', function (e) { return _this.showAutoCompleteDropdown(e); });
        }
        if (this.closeOnFocusOut) {
            this.inputEl.addEventListener('focusout', function (e) { return _this.hideAutoCompleteDropdown(e); });
        }
        if (!this.autocomplete) {
            this.inputEl.setAttribute('autocomplete', 'off');
        }
        this.inputEl.addEventListener('blur', function (e) {
            _this.scheduledBlurHandler = function () {
                return _this.blurHandler(e);
            };
        });
        this.inputEl.addEventListener('keydown', function (e) { return _this.keydownEventHandler(e); });
        this.inputEl.addEventListener('input', function (e) { return _this.inputEventHandler(e); });
    };
    NguiAutoCompleteDirective.prototype.ngOnDestroy = function () {
        if (this.componentRef) {
            this.componentRef.instance.valueSelected.unsubscribe();
            this.componentRef.instance.textEntered.unsubscribe();
        }
        if (this.documentClickListener) {
            document.removeEventListener('click', this.documentClickListener);
        }
    };
    NguiAutoCompleteDirective.prototype.ngOnChanges = function (changes) {
        if (changes['ngModel']) {
            this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);
            this.renderValue(this.ngModel);
        }
    };
    NguiAutoCompleteDirective.prototype.blurHandler = function (event) {
        if (this.componentRef) {
            var component = this.componentRef.instance;
            if (this.selectOnBlur) {
                component.selectOne(component.filteredList[component.itemIndex]);
            }
            if (this.closeOnFocusOut) {
                this.hideAutoCompleteDropdown(event);
            }
        }
    };
    NguiAutoCompleteDirective.prototype.setToStringFunction = function (item) {
        if (item && typeof item === 'object') {
            var displayVal_1;
            if (typeof this.valueFormatter === 'string') {
                var matches = this.valueFormatter.match(/[a-zA-Z0-9_\$]+/g);
                var formatted_1 = this.valueFormatter;
                if (matches && typeof item !== 'string') {
                    matches.forEach(function (key) {
                        formatted_1 = formatted_1.replace(key, item[key]);
                    });
                }
                displayVal_1 = formatted_1;
            }
            else if (typeof this.valueFormatter === 'function') {
                displayVal_1 = this.valueFormatter(item);
            }
            else if (this.displayPropertyName) {
                displayVal_1 = item[this.displayPropertyName];
            }
            else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\w+$/)) {
                displayVal_1 = item[this.listFormatter];
            }
            else {
                displayVal_1 = item.value;
            }
            item.toString = function () { return displayVal_1; };
        }
        return item;
    };
    NguiAutoCompleteDirective.prototype.renderValue = function (item) {
        if (!!this.inputEl) {
            this.inputEl.value = '' + item;
        }
    };
    NguiAutoCompleteDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] }
    ]; };
    __decorate([
        Input('autocomplete')
    ], NguiAutoCompleteDirective.prototype, "autocomplete", void 0);
    __decorate([
        Input('auto-complete-placeholder')
    ], NguiAutoCompleteDirective.prototype, "autoCompletePlaceholder", void 0);
    __decorate([
        Input('source')
    ], NguiAutoCompleteDirective.prototype, "source", void 0);
    __decorate([
        Input('path-to-data')
    ], NguiAutoCompleteDirective.prototype, "pathToData", void 0);
    __decorate([
        Input('min-chars')
    ], NguiAutoCompleteDirective.prototype, "minChars", void 0);
    __decorate([
        Input('display-property-name')
    ], NguiAutoCompleteDirective.prototype, "displayPropertyName", void 0);
    __decorate([
        Input('accept-user-input')
    ], NguiAutoCompleteDirective.prototype, "acceptUserInput", void 0);
    __decorate([
        Input('max-num-list')
    ], NguiAutoCompleteDirective.prototype, "maxNumList", void 0);
    __decorate([
        Input('select-value-of')
    ], NguiAutoCompleteDirective.prototype, "selectValueOf", void 0);
    __decorate([
        Input('loading-template')
    ], NguiAutoCompleteDirective.prototype, "loadingTemplate", void 0);
    __decorate([
        Input('list-formatter')
    ], NguiAutoCompleteDirective.prototype, "listFormatter", void 0);
    __decorate([
        Input('loading-text')
    ], NguiAutoCompleteDirective.prototype, "loadingText", void 0);
    __decorate([
        Input('blank-option-text')
    ], NguiAutoCompleteDirective.prototype, "blankOptionText", void 0);
    __decorate([
        Input('no-match-found-text')
    ], NguiAutoCompleteDirective.prototype, "noMatchFoundText", void 0);
    __decorate([
        Input('value-formatter')
    ], NguiAutoCompleteDirective.prototype, "valueFormatter", void 0);
    __decorate([
        Input('tab-to-select')
    ], NguiAutoCompleteDirective.prototype, "tabToSelect", void 0);
    __decorate([
        Input('select-on-blur')
    ], NguiAutoCompleteDirective.prototype, "selectOnBlur", void 0);
    __decorate([
        Input('match-formatted')
    ], NguiAutoCompleteDirective.prototype, "matchFormatted", void 0);
    __decorate([
        Input('auto-select-first-item')
    ], NguiAutoCompleteDirective.prototype, "autoSelectFirstItem", void 0);
    __decorate([
        Input('open-on-focus')
    ], NguiAutoCompleteDirective.prototype, "openOnFocus", void 0);
    __decorate([
        Input('close-on-focusout')
    ], NguiAutoCompleteDirective.prototype, "closeOnFocusOut", void 0);
    __decorate([
        Input('re-focus-after-select')
    ], NguiAutoCompleteDirective.prototype, "reFocusAfterSelect", void 0);
    __decorate([
        Input('header-item-template')
    ], NguiAutoCompleteDirective.prototype, "headerItemTemplate", void 0);
    __decorate([
        Input('ignore-accents')
    ], NguiAutoCompleteDirective.prototype, "ignoreAccents", void 0);
    __decorate([
        Input()
    ], NguiAutoCompleteDirective.prototype, "ngModel", void 0);
    __decorate([
        Input('formControlName')
    ], NguiAutoCompleteDirective.prototype, "formControlName", void 0);
    __decorate([
        Input('formControl')
    ], NguiAutoCompleteDirective.prototype, "extFormControl", void 0);
    __decorate([
        Input('z-index')
    ], NguiAutoCompleteDirective.prototype, "zIndex", void 0);
    __decorate([
        Input('is-rtl')
    ], NguiAutoCompleteDirective.prototype, "isRtl", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteDirective.prototype, "ngModelChange", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteDirective.prototype, "valueChanged", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteDirective.prototype, "customSelected", void 0);
    NguiAutoCompleteDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[auto-complete], [ngui-auto-complete]'
        }),
        __param(2, Optional()), __param(2, Host()), __param(2, SkipSelf())
    ], NguiAutoCompleteDirective);
    return NguiAutoCompleteDirective;
}());
export { NguiAutoCompleteDirective };
//# sourceMappingURL=data:application/json;base64,