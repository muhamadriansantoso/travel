import { __decorate, __param } from "tslib";
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var NguiAutoComplete = /** @class */ (function () {
    function NguiAutoComplete(http) {
        this.http = http;
        // ...
    }
    NguiAutoComplete.prototype.filter = function (list, keyword, matchFormatted, accentInsensitive) {
        var _this = this;
        return accentInsensitive
            ? list.filter(function (el) {
                var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();
                keyword = keyword.toLowerCase();
                return objStr.normalize('NFD').replace(/[\u0300-\u036f]/g, '')
                    .indexOf(keyword.normalize('NFD').replace(/[\u0300-\u036f]/g, '')) !== -1;
            })
            : list.filter(function (el) {
                var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();
                keyword = keyword.toLowerCase();
                return objStr.indexOf(keyword) !== -1;
            });
    };
    NguiAutoComplete.prototype.getFormattedListItem = function (data) {
        var formatted;
        var formatter = this.listFormatter || '(id) value';
        if (typeof formatter === 'function') {
            formatted = formatter.apply(this, [data]);
        }
        else if (typeof data !== 'object') {
            formatted = data;
        }
        else if (typeof formatter === 'string') {
            formatted = formatter;
            var matches = formatter.match(/[a-zA-Z0-9_\$]+/g);
            if (matches && typeof data !== 'string') {
                matches.forEach(function (key) {
                    formatted = formatted.replace(key, data[key]);
                });
            }
        }
        return formatted;
    };
    /**
     * return remote data from the given source and options, and data path
     */
    NguiAutoComplete.prototype.getRemoteData = function (keyword) {
        var _this = this;
        if (typeof this.source !== 'string') {
            throw new TypeError('Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword');
        }
        else if (!this.http) {
            throw new Error('Http is required.');
        }
        var matches = this.source.match(/:[a-zA-Z_]+/);
        if (matches === null) {
            throw new Error('Replacement word is missing.');
        }
        var replacementWord = matches[0];
        var url = this.source.replace(replacementWord, keyword);
        return this.http.get(url)
            .pipe(map(function (list) {
            if (_this.pathToData) {
                var paths = _this.pathToData.split('.');
                paths.forEach(function (prop) { return list = list[prop]; });
            }
            return list;
        }));
    };
    NguiAutoComplete.ctorParameters = function () { return [
        { type: HttpClient, decorators: [{ type: Optional }] }
    ]; };
    NguiAutoComplete.ɵprov = i0.ɵɵdefineInjectable({ factory: function NguiAutoComplete_Factory() { return new NguiAutoComplete(i0.ɵɵinject(i1.HttpClient, 8)); }, token: NguiAutoComplete, providedIn: "root" });
    NguiAutoComplete = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional())
    ], NguiAutoComplete);
    return NguiAutoComplete;
}());
export { NguiAutoComplete };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5ndWkvYXV0by1jb21wbGV0ZS8iLCJzb3VyY2VzIjpbImxpYi9hdXRvLWNvbXBsZXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUtyQztJQU1FLDBCQUFnQyxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQzlDLE1BQU07SUFDUixDQUFDO0lBRU0saUNBQU0sR0FBYixVQUFjLElBQVcsRUFBRSxPQUFlLEVBQUUsY0FBdUIsRUFBRSxpQkFBMEI7UUFBL0YsaUJBa0JDO1FBakJDLE9BQU8saUJBQWlCO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUNYLFVBQUMsRUFBRTtnQkFDRCxJQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDL0csT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFFaEMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUM7cUJBQzNELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzlFLENBQUMsQ0FBQztZ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RXFDLFVBQVUsdUJBQW5DLFFBQVE7OztJQU5WLGdCQUFnQjtRQUg1QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBT2EsV0FBQSxRQUFRLEVBQUUsQ0FBQTtPQU5aLGdCQUFnQixDQWdGNUI7MkJBeEZEO0NBd0ZDLEFBaEZELElBZ0ZDO1NBaEZZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd1aUF1dG9Db21wbGV0ZSB7XHJcblxyXG4gIHB1YmxpYyBzb3VyY2U6IHN0cmluZztcclxuICBwdWJsaWMgcGF0aFRvRGF0YTogc3RyaW5nO1xyXG4gIHB1YmxpYyBsaXN0Rm9ybWF0dGVyOiAoYXJnOiBhbnkpID0+IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7XHJcbiAgICAvLyAuLi5cclxuICB9XHJcblxyXG4gIHB1YmxpYyBmaWx0ZXIobGlzdDogYW55W10sIGtleXdvcmQ6IHN0cmluZywgbWF0Y2hGb3JtYXR0ZWQ6IGJvb2xlYW4sIGFjY2VudEluc2Vuc2l0aXZlOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gYWNjZW50SW5zZW5zaXRpdmVcclxuICAgICAgPyBsaXN0LmZpbHRlcihcclxuICAgICAgICAoZWwpID0+IHtcclxuICAgICAgICAgIGNvbnN0IG9ialN0ciA9IG1hdGNoRm9ybWF0dGVkID8gdGhpcy5nZXRGb3JtYXR0ZWRMaXN0SXRlbShlbCkudG9Mb3dlckNhc2UoKSA6IEpTT04uc3RyaW5naWZ5KGVsKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAga2V5d29yZCA9IGtleXdvcmQudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gb2JqU3RyLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpXHJcbiAgICAgICAgICAgIC5pbmRleE9mKGtleXdvcmQubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCAnJykpICE9PSAtMTtcclxuICAgICAgICB9KVxyXG4gICAgICA6IGxpc3QuZmlsdGVyKFxyXG4gICAgICAgIChlbCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgb2JqU3RyID0gbWF0Y2hGb3JtYXR0ZWQgPyB0aGlzLmdldEZvcm1hdHRlZExpc3RJdGVtKGVsKS50b0xvd2VyQ2FzZSgpIDogSlNPTi5zdHJpbmdpZnkoZWwpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICBrZXl3b3JkID0ga2V5d29yZC50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBvYmpTdHIuaW5kZXhPZihrZXl3b3JkKSAhPT0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZvcm1hdHRlZExpc3RJdGVtKGRhdGE6IGFueSkge1xyXG4gICAgbGV0IGZvcm1hdHRlZDtcclxuICAgIGNvbnN0IGZvcm1hdHRlciA9IHRoaXMubGlzdEZvcm1hdHRlciB8fCAnKGlkKSB2YWx1ZSc7XHJcbiAgICBpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZXIuYXBwbHkodGhpcywgW2RhdGFdKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgIGZvcm1hdHRlZCA9IGRhdGE7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGZvcm1hdHRlZCA9IGZvcm1hdHRlcjtcclxuICAgICAgY29uc3QgbWF0Y2hlcyA9IGZvcm1hdHRlci5tYXRjaCgvW2EtekEtWjAtOV9cXCRdKy9nKTtcclxuICAgICAgaWYgKG1hdGNoZXMgJiYgdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgIGZvcm1hdHRlZCA9IGZvcm1hdHRlZC5yZXBsYWNlKGtleSwgZGF0YVtrZXldKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvcm1hdHRlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJldHVybiByZW1vdGUgZGF0YSBmcm9tIHRoZSBnaXZlbiBzb3VyY2UgYW5kIG9wdGlvbnMsIGFuZCBkYXRhIHBhdGhcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmVtb3RlRGF0YShrZXl3b3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueVtdPiB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMuc291cmNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHR5cGUgb2Ygc291cmNlLCBtdXN0IGJlIGEgc3RyaW5nLiBlLmcuIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbT9xPTpteV9rZXl3b3JkJyk7XHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmh0dHApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdIdHRwIGlzIHJlcXVpcmVkLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hdGNoZXMgPSB0aGlzLnNvdXJjZS5tYXRjaCgvOlthLXpBLVpfXSsvKTtcclxuICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVwbGFjZW1lbnQgd29yZCBpcyBtaXNzaW5nLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcGxhY2VtZW50V29yZCA9IG1hdGNoZXNbMF07XHJcbiAgICBjb25zdCB1cmwgPSB0aGlzLnNvdXJjZS5yZXBsYWNlKHJlcGxhY2VtZW50V29yZCwga2V5d29yZCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8YW55W10+KHVybClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgbWFwKChsaXN0KSA9PiB7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMucGF0aFRvRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGF0aFRvRGF0YS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBwYXRocy5mb3JFYWNoKChwcm9wKSA9PiBsaXN0ID0gbGlzdFtwcm9wXSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcbn1cclxuIl19