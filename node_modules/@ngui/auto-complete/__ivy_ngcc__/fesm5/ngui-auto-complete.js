import { __decorate, __param } from 'tslib';
import { Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, ElementRef, Input, Output, ViewChild, Component, ViewEncapsulation, ComponentFactoryResolver, ViewContainerRef, Host, SkipSelf, Directive, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { FormGroupName, ControlContainer, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/forms';

var _c0 = ["autoCompleteInput"];
var _c1 = ["autoCompleteContainer"];
function NguiAutoCompleteComponent_input_2_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 6, 7);
    ɵngcc0.ɵɵlistener("focus", function NguiAutoCompleteComponent_input_2_Template_input_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.showDropdownList($event); })("blur", function NguiAutoCompleteComponent_input_2_Template_input_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.blurHandler($event); })("keydown", function NguiAutoCompleteComponent_input_2_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.inputElKeyHandler($event); })("input", function NguiAutoCompleteComponent_input_2_Template_input_input_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.reloadListInDelay($event); })("ngModelChange", function NguiAutoCompleteComponent_input_2_Template_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.keyword = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx_r1.placeholder);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.keyword);
    ɵngcc0.ɵɵattribute("autocomplete", ctx_r1.autocomplete ? "null" : "off");
} }
function NguiAutoCompleteComponent_div_6_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 14);
} if (rf & 2) {
    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r10.loadingTemplate, ɵngcc0.ɵɵsanitizeHtml);
} }
function NguiAutoCompleteComponent_div_6_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r11.loadingText);
} }
function NguiAutoCompleteComponent_div_6_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵlistener("mousedown", function NguiAutoCompleteComponent_div_6_div_3_Template_div_mousedown_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.selectOne(""); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r12.noMatchFoundText || "No Result Found", " ");
} }
function NguiAutoCompleteComponent_div_6_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 17);
} if (rf & 2) {
    var ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r13.headerItemTemplate, ɵngcc0.ɵɵsanitizeHtml);
} }
function NguiAutoCompleteComponent_div_6_div_5_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵlistener("mousedown", function NguiAutoCompleteComponent_div_6_div_5_Template_div_mousedown_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.selectOne(""); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r14.blankOptionText, " ");
} }
var _c2 = function (a0) { return { selected: a0 }; };
function NguiAutoCompleteComponent_div_6_div_6_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵlistener("mousedown", function NguiAutoCompleteComponent_div_6_div_6_Template_div_mousedown_0_listener() { ɵngcc0.ɵɵrestoreView(_r23); var item_r20 = ctx.$implicit; var ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.selectOne(item_r20); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r20 = ctx.$implicit;
    var i_r21 = ctx.index;
    var ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c2, i_r21 === ctx_r15.itemIndex))("innerHtml", ctx_r15.autoComplete.getFormattedListItem(item_r20), ɵngcc0.ɵɵsanitizeHtml);
} }
function NguiAutoCompleteComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, NguiAutoCompleteComponent_div_6_div_1_Template, 1, 1, "div", 8);
    ɵngcc0.ɵɵtemplate(2, NguiAutoCompleteComponent_div_6_div_2_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵtemplate(3, NguiAutoCompleteComponent_div_6_div_3_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵtemplate(4, NguiAutoCompleteComponent_div_6_div_4_Template, 1, 1, "div", 11);
    ɵngcc0.ɵɵtemplate(5, NguiAutoCompleteComponent_div_6_div_5_Template, 2, 1, "div", 12);
    ɵngcc0.ɵɵtemplate(6, NguiAutoCompleteComponent_div_6_div_6_Template, 1, 4, "div", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("empty", ctx_r2.emptyList);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.isLoading && ctx_r2.loadingTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.isLoading && !ctx_r2.loadingTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.minCharsEntered && !ctx_r2.isLoading && !ctx_r2.filteredList.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.headerItemTemplate && ctx_r2.filteredList.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.blankOptionText && ctx_r2.filteredList.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.filteredList)("ngForTrackBy", ctx_r2.trackByIndex);
} }
var NguiAutoComplete = /** @class */ (function () {
    function NguiAutoComplete(http) {
        this.http = http;
        // ...
    }
    NguiAutoComplete.prototype.filter = function (list, keyword, matchFormatted, accentInsensitive) {
        var _this = this;
        return accentInsensitive
            ? list.filter(function (el) {
                var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();
                keyword = keyword.toLowerCase();
                return objStr.normalize('NFD').replace(/[\u0300-\u036f]/g, '')
                    .indexOf(keyword.normalize('NFD').replace(/[\u0300-\u036f]/g, '')) !== -1;
            })
            : list.filter(function (el) {
                var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();
                keyword = keyword.toLowerCase();
                return objStr.indexOf(keyword) !== -1;
            });
    };
    NguiAutoComplete.prototype.getFormattedListItem = function (data) {
        var formatted;
        var formatter = this.listFormatter || '(id) value';
        if (typeof formatter === 'function') {
            formatted = formatter.apply(this, [data]);
        }
        else if (typeof data !== 'object') {
            formatted = data;
        }
        else if (typeof formatter === 'string') {
            formatted = formatter;
            var matches = formatter.match(/[a-zA-Z0-9_\$]+/g);
            if (matches && typeof data !== 'string') {
                matches.forEach(function (key) {
                    formatted = formatted.replace(key, data[key]);
                });
            }
        }
        return formatted;
    };
    /**
     * return remote data from the given source and options, and data path
     */
    NguiAutoComplete.prototype.getRemoteData = function (keyword) {
        var _this = this;
        if (typeof this.source !== 'string') {
            throw new TypeError('Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword');
        }
        else if (!this.http) {
            throw new Error('Http is required.');
        }
        var matches = this.source.match(/:[a-zA-Z_]+/);
        if (matches === null) {
            throw new Error('Replacement word is missing.');
        }
        var replacementWord = matches[0];
        var url = this.source.replace(replacementWord, keyword);
        return this.http.get(url)
            .pipe(map(function (list) {
            if (_this.pathToData) {
                var paths = _this.pathToData.split('.');
                paths.forEach(function (prop) { return list = list[prop]; });
            }
            return list;
        }));
    };
    NguiAutoComplete.ctorParameters = function () { return [
        { type: HttpClient, decorators: [{ type: Optional }] }
    ]; };
    NguiAutoComplete.ɵprov = ɵɵdefineInjectable({ factory: function NguiAutoComplete_Factory() { return new NguiAutoComplete(ɵɵinject(HttpClient, 8)); }, token: NguiAutoComplete, providedIn: "root" });
    NguiAutoComplete = __decorate([ __param(0, Optional())
    ], NguiAutoComplete);
NguiAutoComplete.ɵfac = function NguiAutoComplete_Factory(t) { return new (t || NguiAutoComplete)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NguiAutoComplete, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{
                type: Optional
            }] }]; }, null); })();
    return NguiAutoComplete;
}());

var NguiAutoCompleteComponent = /** @class */ (function () {
    /**
     * constructor
     */
    function NguiAutoCompleteComponent(elementRef, autoComplete) {
        var _this = this;
        this.autoComplete = autoComplete;
        /**
         * public input properties
         */
        this.autocomplete = false;
        this.minChars = 0;
        this.acceptUserInput = true;
        this.loadingText = 'Loading';
        this.loadingTemplate = null;
        this.showInputTag = true;
        this.showDropdownOnInit = false;
        this.tabToSelect = true;
        this.matchFormatted = false;
        this.autoSelectFirstItem = false;
        this.selectOnBlur = false;
        this.reFocusAfterSelect = true;
        this.headerItemTemplate = null;
        this.ignoreAccents = true;
        this.valueSelected = new EventEmitter();
        this.customSelected = new EventEmitter();
        this.textEntered = new EventEmitter();
        this.dropdownVisible = false;
        this.isLoading = false;
        this.filteredList = [];
        this.minCharsEntered = false;
        this.itemIndex = null;
        this.timer = 0;
        this.delay = (function () {
            var timer = null;
            return function (callback, ms) {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();
        this.selectOnEnter = false;
        this.reloadListInDelay = function (evt) {
            var delayMs = _this.isSrcArr() ? 10 : 500;
            var keyword = evt.target.value;
            // executing after user stopped typing
            _this.delay(function () { return _this.reloadList(keyword); }, delayMs);
        };
        this.inputElKeyHandler = function (evt) {
            var totalNumItem = _this.filteredList.length;
            if (!_this.selectOnEnter && _this.autoSelectFirstItem && (0 !== totalNumItem)) {
                _this.selectOnEnter = true;
            }
            switch (evt.keyCode) {
                case 27: // ESC, hide auto complete
                    _this.selectOnEnter = false;
                    _this.selectOne(undefined);
                    break;
                case 38: // UP, select the previous li el
                    if (0 === totalNumItem) {
                        return;
                    }
                    _this.selectOnEnter = true;
                    _this.itemIndex = (totalNumItem + _this.itemIndex - 1) % totalNumItem;
                    _this.scrollToView(_this.itemIndex);
                    break;
                case 40: // DOWN, select the next li el or the first one
                    if (0 === totalNumItem) {
                        return;
                    }
                    _this.selectOnEnter = true;
                    _this.dropdownVisible = true;
                    var sum = _this.itemIndex;
                    sum = (_this.itemIndex === null) ? 0 : sum + 1;
                    _this.itemIndex = (totalNumItem + sum) % totalNumItem;
                    _this.scrollToView(_this.itemIndex);
                    break;
                case 13: // ENTER, choose it!!
                    if (_this.selectOnEnter) {
                        _this.selectOne(_this.filteredList[_this.itemIndex]);
                    }
                    evt.preventDefault();
                    break;
                case 9: // TAB, choose if tab-to-select is enabled
                    if (_this.tabToSelect) {
                        _this.selectOne(_this.filteredList[_this.itemIndex]);
                    }
                    break;
            }
        };
        this.el = elementRef.nativeElement;
    }
    /**
     * user enters into input el, shows list to select, then select one
     */
    NguiAutoCompleteComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.autoComplete.source = this.source;
        this.autoComplete.pathToData = this.pathToData;
        this.autoComplete.listFormatter = this.listFormatter;
        if (this.autoSelectFirstItem) {
            this.itemIndex = 0;
        }
        setTimeout(function () {
            if (_this.autoCompleteInput && _this.reFocusAfterSelect) {
                _this.autoCompleteInput.nativeElement.focus();
            }
            if (_this.showDropdownOnInit) {
                _this.showDropdownList({ target: { value: '' } });
            }
        });
    };
    NguiAutoCompleteComponent.prototype.isSrcArr = function () {
        return Array.isArray(this.source);
    };
    NguiAutoCompleteComponent.prototype.showDropdownList = function (event) {
        this.dropdownVisible = true;
        this.reloadList(event.target.value);
    };
    NguiAutoCompleteComponent.prototype.hideDropdownList = function () {
        this.selectOnEnter = false;
        this.dropdownVisible = false;
    };
    NguiAutoCompleteComponent.prototype.findItemFromSelectValue = function (selectText) {
        var matchingItems = this.filteredList.filter(function (item) { return ('' + item) === selectText; });
        return matchingItems.length ? matchingItems[0] : null;
    };
    NguiAutoCompleteComponent.prototype.reloadList = function (keyword) {
        var _this = this;
        this.filteredList = [];
        if (keyword.length < (this.minChars || 0)) {
            this.minCharsEntered = false;
            return;
        }
        else {
            this.minCharsEntered = true;
        }
        if (this.isSrcArr()) { // local source
            this.isLoading = false;
            this.filteredList = this.autoComplete.filter(this.source, keyword, this.matchFormatted, this.ignoreAccents);
            if (this.maxNumList) {
                this.filteredList = this.filteredList.slice(0, this.maxNumList);
            }
        }
        else { // remote source
            this.isLoading = true;
            if (typeof this.source === 'function') {
                // custom function that returns observable
                this.source(keyword).subscribe(function (resp) {
                    if (_this.pathToData) {
                        var paths = _this.pathToData.split('.');
                        paths.forEach(function (prop) { return resp = resp[prop]; });
                    }
                    _this.filteredList = resp;
                    if (_this.maxNumList) {
                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);
                    }
                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete
                );
            }
            else {
                // remote source
                this.autoComplete.getRemoteData(keyword).subscribe(function (resp) {
                    _this.filteredList = resp ? resp : [];
                    if (_this.maxNumList) {
                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);
                    }
                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete
                );
            }
        }
    };
    NguiAutoCompleteComponent.prototype.selectOne = function (data) {
        if (!!data || data === '') {
            this.valueSelected.emit(data);
        }
        else {
            this.customSelected.emit(this.keyword);
        }
    };
    NguiAutoCompleteComponent.prototype.enterText = function (data) {
        this.textEntered.emit(data);
    };
    NguiAutoCompleteComponent.prototype.blurHandler = function (evt) {
        if (this.selectOnBlur) {
            this.selectOne(this.filteredList[this.itemIndex]);
        }
        this.hideDropdownList();
    };
    NguiAutoCompleteComponent.prototype.scrollToView = function (index) {
        var container = this.autoCompleteContainer.nativeElement;
        var ul = container.querySelector('ul');
        var li = ul.querySelector('li'); // just sample the first li to get height
        var liHeight = li.offsetHeight;
        var scrollTop = ul.scrollTop;
        var viewport = scrollTop + ul.offsetHeight;
        var scrollOffset = liHeight * index;
        if (scrollOffset < scrollTop || (scrollOffset + liHeight) > viewport) {
            ul.scrollTop = scrollOffset;
        }
    };
    NguiAutoCompleteComponent.prototype.trackByIndex = function (index, item) {
        return index;
    };
    Object.defineProperty(NguiAutoCompleteComponent.prototype, "emptyList", {
        get: function () {
            return !(this.isLoading ||
                (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||
                (this.filteredList.length));
        },
        enumerable: true,
        configurable: true
    });
    NguiAutoCompleteComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NguiAutoComplete }
    ]; };
    __decorate([
        Input('autocomplete')
    ], NguiAutoCompleteComponent.prototype, "autocomplete", void 0);
    __decorate([
        Input('list-formatter')
    ], NguiAutoCompleteComponent.prototype, "listFormatter", void 0);
    __decorate([
        Input('source')
    ], NguiAutoCompleteComponent.prototype, "source", void 0);
    __decorate([
        Input('path-to-data')
    ], NguiAutoCompleteComponent.prototype, "pathToData", void 0);
    __decorate([
        Input('min-chars')
    ], NguiAutoCompleteComponent.prototype, "minChars", void 0);
    __decorate([
        Input('placeholder')
    ], NguiAutoCompleteComponent.prototype, "placeholder", void 0);
    __decorate([
        Input('blank-option-text')
    ], NguiAutoCompleteComponent.prototype, "blankOptionText", void 0);
    __decorate([
        Input('no-match-found-text')
    ], NguiAutoCompleteComponent.prototype, "noMatchFoundText", void 0);
    __decorate([
        Input('accept-user-input')
    ], NguiAutoCompleteComponent.prototype, "acceptUserInput", void 0);
    __decorate([
        Input('loading-text')
    ], NguiAutoCompleteComponent.prototype, "loadingText", void 0);
    __decorate([
        Input('loading-template')
    ], NguiAutoCompleteComponent.prototype, "loadingTemplate", void 0);
    __decorate([
        Input('max-num-list')
    ], NguiAutoCompleteComponent.prototype, "maxNumList", void 0);
    __decorate([
        Input('show-input-tag')
    ], NguiAutoCompleteComponent.prototype, "showInputTag", void 0);
    __decorate([
        Input('show-dropdown-on-init')
    ], NguiAutoCompleteComponent.prototype, "showDropdownOnInit", void 0);
    __decorate([
        Input('tab-to-select')
    ], NguiAutoCompleteComponent.prototype, "tabToSelect", void 0);
    __decorate([
        Input('match-formatted')
    ], NguiAutoCompleteComponent.prototype, "matchFormatted", void 0);
    __decorate([
        Input('auto-select-first-item')
    ], NguiAutoCompleteComponent.prototype, "autoSelectFirstItem", void 0);
    __decorate([
        Input('select-on-blur')
    ], NguiAutoCompleteComponent.prototype, "selectOnBlur", void 0);
    __decorate([
        Input('re-focus-after-select')
    ], NguiAutoCompleteComponent.prototype, "reFocusAfterSelect", void 0);
    __decorate([
        Input('header-item-template')
    ], NguiAutoCompleteComponent.prototype, "headerItemTemplate", void 0);
    __decorate([
        Input('ignore-accents')
    ], NguiAutoCompleteComponent.prototype, "ignoreAccents", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteComponent.prototype, "valueSelected", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteComponent.prototype, "customSelected", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteComponent.prototype, "textEntered", void 0);
    __decorate([
        ViewChild('autoCompleteInput')
    ], NguiAutoCompleteComponent.prototype, "autoCompleteInput", void 0);
    __decorate([
        ViewChild('autoCompleteContainer')
    ], NguiAutoCompleteComponent.prototype, "autoCompleteContainer", void 0);
NguiAutoCompleteComponent.ɵfac = function NguiAutoCompleteComponent_Factory(t) { return new (t || NguiAutoCompleteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NguiAutoComplete)); };
NguiAutoCompleteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NguiAutoCompleteComponent, selectors: [["ngui-auto-complete"]], viewQuery: function NguiAutoCompleteComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.autoCompleteInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.autoCompleteContainer = _t.first);
    } }, inputs: { autocomplete: "autocomplete", minChars: ["min-chars", "minChars"], acceptUserInput: ["accept-user-input", "acceptUserInput"], loadingText: ["loading-text", "loadingText"], loadingTemplate: ["loading-template", "loadingTemplate"], showInputTag: ["show-input-tag", "showInputTag"], showDropdownOnInit: ["show-dropdown-on-init", "showDropdownOnInit"], tabToSelect: ["tab-to-select", "tabToSelect"], matchFormatted: ["match-formatted", "matchFormatted"], autoSelectFirstItem: ["auto-select-first-item", "autoSelectFirstItem"], selectOnBlur: ["select-on-blur", "selectOnBlur"], reFocusAfterSelect: ["re-focus-after-select", "reFocusAfterSelect"], headerItemTemplate: ["header-item-template", "headerItemTemplate"], ignoreAccents: ["ignore-accents", "ignoreAccents"], listFormatter: ["list-formatter", "listFormatter"], source: "source", pathToData: ["path-to-data", "pathToData"], placeholder: "placeholder", blankOptionText: ["blank-option-text", "blankOptionText"], noMatchFoundText: ["no-match-found-text", "noMatchFoundText"], maxNumList: ["max-num-list", "maxNumList"] }, outputs: { valueSelected: "valueSelected", customSelected: "customSelected", textEntered: "textEntered" }, decls: 7, vars: 2, consts: [[1, "ngui-auto-complete"], ["autoCompleteContainer", ""], ["class", "keyword", 3, "placeholder", "ngModel", "focus", "blur", "keydown", "input", "ngModelChange", 4, "ngIf"], [1, "resultWrapper"], [1, "autoCompleteSubTitle"], [3, "empty", 4, "ngIf"], [1, "keyword", 3, "placeholder", "ngModel", "focus", "blur", "keydown", "input", "ngModelChange"], ["autoCompleteInput", ""], ["class", "loading", 3, "innerHTML", 4, "ngIf"], ["class", "loading", 4, "ngIf"], ["class", "no-match-found", 3, "mousedown", 4, "ngIf"], ["class", "header-item", 3, "innerHTML", 4, "ngIf"], ["class", "blank-item", 3, "mousedown", 4, "ngIf"], ["class", "autoCompleteWrapper", 3, "ngClass", "innerHtml", "mousedown", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "loading", 3, "innerHTML"], [1, "loading"], [1, "no-match-found", 3, "mousedown"], [1, "header-item", 3, "innerHTML"], [1, "blank-item", 3, "mousedown"], [1, "autoCompleteWrapper", 3, "ngClass", "innerHtml", "mousedown"]], template: function NguiAutoCompleteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵtemplate(2, NguiAutoCompleteComponent_input_2_Template, 2, 3, "input", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtext(5, "Airport List");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, NguiAutoCompleteComponent_div_6_Template, 7, 9, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showInputTag);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dropdownVisible);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc2.NgForOf, ɵngcc2.NgClass], styles: ["\n    @keyframes slideDown {\n      0% {\n        transform: translateY(-10px);\n      }\n      100% {\n        transform: translateY(0px);\n      }\n    }\n\n    .ngui-auto-complete {\n      background-color: transparent;\n    }\n\n    .ngui-auto-complete > input {\n      outline: none;\n      border: 0;\n      padding: 2px;\n      box-sizing: border-box;\n      background-clip: content-box;\n    }\n\n    .ngui-auto-complete > ul {\n      background-color: #fff;\n      margin: 0;\n      width: 100%;\n      overflow-y: auto;\n      list-style-type: none;\n      padding: 0;\n      border: 1px solid #ccc;\n      box-sizing: border-box;\n      animation: slideDown 0.1s;\n    }\n\n    .ngui-auto-complete > ul.empty {\n      display: none;\n    }\n\n    .ngui-auto-complete > ul li {\n      padding: 2px 5px;\n      border-bottom: 1px solid #eee;\n    }\n\n    .ngui-auto-complete > ul li.selected {\n      background-color: #ccc;\n    }\n\n    .ngui-auto-complete > ul li:last-child {\n      border-bottom: none;\n    }\n\n    .ngui-auto-complete > ul li:not(.header-item):hover {\n      background-color: #ccc;\n    }"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NguiAutoCompleteComponent, [{
        type: Component,
        args: [{
                selector: 'ngui-auto-complete',
                template: "\n<div #autoCompleteContainer class=\"ngui-auto-complete\">\n" +
                    "                        <!-- keyword input -->\n" +
                    "                        <input *ngIf=\"showInputTag\"\n" +
                    "                               #autoCompleteInput class=\"keyword\"\n" +
                    "                               [attr.autocomplete]=\"autocomplete ? 'null' : 'off'\"\n" +
                    "                               placeholder=\"{{placeholder}}\"\n" +
                    "                               (focus)=\"showDropdownList($event)\"\n" +
                    "                               (blur)=\"blurHandler($event)\"\n" +
                    "                               (keydown)=\"inputElKeyHandler($event)\"\n" +
                    "                               (input)=\"reloadListInDelay($event)\"\n" +
                    "                               [(ngModel)]=\"keyword\"/>\n" +
                    "\n" +
                    "                        <!-- dropdown that user can select -->\n" +
                    "                        <div class=\"resultWrapper\">\n" +
                    "                          <div class=\"autoCompleteSubTitle\">Airport List</div>\n" +
                    "                          <div *ngIf=\"dropdownVisible\" [class.empty]=\"emptyList\">\n" +
                    "                            <div *ngIf=\"isLoading && loadingTemplate\" class=\"loading\"\n" +
                    "                                [innerHTML]=\"loadingTemplate\">\n" +
                    "                            </div>\n" +
                    "                            <div *ngIf=\"isLoading && !loadingTemplate\" class=\"loading\">{{loadingText}}</div>\n" +
                    "                            <div *ngIf=\"minCharsEntered && !isLoading && !filteredList.length\"\n" +
                    "                                (mousedown)=\"selectOne('')\"\n" +
                    "                                class=\"no-match-found\">{{noMatchFoundText || 'No Result Found'}}\n" +
                    "                            </div>\n" +
                    "                            <div *ngIf=\"headerItemTemplate && filteredList.length\" class=\"header-item\"\n" +
                    "                                [innerHTML]=\"headerItemTemplate\">\n" +
                    "                            </div>\n" +
                    "                            <div *ngIf=\"blankOptionText && filteredList.length\"\n" +
                    "                                (mousedown)=\"selectOne('')\"\n" +
                    "                                class=\"blank-item\">{{blankOptionText}}\n" +
                    "                            </div>\n" +
                    "                            <div class=\"autoCompleteWrapper\"\n" +
                    "                                *ngFor=\"let item of filteredList; let i=index; trackBy: trackByIndex\"\n" +
                    "                                (mousedown)=\"selectOne(item)\"\n" +
                    "                                [ngClass]=\"{selected: i === itemIndex}\"\n" +
                    "                                [innerHtml]=\"autoComplete.getFormattedListItem(item)\">\n" +
                    "                            </div>\n" +
                    "                          </div>\n" +
                    "                        </div>\n" +
                    "                      </div>",
                encapsulation: ViewEncapsulation.None,
                styles: ["\n    @keyframes slideDown {\n      0% {\n        transform: translateY(-10px);\n      }\n      100% {\n        transform: translateY(0px);\n      }\n    }\n\n    .ngui-auto-complete {\n      background-color: transparent;\n    }\n\n    .ngui-auto-complete > input {\n      outline: none;\n      border: 0;\n      padding: 2px;\n      box-sizing: border-box;\n      background-clip: content-box;\n    }\n\n    .ngui-auto-complete > ul {\n      background-color: #fff;\n      margin: 0;\n      width: 100%;\n      overflow-y: auto;\n      list-style-type: none;\n      padding: 0;\n      border: 1px solid #ccc;\n      box-sizing: border-box;\n      animation: slideDown 0.1s;\n    }\n\n    .ngui-auto-complete > ul.empty {\n      display: none;\n    }\n\n    .ngui-auto-complete > ul li {\n      padding: 2px 5px;\n      border-bottom: 1px solid #eee;\n    }\n\n    .ngui-auto-complete > ul li.selected {\n      background-color: #ccc;\n    }\n\n    .ngui-auto-complete > ul li:last-child {\n      border-bottom: none;\n    }\n\n    .ngui-auto-complete > ul li:not(.header-item):hover {\n      background-color: #ccc;\n    }"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NguiAutoComplete }]; }, { autocomplete: [{
            type: Input,
            args: ['autocomplete']
        }], minChars: [{
            type: Input,
            args: ['min-chars']
        }], acceptUserInput: [{
            type: Input,
            args: ['accept-user-input']
        }], loadingText: [{
            type: Input,
            args: ['loading-text']
        }], loadingTemplate: [{
            type: Input,
            args: ['loading-template']
        }], showInputTag: [{
            type: Input,
            args: ['show-input-tag']
        }], showDropdownOnInit: [{
            type: Input,
            args: ['show-dropdown-on-init']
        }], tabToSelect: [{
            type: Input,
            args: ['tab-to-select']
        }], matchFormatted: [{
            type: Input,
            args: ['match-formatted']
        }], autoSelectFirstItem: [{
            type: Input,
            args: ['auto-select-first-item']
        }], selectOnBlur: [{
            type: Input,
            args: ['select-on-blur']
        }], reFocusAfterSelect: [{
            type: Input,
            args: ['re-focus-after-select']
        }], headerItemTemplate: [{
            type: Input,
            args: ['header-item-template']
        }], ignoreAccents: [{
            type: Input,
            args: ['ignore-accents']
        }], valueSelected: [{
            type: Output
        }], customSelected: [{
            type: Output
        }], textEntered: [{
            type: Output
        }], listFormatter: [{
            type: Input,
            args: ['list-formatter']
        }], source: [{
            type: Input,
            args: ['source']
        }], pathToData: [{
            type: Input,
            args: ['path-to-data']
        }], placeholder: [{
            type: Input,
            args: ['placeholder']
        }], blankOptionText: [{
            type: Input,
            args: ['blank-option-text']
        }], noMatchFoundText: [{
            type: Input,
            args: ['no-match-found-text']
        }], maxNumList: [{
            type: Input,
            args: ['max-num-list']
        }], autoCompleteInput: [{
            type: ViewChild,
            args: ['autoCompleteInput']
        }], autoCompleteContainer: [{
            type: ViewChild,
            args: ['autoCompleteContainer']
        }] }); })();
    return NguiAutoCompleteComponent;
}());

var NguiAutoCompleteDirective = /** @class */ (function () {
    function NguiAutoCompleteDirective(resolver, viewContainerRef, parentForm) {
        var _this = this;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.parentForm = parentForm;
        this.autocomplete = false;
        this.acceptUserInput = true;
        this.loadingTemplate = null;
        this.loadingText = 'Loading';
        this.tabToSelect = true;
        this.selectOnBlur = false;
        this.matchFormatted = false;
        this.autoSelectFirstItem = false;
        this.openOnFocus = true;
        this.closeOnFocusOut = true;
        this.reFocusAfterSelect = true;
        this.headerItemTemplate = null;
        this.ignoreAccents = true;
        this.zIndex = '1';
        this.isRtl = false;
        this.ngModelChange = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.customSelected = new EventEmitter();
        // show auto-complete list below the current element
        this.showAutoCompleteDropdown = function (event) {
            if (_this.dropdownJustHidden) {
                return;
            }
            _this.hideAutoCompleteDropdown();
            _this.scheduledBlurHandler = null;
            var factory = _this.resolver.resolveComponentFactory(NguiAutoCompleteComponent);
            _this.componentRef = _this.viewContainerRef.createComponent(factory);
            var component = _this.componentRef.instance;
            component.keyword = _this.inputEl.value;
            component.showInputTag = false; // Do NOT display autocomplete input tag separately
            component.pathToData = _this.pathToData;
            component.minChars = _this.minChars;
            component.source = _this.source;
            component.placeholder = _this.autoCompletePlaceholder;
            component.acceptUserInput = _this.acceptUserInput;
            component.maxNumList = parseInt(_this.maxNumList, 10);
            component.loadingText = _this.loadingText;
            component.loadingTemplate = _this.loadingTemplate;
            component.listFormatter = _this.listFormatter;
            component.blankOptionText = _this.blankOptionText;
            component.noMatchFoundText = _this.noMatchFoundText;
            component.tabToSelect = _this.tabToSelect;
            component.selectOnBlur = _this.selectOnBlur;
            component.matchFormatted = _this.matchFormatted;
            component.autoSelectFirstItem = _this.autoSelectFirstItem;
            component.headerItemTemplate = _this.headerItemTemplate;
            component.ignoreAccents = _this.ignoreAccents;
            component.valueSelected.subscribe(_this.selectNewValue);
            component.textEntered.subscribe(_this.enterNewText);
            component.customSelected.subscribe(_this.selectCustomValue);
            _this.acDropdownEl = _this.componentRef.location.nativeElement;
            _this.acDropdownEl.style.display = 'none';
            // if this element is not an input tag, move dropdown after input tag
            // so that it displays correctly
            // TODO: confirm with owners
            // with some reason, viewContainerRef.createComponent is creating element
            // to parent div which is created by us on ngOnInit, please try this with demo
            // if (this.el.tagName !== 'INPUT' && this.acDropdownEl) {
            _this.inputEl.parentElement.insertBefore(_this.acDropdownEl, _this.inputEl.nextSibling);
            // }
            _this.revertValue = typeof _this.ngModel !== 'undefined' ? _this.ngModel : _this.inputEl.value;
            setTimeout(function () {
                component.reloadList(_this.inputEl.value);
                _this.styleAutoCompleteDropdown();
                component.dropdownVisible = true;
            });
        };
        this.hideAutoCompleteDropdown = function (event) {
            if (_this.componentRef) {
                var currentItem = void 0;
                var hasRevertValue = (typeof _this.revertValue !== 'undefined');
                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false) {
                    currentItem = _this.componentRef.instance.findItemFromSelectValue(_this.inputEl.value);
                }
                _this.componentRef.destroy();
                _this.componentRef = undefined;
                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false && currentItem === null) {
                    _this.selectNewValue(_this.revertValue);
                }
                else if (_this.inputEl && _this.acceptUserInput === true && typeof currentItem === 'undefined' && event && event.target.value) {
                    _this.enterNewText(event.target.value);
                }
            }
            _this.dropdownJustHidden = true;
            setTimeout(function () { return _this.dropdownJustHidden = false; }, 100);
        };
        this.styleAutoCompleteDropdown = function () {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                /* setting width/height auto complete */
                var thisElBCR = _this.el.getBoundingClientRect();
                var thisInputElBCR = _this.inputEl.getBoundingClientRect();
                var closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;
                var directionOfStyle = _this.isRtl ? 'right' : 'left';
                _this.acDropdownEl.style.width = thisInputElBCR.width + 'px';
                _this.acDropdownEl.style.position = 'absolute';
                _this.acDropdownEl.style.zIndex = _this.zIndex;
                _this.acDropdownEl.style[directionOfStyle] = '0';
                _this.acDropdownEl.style.display = 'inline-block';
                if (closeToBottom) {
                    _this.acDropdownEl.style.bottom = thisInputElBCR.height + "px";
                }
                else {
                    _this.acDropdownEl.style.top = thisInputElBCR.height + "px";
                }
            }
        };
        this.selectNewValue = function (item) {
            // make displayable value
            if (item && typeof item === 'object') {
                item = _this.setToStringFunction(item);
            }
            _this.renderValue(item);
            // make return value
            var val = item;
            if (_this.selectValueOf && item[_this.selectValueOf]) {
                val = item[_this.selectValueOf];
            }
            if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {
                if (!!val) {
                    _this.formControl.patchValue(val);
                }
            }
            if (val !== _this.ngModel) {
                _this.ngModelChange.emit(val);
            }
            _this.valueChanged.emit(val);
            _this.hideAutoCompleteDropdown();
            setTimeout(function () {
                if (_this.reFocusAfterSelect) {
                    _this.inputEl.focus();
                }
                return _this.inputEl;
            });
        };
        this.selectCustomValue = function (text) {
            _this.customSelected.emit(text);
            _this.hideAutoCompleteDropdown();
            setTimeout(function () {
                if (_this.reFocusAfterSelect) {
                    _this.inputEl.focus();
                }
                return _this.inputEl;
            });
        };
        this.enterNewText = function (value) {
            _this.renderValue(value);
            _this.ngModelChange.emit(value);
            _this.valueChanged.emit(value);
            _this.hideAutoCompleteDropdown();
        };
        this.keydownEventHandler = function (evt) {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                component.inputElKeyHandler(evt);
            }
        };
        this.inputEventHandler = function (evt) {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                component.dropdownVisible = true;
                component.keyword = evt.target.value;
                component.reloadListInDelay(evt);
            }
            else {
                _this.showAutoCompleteDropdown();
            }
        };
        this.el = this.viewContainerRef.element.nativeElement;
    }
    NguiAutoCompleteDirective.prototype.ngOnInit = function () {
        var _this = this;
        // Blur event is handled only after a click event.
        // This is to prevent handling of blur events resulting from interacting with a scrollbar
        // introduced by content overflow (Internet explorer issue).
        // See issue description here: http://stackoverflow.com/questions/2023779/clicking-on-a-divs-scroll-bar-fires-the-blur-event-in-ie
        this.documentClickListener = function (e) {
            if (_this.scheduledBlurHandler) {
                _this.scheduledBlurHandler();
                _this.scheduledBlurHandler = null;
            }
        };
        document.addEventListener('click', this.documentClickListener);
        // wrap this element with <div class="ngui-auto-complete">
        this.wrapperEl = document.createElement('div');
        this.wrapperEl.className = 'ngui-auto-complete-wrapper';
        this.wrapperEl.style.position = 'relative';
        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);
        this.wrapperEl.appendChild(this.el);
        // Check if we were supplied with a [formControlName] and it is inside a [form]
        // else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag
        if (this.parentForm && this.formControlName) {
            if (this.parentForm['form']) {
                this.formControl = this.parentForm['form'].get(this.formControlName);
            }
            else if (this.parentForm instanceof FormGroupName) {
                this.formControl = this.parentForm.control.controls[this.formControlName];
            }
        }
        else if (this.extFormControl) {
            this.formControl = this.extFormControl;
        }
        // apply toString() method for the object
        // if (!!this.ngModel) {
        //     this.selectNewValue(this.ngModel);
        // }
        // else if (!!this.formControl && this.formControl.value) {
        //     this.selectNewValue(this.formControl.value);
        // }
    };
    NguiAutoCompleteDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // if this element is not an input tag, move dropdown after input tag
        // so that it displays correctly
        this.inputEl = this.el.tagName === 'INPUT' ? this.el : this.el.querySelector('input');
        if (this.openOnFocus) {
            this.inputEl.addEventListener('focus', function (e) { return _this.showAutoCompleteDropdown(e); });
        }
        if (this.closeOnFocusOut) {
            this.inputEl.addEventListener('focusout', function (e) { return _this.hideAutoCompleteDropdown(e); });
        }
        if (!this.autocomplete) {
            this.inputEl.setAttribute('autocomplete', 'off');
        }
        this.inputEl.addEventListener('blur', function (e) {
            _this.scheduledBlurHandler = function () {
                return _this.blurHandler(e);
            };
        });
        this.inputEl.addEventListener('keydown', function (e) { return _this.keydownEventHandler(e); });
        this.inputEl.addEventListener('input', function (e) { return _this.inputEventHandler(e); });
    };
    NguiAutoCompleteDirective.prototype.ngOnDestroy = function () {
        if (this.componentRef) {
            this.componentRef.instance.valueSelected.unsubscribe();
            this.componentRef.instance.textEntered.unsubscribe();
        }
        if (this.documentClickListener) {
            document.removeEventListener('click', this.documentClickListener);
        }
    };
    NguiAutoCompleteDirective.prototype.ngOnChanges = function (changes) {
        if (changes['ngModel']) {
            this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);
            this.renderValue(this.ngModel);
        }
    };
    NguiAutoCompleteDirective.prototype.blurHandler = function (event) {
        if (this.componentRef) {
            var component = this.componentRef.instance;
            if (this.selectOnBlur) {
                component.selectOne(component.filteredList[component.itemIndex]);
            }
            if (this.closeOnFocusOut) {
                this.hideAutoCompleteDropdown(event);
            }
        }
    };
    NguiAutoCompleteDirective.prototype.setToStringFunction = function (item) {
        if (item && typeof item === 'object') {
            var displayVal_1;
            if (typeof this.valueFormatter === 'string') {
                var matches = this.valueFormatter.match(/[a-zA-Z0-9_\$]+/g);
                var formatted_1 = this.valueFormatter;
                if (matches && typeof item !== 'string') {
                    matches.forEach(function (key) {
                        formatted_1 = formatted_1.replace(key, item[key]);
                    });
                }
                displayVal_1 = formatted_1;
            }
            else if (typeof this.valueFormatter === 'function') {
                displayVal_1 = this.valueFormatter(item);
            }
            else if (this.displayPropertyName) {
                displayVal_1 = item[this.displayPropertyName];
            }
            else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\w+$/)) {
                displayVal_1 = item[this.listFormatter];
            }
            else {
                displayVal_1 = item.value;
            }
            item.toString = function () { return displayVal_1; };
        }
        return item;
    };
    NguiAutoCompleteDirective.prototype.renderValue = function (item) {
        if (!!this.inputEl) {
            this.inputEl.value = '' + item;
        }
    };
    NguiAutoCompleteDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] }
    ]; };
    __decorate([
        Input('autocomplete')
    ], NguiAutoCompleteDirective.prototype, "autocomplete", void 0);
    __decorate([
        Input('auto-complete-placeholder')
    ], NguiAutoCompleteDirective.prototype, "autoCompletePlaceholder", void 0);
    __decorate([
        Input('source')
    ], NguiAutoCompleteDirective.prototype, "source", void 0);
    __decorate([
        Input('path-to-data')
    ], NguiAutoCompleteDirective.prototype, "pathToData", void 0);
    __decorate([
        Input('min-chars')
    ], NguiAutoCompleteDirective.prototype, "minChars", void 0);
    __decorate([
        Input('display-property-name')
    ], NguiAutoCompleteDirective.prototype, "displayPropertyName", void 0);
    __decorate([
        Input('accept-user-input')
    ], NguiAutoCompleteDirective.prototype, "acceptUserInput", void 0);
    __decorate([
        Input('max-num-list')
    ], NguiAutoCompleteDirective.prototype, "maxNumList", void 0);
    __decorate([
        Input('select-value-of')
    ], NguiAutoCompleteDirective.prototype, "selectValueOf", void 0);
    __decorate([
        Input('loading-template')
    ], NguiAutoCompleteDirective.prototype, "loadingTemplate", void 0);
    __decorate([
        Input('list-formatter')
    ], NguiAutoCompleteDirective.prototype, "listFormatter", void 0);
    __decorate([
        Input('loading-text')
    ], NguiAutoCompleteDirective.prototype, "loadingText", void 0);
    __decorate([
        Input('blank-option-text')
    ], NguiAutoCompleteDirective.prototype, "blankOptionText", void 0);
    __decorate([
        Input('no-match-found-text')
    ], NguiAutoCompleteDirective.prototype, "noMatchFoundText", void 0);
    __decorate([
        Input('value-formatter')
    ], NguiAutoCompleteDirective.prototype, "valueFormatter", void 0);
    __decorate([
        Input('tab-to-select')
    ], NguiAutoCompleteDirective.prototype, "tabToSelect", void 0);
    __decorate([
        Input('select-on-blur')
    ], NguiAutoCompleteDirective.prototype, "selectOnBlur", void 0);
    __decorate([
        Input('match-formatted')
    ], NguiAutoCompleteDirective.prototype, "matchFormatted", void 0);
    __decorate([
        Input('auto-select-first-item')
    ], NguiAutoCompleteDirective.prototype, "autoSelectFirstItem", void 0);
    __decorate([
        Input('open-on-focus')
    ], NguiAutoCompleteDirective.prototype, "openOnFocus", void 0);
    __decorate([
        Input('close-on-focusout')
    ], NguiAutoCompleteDirective.prototype, "closeOnFocusOut", void 0);
    __decorate([
        Input('re-focus-after-select')
    ], NguiAutoCompleteDirective.prototype, "reFocusAfterSelect", void 0);
    __decorate([
        Input('header-item-template')
    ], NguiAutoCompleteDirective.prototype, "headerItemTemplate", void 0);
    __decorate([
        Input('ignore-accents')
    ], NguiAutoCompleteDirective.prototype, "ignoreAccents", void 0);
    __decorate([
        Input()
    ], NguiAutoCompleteDirective.prototype, "ngModel", void 0);
    __decorate([
        Input('formControlName')
    ], NguiAutoCompleteDirective.prototype, "formControlName", void 0);
    __decorate([
        Input('formControl')
    ], NguiAutoCompleteDirective.prototype, "extFormControl", void 0);
    __decorate([
        Input('z-index')
    ], NguiAutoCompleteDirective.prototype, "zIndex", void 0);
    __decorate([
        Input('is-rtl')
    ], NguiAutoCompleteDirective.prototype, "isRtl", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteDirective.prototype, "ngModelChange", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteDirective.prototype, "valueChanged", void 0);
    __decorate([
        Output()
    ], NguiAutoCompleteDirective.prototype, "customSelected", void 0);
    NguiAutoCompleteDirective = __decorate([ __param(2, Optional()), __param(2, Host()), __param(2, SkipSelf())
    ], NguiAutoCompleteDirective);
NguiAutoCompleteDirective.ɵfac = function NguiAutoCompleteDirective_Factory(t) { return new (t || NguiAutoCompleteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ControlContainer, 13)); };
NguiAutoCompleteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NguiAutoCompleteDirective, selectors: [["", "auto-complete", ""], ["", "ngui-auto-complete", ""]], inputs: { autocomplete: "autocomplete", acceptUserInput: ["accept-user-input", "acceptUserInput"], loadingTemplate: ["loading-template", "loadingTemplate"], loadingText: ["loading-text", "loadingText"], tabToSelect: ["tab-to-select", "tabToSelect"], selectOnBlur: ["select-on-blur", "selectOnBlur"], matchFormatted: ["match-formatted", "matchFormatted"], autoSelectFirstItem: ["auto-select-first-item", "autoSelectFirstItem"], openOnFocus: ["open-on-focus", "openOnFocus"], closeOnFocusOut: ["close-on-focusout", "closeOnFocusOut"], reFocusAfterSelect: ["re-focus-after-select", "reFocusAfterSelect"], headerItemTemplate: ["header-item-template", "headerItemTemplate"], ignoreAccents: ["ignore-accents", "ignoreAccents"], zIndex: ["z-index", "zIndex"], isRtl: ["is-rtl", "isRtl"], ngModel: "ngModel", autoCompletePlaceholder: ["auto-complete-placeholder", "autoCompletePlaceholder"], source: "source", pathToData: ["path-to-data", "pathToData"], minChars: ["min-chars", "minChars"], displayPropertyName: ["display-property-name", "displayPropertyName"], maxNumList: ["max-num-list", "maxNumList"], selectValueOf: ["select-value-of", "selectValueOf"], listFormatter: ["list-formatter", "listFormatter"], blankOptionText: ["blank-option-text", "blankOptionText"], noMatchFoundText: ["no-match-found-text", "noMatchFoundText"], valueFormatter: ["value-formatter", "valueFormatter"], formControlName: "formControlName", extFormControl: ["formControl", "extFormControl"] }, outputs: { ngModelChange: "ngModelChange", valueChanged: "valueChanged", customSelected: "customSelected" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NguiAutoCompleteDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[auto-complete], [ngui-auto-complete]'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc3.ControlContainer, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: SkipSelf
            }] }]; }, { autocomplete: [{
            type: Input,
            args: ['autocomplete']
        }], acceptUserInput: [{
            type: Input,
            args: ['accept-user-input']
        }], loadingTemplate: [{
            type: Input,
            args: ['loading-template']
        }], loadingText: [{
            type: Input,
            args: ['loading-text']
        }], tabToSelect: [{
            type: Input,
            args: ['tab-to-select']
        }], selectOnBlur: [{
            type: Input,
            args: ['select-on-blur']
        }], matchFormatted: [{
            type: Input,
            args: ['match-formatted']
        }], autoSelectFirstItem: [{
            type: Input,
            args: ['auto-select-first-item']
        }], openOnFocus: [{
            type: Input,
            args: ['open-on-focus']
        }], closeOnFocusOut: [{
            type: Input,
            args: ['close-on-focusout']
        }], reFocusAfterSelect: [{
            type: Input,
            args: ['re-focus-after-select']
        }], headerItemTemplate: [{
            type: Input,
            args: ['header-item-template']
        }], ignoreAccents: [{
            type: Input,
            args: ['ignore-accents']
        }], zIndex: [{
            type: Input,
            args: ['z-index']
        }], isRtl: [{
            type: Input,
            args: ['is-rtl']
        }], ngModelChange: [{
            type: Output
        }], valueChanged: [{
            type: Output
        }], customSelected: [{
            type: Output
        }], ngModel: [{
            type: Input
        }], autoCompletePlaceholder: [{
            type: Input,
            args: ['auto-complete-placeholder']
        }], source: [{
            type: Input,
            args: ['source']
        }], pathToData: [{
            type: Input,
            args: ['path-to-data']
        }], minChars: [{
            type: Input,
            args: ['min-chars']
        }], displayPropertyName: [{
            type: Input,
            args: ['display-property-name']
        }], maxNumList: [{
            type: Input,
            args: ['max-num-list']
        }], selectValueOf: [{
            type: Input,
            args: ['select-value-of']
        }], listFormatter: [{
            type: Input,
            args: ['list-formatter']
        }], blankOptionText: [{
            type: Input,
            args: ['blank-option-text']
        }], noMatchFoundText: [{
            type: Input,
            args: ['no-match-found-text']
        }], valueFormatter: [{
            type: Input,
            args: ['value-formatter']
        }], formControlName: [{
            type: Input,
            args: ['formControlName']
        }], extFormControl: [{
            type: Input,
            args: ['formControl']
        }] }); })();
    return NguiAutoCompleteDirective;
}());

var NguiAutoCompleteModule = /** @class */ (function () {
    function NguiAutoCompleteModule() {
    }
NguiAutoCompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NguiAutoCompleteModule });
NguiAutoCompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NguiAutoCompleteModule_Factory(t) { return new (t || NguiAutoCompleteModule)(); }, imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NguiAutoCompleteModule, { declarations: function () { return [NguiAutoCompleteComponent,
        NguiAutoCompleteDirective]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [NguiAutoCompleteComponent,
        NguiAutoCompleteDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NguiAutoCompleteModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NguiAutoCompleteComponent,
                    NguiAutoCompleteDirective
                ],
                imports: [
                    CommonModule,
                    FormsModule
                ],
                exports: [
                    NguiAutoCompleteComponent,
                    NguiAutoCompleteDirective
                ]
            }]
    }], function () { return []; }, null); })();
    return NguiAutoCompleteModule;
}());

/*
 * Public API Surface of auto-complete
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NguiAutoComplete, NguiAutoCompleteComponent, NguiAutoCompleteDirective, NguiAutoCompleteModule };


//# sourceMappingURL=ngui-auto-complete.js.map