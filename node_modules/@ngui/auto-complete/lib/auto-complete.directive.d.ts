import { AfterViewInit, ComponentFactoryResolver, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ControlContainer, FormControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class NguiAutoCompleteDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {
  private resolver;
  viewContainerRef: ViewContainerRef;
  private parentForm;
  autocomplete: boolean;
  autoCompletePlaceholder: string;
  source: any;
  pathToData: string;
  minChars: number;
  displayPropertyName: string;
  acceptUserInput: boolean;
  maxNumList: string;
  selectValueOf: string;
  loadingTemplate: any;
  listFormatter: any;
  loadingText: string;
  blankOptionText: string;
  noMatchFoundText: string;
  valueFormatter: any;
  tabToSelect: boolean;
  selectOnBlur: boolean;
  matchFormatted: boolean;
  autoSelectFirstItem: boolean;
  openOnFocus: boolean;
  closeOnFocusOut: boolean;
  reFocusAfterSelect: boolean;
  headerItemTemplate: any;
  ignoreAccents: boolean;
  ngModel: string;
  formControlName: string;
  extFormControl: FormControl;
  zIndex: string;
  isRtl: boolean;
  ngModelChange: EventEmitter<any>;
  valueChanged: EventEmitter<any>;
  customSelected: EventEmitter<any>;
  private componentRef;
  private wrapperEl;
  private el;
  private acDropdownEl;
  private inputEl;
  private formControl;
  private revertValue;
  private dropdownJustHidden;
  private scheduledBlurHandler;
  private documentClickListener;
  constructor(resolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, parentForm: ControlContainer);
  ngOnInit(): void;
  ngAfterViewInit(): void;
  ngOnDestroy(): void;
  ngOnChanges(changes: SimpleChanges): void;
  showAutoCompleteDropdown: (event?: any) => void;
  blurHandler(event: any): void;
  hideAutoCompleteDropdown: (event?: any) => void;
  styleAutoCompleteDropdown: () => void;
  setToStringFunction(item: any): any;
  selectNewValue: (item: any) => void;
  selectCustomValue: (text: string) => void;
  enterNewText: (value: any) => void;
  private keydownEventHandler;
  private inputEventHandler;
  private renderValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NguiAutoCompleteDirective, [null, null, { optional: true; host: true; skipSelf: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NguiAutoCompleteDirective, "[auto-complete], [ngui-auto-complete]", never, { "autocomplete": "autocomplete"; "acceptUserInput": "accept-user-input"; "loadingTemplate": "loading-template"; "loadingText": "loading-text"; "tabToSelect": "tab-to-select"; "selectOnBlur": "select-on-blur"; "matchFormatted": "match-formatted"; "autoSelectFirstItem": "auto-select-first-item"; "openOnFocus": "open-on-focus"; "closeOnFocusOut": "close-on-focusout"; "reFocusAfterSelect": "re-focus-after-select"; "headerItemTemplate": "header-item-template"; "ignoreAccents": "ignore-accents"; "zIndex": "z-index"; "isRtl": "is-rtl"; "ngModel": "ngModel"; "autoCompletePlaceholder": "auto-complete-placeholder"; "source": "source"; "pathToData": "path-to-data"; "minChars": "min-chars"; "displayPropertyName": "display-property-name"; "maxNumList": "max-num-list"; "selectValueOf": "select-value-of"; "listFormatter": "list-formatter"; "blankOptionText": "blank-option-text"; "noMatchFoundText": "no-match-found-text"; "valueFormatter": "value-formatter"; "formControlName": "formControlName"; "extFormControl": "formControl"; }, { "ngModelChange": "ngModelChange"; "valueChanged": "valueChanged"; "customSelected": "customSelected"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYXV0by1jb21wbGV0ZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbENvbnRhaW5lciwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5ndWlBdXRvQ29tcGxldGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICBwcml2YXRlIHJlc29sdmVyO1xyXG4gIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgcHJpdmF0ZSBwYXJlbnRGb3JtO1xyXG4gIGF1dG9jb21wbGV0ZTogYm9vbGVhbjtcclxuICBhdXRvQ29tcGxldGVQbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gIHNvdXJjZTogYW55O1xyXG4gIHBhdGhUb0RhdGE6IHN0cmluZztcclxuICBtaW5DaGFyczogbnVtYmVyO1xyXG4gIGRpc3BsYXlQcm9wZXJ0eU5hbWU6IHN0cmluZztcclxuICBhY2NlcHRVc2VySW5wdXQ6IGJvb2xlYW47XHJcbiAgbWF4TnVtTGlzdDogc3RyaW5nO1xyXG4gIHNlbGVjdFZhbHVlT2Y6IHN0cmluZztcclxuICBsb2FkaW5nVGVtcGxhdGU6IGFueTtcclxuICBsaXN0Rm9ybWF0dGVyOiBhbnk7XHJcbiAgbG9hZGluZ1RleHQ6IHN0cmluZztcclxuICBibGFua09wdGlvblRleHQ6IHN0cmluZztcclxuICBub01hdGNoRm91bmRUZXh0OiBzdHJpbmc7XHJcbiAgdmFsdWVGb3JtYXR0ZXI6IGFueTtcclxuICB0YWJUb1NlbGVjdDogYm9vbGVhbjtcclxuICBzZWxlY3RPbkJsdXI6IGJvb2xlYW47XHJcbiAgbWF0Y2hGb3JtYXR0ZWQ6IGJvb2xlYW47XHJcbiAgYXV0b1NlbGVjdEZpcnN0SXRlbTogYm9vbGVhbjtcclxuICBvcGVuT25Gb2N1czogYm9vbGVhbjtcclxuICBjbG9zZU9uRm9jdXNPdXQ6IGJvb2xlYW47XHJcbiAgcmVGb2N1c0FmdGVyU2VsZWN0OiBib29sZWFuO1xyXG4gIGhlYWRlckl0ZW1UZW1wbGF0ZTogYW55O1xyXG4gIGlnbm9yZUFjY2VudHM6IGJvb2xlYW47XHJcbiAgbmdNb2RlbDogc3RyaW5nO1xyXG4gIGZvcm1Db250cm9sTmFtZTogc3RyaW5nO1xyXG4gIGV4dEZvcm1Db250cm9sOiBGb3JtQ29udHJvbDtcclxuICB6SW5kZXg6IHN0cmluZztcclxuICBpc1J0bDogYm9vbGVhbjtcclxuICBuZ01vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICB2YWx1ZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gIGN1c3RvbVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICBwcml2YXRlIGNvbXBvbmVudFJlZjtcclxuICBwcml2YXRlIHdyYXBwZXJFbDtcclxuICBwcml2YXRlIGVsO1xyXG4gIHByaXZhdGUgYWNEcm9wZG93bkVsO1xyXG4gIHByaXZhdGUgaW5wdXRFbDtcclxuICBwcml2YXRlIGZvcm1Db250cm9sO1xyXG4gIHByaXZhdGUgcmV2ZXJ0VmFsdWU7XHJcbiAgcHJpdmF0ZSBkcm9wZG93bkp1c3RIaWRkZW47XHJcbiAgcHJpdmF0ZSBzY2hlZHVsZWRCbHVySGFuZGxlcjtcclxuICBwcml2YXRlIGRvY3VtZW50Q2xpY2tMaXN0ZW5lcjtcclxuICBjb25zdHJ1Y3RvcihyZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwYXJlbnRGb3JtOiBDb250cm9sQ29udGFpbmVyKTtcclxuICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgc2hvd0F1dG9Db21wbGV0ZURyb3Bkb3duOiAoZXZlbnQ/OiBhbnkpID0+IHZvaWQ7XHJcbiAgYmx1ckhhbmRsZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgaGlkZUF1dG9Db21wbGV0ZURyb3Bkb3duOiAoZXZlbnQ/OiBhbnkpID0+IHZvaWQ7XHJcbiAgc3R5bGVBdXRvQ29tcGxldGVEcm9wZG93bjogKCkgPT4gdm9pZDtcclxuICBzZXRUb1N0cmluZ0Z1bmN0aW9uKGl0ZW06IGFueSk6IGFueTtcclxuICBzZWxlY3ROZXdWYWx1ZTogKGl0ZW06IGFueSkgPT4gdm9pZDtcclxuICBzZWxlY3RDdXN0b21WYWx1ZTogKHRleHQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBlbnRlck5ld1RleHQ6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xyXG4gIHByaXZhdGUga2V5ZG93bkV2ZW50SGFuZGxlcjtcclxuICBwcml2YXRlIGlucHV0RXZlbnRIYW5kbGVyO1xyXG4gIHByaXZhdGUgcmVuZGVyVmFsdWU7XHJcbn1cclxuIl19