import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { NguiAutoComplete } from './auto-complete.service';
import * as ɵngcc0 from '@angular/core';
export declare class NguiAutoCompleteComponent implements OnInit {
  autoComplete: NguiAutoComplete;
  /**
   * public input properties
   */
  autocomplete: boolean;
  listFormatter: (arg: any) => string;
  source: any;
  pathToData: string;
  minChars: number;
  placeholder: string;
  blankOptionText: string;
  noMatchFoundText: string;
  acceptUserInput: boolean;
  loadingText: string;
  loadingTemplate: any;
  maxNumList: number;
  showInputTag: boolean;
  showDropdownOnInit: boolean;
  tabToSelect: boolean;
  matchFormatted: boolean;
  autoSelectFirstItem: boolean;
  selectOnBlur: boolean;
  reFocusAfterSelect: boolean;
  headerItemTemplate: any;
  ignoreAccents: boolean;
  valueSelected: EventEmitter<any>;
  customSelected: EventEmitter<any>;
  textEntered: EventEmitter<any>;
  autoCompleteInput: ElementRef;
  autoCompleteContainer: ElementRef;
  dropdownVisible: boolean;
  isLoading: boolean;
  filteredList: any[];
  minCharsEntered: boolean;
  itemIndex: number;
  keyword: string;
  private el;
  private timer;
  private delay;
  private selectOnEnter;
  /**
   * constructor
   */
  constructor(elementRef: ElementRef, autoComplete: NguiAutoComplete);
  /**
   * user enters into input el, shows list to select, then select one
   */
  ngOnInit(): void;
  isSrcArr(): boolean;
  reloadListInDelay: (evt: any) => void;
  showDropdownList(event: any): void;
  hideDropdownList(): void;
  findItemFromSelectValue(selectText: string): any;
  reloadList(keyword: string): void;
  selectOne(data: any): void;
  enterText(data: any): void;
  blurHandler(evt: any): void;
  inputElKeyHandler: (evt: any) => void;
  scrollToView(index: any): void;
  trackByIndex(index: any, item: any): any;
  get emptyList(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NguiAutoCompleteComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NguiAutoCompleteComponent, "ngui-auto-complete", never, { "autocomplete": "autocomplete"; "minChars": "min-chars"; "acceptUserInput": "accept-user-input"; "loadingText": "loading-text"; "loadingTemplate": "loading-template"; "showInputTag": "show-input-tag"; "showDropdownOnInit": "show-dropdown-on-init"; "tabToSelect": "tab-to-select"; "matchFormatted": "match-formatted"; "autoSelectFirstItem": "auto-select-first-item"; "selectOnBlur": "select-on-blur"; "reFocusAfterSelect": "re-focus-after-select"; "headerItemTemplate": "header-item-template"; "ignoreAccents": "ignore-accents"; "listFormatter": "list-formatter"; "source": "source"; "pathToData": "path-to-data"; "placeholder": "placeholder"; "blankOptionText": "blank-option-text"; "noMatchFoundText": "no-match-found-text"; "maxNumList": "max-num-list"; }, { "valueSelected": "valueSelected"; "customSelected": "customSelected"; "textEntered": "textEntered"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYXV0by1jb21wbGV0ZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd1aUF1dG9Db21wbGV0ZSB9IGZyb20gJy4vYXV0by1jb21wbGV0ZS5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd1aUF1dG9Db21wbGV0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgYXV0b0NvbXBsZXRlOiBOZ3VpQXV0b0NvbXBsZXRlO1xyXG4gIC8qKlxyXG4gICAqIHB1YmxpYyBpbnB1dCBwcm9wZXJ0aWVzXHJcbiAgICovXHJcbiAgYXV0b2NvbXBsZXRlOiBib29sZWFuO1xyXG4gIGxpc3RGb3JtYXR0ZXI6IChhcmc6IGFueSkgPT4gc3RyaW5nO1xyXG4gIHNvdXJjZTogYW55O1xyXG4gIHBhdGhUb0RhdGE6IHN0cmluZztcclxuICBtaW5DaGFyczogbnVtYmVyO1xyXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgYmxhbmtPcHRpb25UZXh0OiBzdHJpbmc7XHJcbiAgbm9NYXRjaEZvdW5kVGV4dDogc3RyaW5nO1xyXG4gIGFjY2VwdFVzZXJJbnB1dDogYm9vbGVhbjtcclxuICBsb2FkaW5nVGV4dDogc3RyaW5nO1xyXG4gIGxvYWRpbmdUZW1wbGF0ZTogYW55O1xyXG4gIG1heE51bUxpc3Q6IG51bWJlcjtcclxuICBzaG93SW5wdXRUYWc6IGJvb2xlYW47XHJcbiAgc2hvd0Ryb3Bkb3duT25Jbml0OiBib29sZWFuO1xyXG4gIHRhYlRvU2VsZWN0OiBib29sZWFuO1xyXG4gIG1hdGNoRm9ybWF0dGVkOiBib29sZWFuO1xyXG4gIGF1dG9TZWxlY3RGaXJzdEl0ZW06IGJvb2xlYW47XHJcbiAgc2VsZWN0T25CbHVyOiBib29sZWFuO1xyXG4gIHJlRm9jdXNBZnRlclNlbGVjdDogYm9vbGVhbjtcclxuICBoZWFkZXJJdGVtVGVtcGxhdGU6IGFueTtcclxuICBpZ25vcmVBY2NlbnRzOiBib29sZWFuO1xyXG4gIHZhbHVlU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gIGN1c3RvbVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICB0ZXh0RW50ZXJlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgYXV0b0NvbXBsZXRlSW5wdXQ6IEVsZW1lbnRSZWY7XHJcbiAgYXV0b0NvbXBsZXRlQ29udGFpbmVyOiBFbGVtZW50UmVmO1xyXG4gIGRyb3Bkb3duVmlzaWJsZTogYm9vbGVhbjtcclxuICBpc0xvYWRpbmc6IGJvb2xlYW47XHJcbiAgZmlsdGVyZWRMaXN0OiBhbnlbXTtcclxuICBtaW5DaGFyc0VudGVyZWQ6IGJvb2xlYW47XHJcbiAgaXRlbUluZGV4OiBudW1iZXI7XHJcbiAga2V5d29yZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgZWw7XHJcbiAgcHJpdmF0ZSB0aW1lcjtcclxuICBwcml2YXRlIGRlbGF5O1xyXG4gIHByaXZhdGUgc2VsZWN0T25FbnRlcjtcclxuICAvKipcclxuICAgKiBjb25zdHJ1Y3RvclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGF1dG9Db21wbGV0ZTogTmd1aUF1dG9Db21wbGV0ZSk7XHJcbiAgLyoqXHJcbiAgICogdXNlciBlbnRlcnMgaW50byBpbnB1dCBlbCwgc2hvd3MgbGlzdCB0byBzZWxlY3QsIHRoZW4gc2VsZWN0IG9uZVxyXG4gICAqL1xyXG4gIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgaXNTcmNBcnIoKTogYm9vbGVhbjtcclxuICByZWxvYWRMaXN0SW5EZWxheTogKGV2dDogYW55KSA9PiB2b2lkO1xyXG4gIHNob3dEcm9wZG93bkxpc3QoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgaGlkZURyb3Bkb3duTGlzdCgpOiB2b2lkO1xyXG4gIGZpbmRJdGVtRnJvbVNlbGVjdFZhbHVlKHNlbGVjdFRleHQ6IHN0cmluZyk6IGFueTtcclxuICByZWxvYWRMaXN0KGtleXdvcmQ6IHN0cmluZyk6IHZvaWQ7XHJcbiAgc2VsZWN0T25lKGRhdGE6IGFueSk6IHZvaWQ7XHJcbiAgZW50ZXJUZXh0KGRhdGE6IGFueSk6IHZvaWQ7XHJcbiAgYmx1ckhhbmRsZXIoZXZ0OiBhbnkpOiB2b2lkO1xyXG4gIGlucHV0RWxLZXlIYW5kbGVyOiAoZXZ0OiBhbnkpID0+IHZvaWQ7XHJcbiAgc2Nyb2xsVG9WaWV3KGluZGV4OiBhbnkpOiB2b2lkO1xyXG4gIHRyYWNrQnlJbmRleChpbmRleDogYW55LCBpdGVtOiBhbnkpOiBhbnk7XHJcbiAgZ2V0IGVtcHR5TGlzdCgpOiBib29sZWFuO1xyXG59XHJcbiJdfQ==