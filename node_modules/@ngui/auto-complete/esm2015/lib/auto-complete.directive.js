import { __decorate, __param } from "tslib";
import { AfterViewInit, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Host, Input, OnChanges, OnDestroy, OnInit, Optional, Output, SimpleChanges, SkipSelf, ViewContainerRef } from '@angular/core';
import { AbstractControl, ControlContainer, FormControl, FormGroup, FormGroupName } from '@angular/forms';
import { NguiAutoCompleteComponent } from './auto-complete.component';
let NguiAutoCompleteDirective = class NguiAutoCompleteDirective {
    constructor(resolver, viewContainerRef, parentForm) {
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.parentForm = parentForm;
        this.autocomplete = false;
        this.acceptUserInput = true;
        this.loadingTemplate = null;
        this.loadingText = 'Loading';
        this.tabToSelect = true;
        this.selectOnBlur = false;
        this.matchFormatted = false;
        this.autoSelectFirstItem = false;
        this.openOnFocus = true;
        this.closeOnFocusOut = true;
        this.reFocusAfterSelect = true;
        this.headerItemTemplate = null;
        this.ignoreAccents = true;
        this.zIndex = '1';
        this.isRtl = false;
        this.ngModelChange = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.customSelected = new EventEmitter();
        // show auto-complete list below the current element
        this.showAutoCompleteDropdown = (event) => {
            if (this.dropdownJustHidden) {
                return;
            }
            this.hideAutoCompleteDropdown();
            this.scheduledBlurHandler = null;
            const factory = this.resolver.resolveComponentFactory(NguiAutoCompleteComponent);
            this.componentRef = this.viewContainerRef.createComponent(factory);
            const component = this.componentRef.instance;
            component.keyword = this.inputEl.value;
            component.showInputTag = false; // Do NOT display autocomplete input tag separately
            component.pathToData = this.pathToData;
            component.minChars = this.minChars;
            component.source = this.source;
            component.placeholder = this.autoCompletePlaceholder;
            component.acceptUserInput = this.acceptUserInput;
            component.maxNumList = parseInt(this.maxNumList, 10);
            component.loadingText = this.loadingText;
            component.loadingTemplate = this.loadingTemplate;
            component.listFormatter = this.listFormatter;
            component.blankOptionText = this.blankOptionText;
            component.noMatchFoundText = this.noMatchFoundText;
            component.tabToSelect = this.tabToSelect;
            component.selectOnBlur = this.selectOnBlur;
            component.matchFormatted = this.matchFormatted;
            component.autoSelectFirstItem = this.autoSelectFirstItem;
            component.headerItemTemplate = this.headerItemTemplate;
            component.ignoreAccents = this.ignoreAccents;
            component.valueSelected.subscribe(this.selectNewValue);
            component.textEntered.subscribe(this.enterNewText);
            component.customSelected.subscribe(this.selectCustomValue);
            this.acDropdownEl = this.componentRef.location.nativeElement;
            this.acDropdownEl.style.display = 'none';
            // if this element is not an input tag, move dropdown after input tag
            // so that it displays correctly
            // TODO: confirm with owners
            // with some reason, viewContainerRef.createComponent is creating element
            // to parent div which is created by us on ngOnInit, please try this with demo
            // if (this.el.tagName !== 'INPUT' && this.acDropdownEl) {
            this.inputEl.parentElement.insertBefore(this.acDropdownEl, this.inputEl.nextSibling);
            // }
            this.revertValue = typeof this.ngModel !== 'undefined' ? this.ngModel : this.inputEl.value;
            setTimeout(() => {
                component.reloadList(this.inputEl.value);
                this.styleAutoCompleteDropdown();
                component.dropdownVisible = true;
            });
        };
        this.hideAutoCompleteDropdown = (event) => {
            if (this.componentRef) {
                let currentItem;
                const hasRevertValue = (typeof this.revertValue !== 'undefined');
                if (this.inputEl && hasRevertValue && this.acceptUserInput === false) {
                    currentItem = this.componentRef.instance.findItemFromSelectValue(this.inputEl.value);
                }
                this.componentRef.destroy();
                this.componentRef = undefined;
                if (this.inputEl && hasRevertValue && this.acceptUserInput === false && currentItem === null) {
                    this.selectNewValue(this.revertValue);
                }
                else if (this.inputEl && this.acceptUserInput === true && typeof currentItem === 'undefined' && event && event.target.value) {
                    this.enterNewText(event.target.value);
                }
            }
            this.dropdownJustHidden = true;
            setTimeout(() => this.dropdownJustHidden = false, 100);
        };
        this.styleAutoCompleteDropdown = () => {
            if (this.componentRef) {
                const component = this.componentRef.instance;
                /* setting width/height auto complete */
                const thisElBCR = this.el.getBoundingClientRect();
                const thisInputElBCR = this.inputEl.getBoundingClientRect();
                const closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;
                const directionOfStyle = this.isRtl ? 'right' : 'left';
                this.acDropdownEl.style.width = thisInputElBCR.width + 'px';
                this.acDropdownEl.style.position = 'absolute';
                this.acDropdownEl.style.zIndex = this.zIndex;
                this.acDropdownEl.style[directionOfStyle] = '0';
                this.acDropdownEl.style.display = 'inline-block';
                if (closeToBottom) {
                    this.acDropdownEl.style.bottom = `${thisInputElBCR.height}px`;
                }
                else {
                    this.acDropdownEl.style.top = `${thisInputElBCR.height}px`;
                }
            }
        };
        this.selectNewValue = (item) => {
            // make displayable value
            if (item && typeof item === 'object') {
                item = this.setToStringFunction(item);
            }
            this.renderValue(item);
            // make return value
            let val = item;
            if (this.selectValueOf && item[this.selectValueOf]) {
                val = item[this.selectValueOf];
            }
            if ((this.parentForm && this.formControlName) || this.extFormControl) {
                if (!!val) {
                    this.formControl.patchValue(val);
                }
            }
            if (val !== this.ngModel) {
                this.ngModelChange.emit(val);
            }
            this.valueChanged.emit(val);
            this.hideAutoCompleteDropdown();
            setTimeout(() => {
                if (this.reFocusAfterSelect) {
                    this.inputEl.focus();
                }
                return this.inputEl;
            });
        };
        this.selectCustomValue = (text) => {
            this.customSelected.emit(text);
            this.hideAutoCompleteDropdown();
            setTimeout(() => {
                if (this.reFocusAfterSelect) {
                    this.inputEl.focus();
                }
                return this.inputEl;
            });
        };
        this.enterNewText = (value) => {
            this.renderValue(value);
            this.ngModelChange.emit(value);
            this.valueChanged.emit(value);
            this.hideAutoCompleteDropdown();
        };
        this.keydownEventHandler = (evt) => {
            if (this.componentRef) {
                const component = this.componentRef.instance;
                component.inputElKeyHandler(evt);
            }
        };
        this.inputEventHandler = (evt) => {
            if (this.componentRef) {
                const component = this.componentRef.instance;
                component.dropdownVisible = true;
                component.keyword = evt.target.value;
                component.reloadListInDelay(evt);
            }
            else {
                this.showAutoCompleteDropdown();
            }
        };
        this.el = this.viewContainerRef.element.nativeElement;
    }
    ngOnInit() {
        // Blur event is handled only after a click event.
        // This is to prevent handling of blur events resulting from interacting with a scrollbar
        // introduced by content overflow (Internet explorer issue).
        // See issue description here: http://stackoverflow.com/questions/2023779/clicking-on-a-divs-scroll-bar-fires-the-blur-event-in-ie
        this.documentClickListener = (e) => {
            if (this.scheduledBlurHandler) {
                this.scheduledBlurHandler();
                this.scheduledBlurHandler = null;
            }
        };
        document.addEventListener('click', this.documentClickListener);
        // wrap this element with <div class="ngui-auto-complete">
        this.wrapperEl = document.createElement('div');
        this.wrapperEl.className = 'ngui-auto-complete-wrapper';
        this.wrapperEl.style.position = 'relative';
        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);
        this.wrapperEl.appendChild(this.el);
        // Check if we were supplied with a [formControlName] and it is inside a [form]
        // else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag
        if (this.parentForm && this.formControlName) {
            if (this.parentForm['form']) {
                this.formControl = this.parentForm['form'].get(this.formControlName);
            }
            else if (this.parentForm instanceof FormGroupName) {
                this.formControl = this.parentForm.control.controls[this.formControlName];
            }
        }
        else if (this.extFormControl) {
            this.formControl = this.extFormControl;
        }
        // apply toString() method for the object
        if (!!this.ngModel) {
            this.selectNewValue(this.ngModel);
        }
        else if (!!this.formControl && this.formControl.value) {
            this.selectNewValue(this.formControl.value);
        }
    }
    ngAfterViewInit() {
        // if this element is not an input tag, move dropdown after input tag
        // so that it displays correctly
        this.inputEl = this.el.tagName === 'INPUT' ? this.el : this.el.querySelector('input');
        if (this.openOnFocus) {
            this.inputEl.addEventListener('focus', (e) => this.showAutoCompleteDropdown(e));
        }
        if (this.closeOnFocusOut) {
            this.inputEl.addEventListener('focusout', (e) => this.hideAutoCompleteDropdown(e));
        }
        if (!this.autocomplete) {
            this.inputEl.setAttribute('autocomplete', 'off');
        }
        this.inputEl.addEventListener('blur', (e) => {
            this.scheduledBlurHandler = () => {
                return this.blurHandler(e);
            };
        });
        this.inputEl.addEventListener('keydown', (e) => this.keydownEventHandler(e));
        this.inputEl.addEventListener('input', (e) => this.inputEventHandler(e));
    }
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.instance.valueSelected.unsubscribe();
            this.componentRef.instance.textEntered.unsubscribe();
        }
        if (this.documentClickListener) {
            document.removeEventListener('click', this.documentClickListener);
        }
    }
    ngOnChanges(changes) {
        if (changes['ngModel']) {
            this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);
            this.renderValue(this.ngModel);
        }
    }
    blurHandler(event) {
        if (this.componentRef) {
            const component = this.componentRef.instance;
            if (this.selectOnBlur) {
                component.selectOne(component.filteredList[component.itemIndex]);
            }
            if (this.closeOnFocusOut) {
                this.hideAutoCompleteDropdown(event);
            }
        }
    }
    setToStringFunction(item) {
        if (item && typeof item === 'object') {
            let displayVal;
            if (typeof this.valueFormatter === 'string') {
                const matches = this.valueFormatter.match(/[a-zA-Z0-9_\$]+/g);
                let formatted = this.valueFormatter;
                if (matches && typeof item !== 'string') {
                    matches.forEach((key) => {
                        formatted = formatted.replace(key, item[key]);
                    });
                }
                displayVal = formatted;
            }
            else if (typeof this.valueFormatter === 'function') {
                displayVal = this.valueFormatter(item);
            }
            else if (this.displayPropertyName) {
                displayVal = item[this.displayPropertyName];
            }
            else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\w+$/)) {
                displayVal = item[this.listFormatter];
            }
            else {
                displayVal = item.value;
            }
            item.toString = () => displayVal;
        }
        return item;
    }
    renderValue(item) {
        if (!!this.inputEl) {
            this.inputEl.value = '' + item;
        }
    }
};
NguiAutoCompleteDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] }
];
__decorate([
    Input('autocomplete')
], NguiAutoCompleteDirective.prototype, "autocomplete", void 0);
__decorate([
    Input('auto-complete-placeholder')
], NguiAutoCompleteDirective.prototype, "autoCompletePlaceholder", void 0);
__decorate([
    Input('source')
], NguiAutoCompleteDirective.prototype, "source", void 0);
__decorate([
    Input('path-to-data')
], NguiAutoCompleteDirective.prototype, "pathToData", void 0);
__decorate([
    Input('min-chars')
], NguiAutoCompleteDirective.prototype, "minChars", void 0);
__decorate([
    Input('display-property-name')
], NguiAutoCompleteDirective.prototype, "displayPropertyName", void 0);
__decorate([
    Input('accept-user-input')
], NguiAutoCompleteDirective.prototype, "acceptUserInput", void 0);
__decorate([
    Input('max-num-list')
], NguiAutoCompleteDirective.prototype, "maxNumList", void 0);
__decorate([
    Input('select-value-of')
], NguiAutoCompleteDirective.prototype, "selectValueOf", void 0);
__decorate([
    Input('loading-template')
], NguiAutoCompleteDirective.prototype, "loadingTemplate", void 0);
__decorate([
    Input('list-formatter')
], NguiAutoCompleteDirective.prototype, "listFormatter", void 0);
__decorate([
    Input('loading-text')
], NguiAutoCompleteDirective.prototype, "loadingText", void 0);
__decorate([
    Input('blank-option-text')
], NguiAutoCompleteDirective.prototype, "blankOptionText", void 0);
__decorate([
    Input('no-match-found-text')
], NguiAutoCompleteDirective.prototype, "noMatchFoundText", void 0);
__decorate([
    Input('value-formatter')
], NguiAutoCompleteDirective.prototype, "valueFormatter", void 0);
__decorate([
    Input('tab-to-select')
], NguiAutoCompleteDirective.prototype, "tabToSelect", void 0);
__decorate([
    Input('select-on-blur')
], NguiAutoCompleteDirective.prototype, "selectOnBlur", void 0);
__decorate([
    Input('match-formatted')
], NguiAutoCompleteDirective.prototype, "matchFormatted", void 0);
__decorate([
    Input('auto-select-first-item')
], NguiAutoCompleteDirective.prototype, "autoSelectFirstItem", void 0);
__decorate([
    Input('open-on-focus')
], NguiAutoCompleteDirective.prototype, "openOnFocus", void 0);
__decorate([
    Input('close-on-focusout')
], NguiAutoCompleteDirective.prototype, "closeOnFocusOut", void 0);
__decorate([
    Input('re-focus-after-select')
], NguiAutoCompleteDirective.prototype, "reFocusAfterSelect", void 0);
__decorate([
    Input('header-item-template')
], NguiAutoCompleteDirective.prototype, "headerItemTemplate", void 0);
__decorate([
    Input('ignore-accents')
], NguiAutoCompleteDirective.prototype, "ignoreAccents", void 0);
__decorate([
    Input()
], NguiAutoCompleteDirective.prototype, "ngModel", void 0);
__decorate([
    Input('formControlName')
], NguiAutoCompleteDirective.prototype, "formControlName", void 0);
__decorate([
    Input('formControl')
], NguiAutoCompleteDirective.prototype, "extFormControl", void 0);
__decorate([
    Input('z-index')
], NguiAutoCompleteDirective.prototype, "zIndex", void 0);
__decorate([
    Input('is-rtl')
], NguiAutoCompleteDirective.prototype, "isRtl", void 0);
__decorate([
    Output()
], NguiAutoCompleteDirective.prototype, "ngModelChange", void 0);
__decorate([
    Output()
], NguiAutoCompleteDirective.prototype, "valueChanged", void 0);
__decorate([
    Output()
], NguiAutoCompleteDirective.prototype, "customSelected", void 0);
NguiAutoCompleteDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[auto-complete], [ngui-auto-complete]'
    }),
    __param(2, Optional()), __param(2, Host()), __param(2, SkipSelf())
], NguiAutoCompleteDirective);
export { NguiAutoCompleteDirective };
//# sourceMappingURL=data:application/json;base64,