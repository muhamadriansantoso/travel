import { __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NguiAutoComplete } from './auto-complete.service';
let NguiAutoCompleteComponent = class NguiAutoCompleteComponent {
    /**
     * constructor
     */
    constructor(elementRef, autoComplete) {
        this.autoComplete = autoComplete;
        /**
         * public input properties
         */
        this.autocomplete = false;
        this.minChars = 0;
        this.acceptUserInput = true;
        this.loadingText = 'Loading';
        this.loadingTemplate = null;
        this.showInputTag = true;
        this.showDropdownOnInit = false;
        this.tabToSelect = true;
        this.matchFormatted = false;
        this.autoSelectFirstItem = false;
        this.selectOnBlur = false;
        this.reFocusAfterSelect = true;
        this.headerItemTemplate = null;
        this.ignoreAccents = true;
        this.valueSelected = new EventEmitter();
        this.customSelected = new EventEmitter();
        this.textEntered = new EventEmitter();
        this.dropdownVisible = false;
        this.isLoading = false;
        this.filteredList = [];
        this.minCharsEntered = false;
        this.itemIndex = null;
        this.timer = 0;
        this.delay = (() => {
            let timer = null;
            return (callback, ms) => {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();
        this.selectOnEnter = false;
        this.reloadListInDelay = (evt) => {
            const delayMs = this.isSrcArr() ? 10 : 500;
            const keyword = evt.target.value;
            // executing after user stopped typing
            this.delay(() => this.reloadList(keyword), delayMs);
        };
        this.inputElKeyHandler = (evt) => {
            const totalNumItem = this.filteredList.length;
            if (!this.selectOnEnter && this.autoSelectFirstItem && (0 !== totalNumItem)) {
                this.selectOnEnter = true;
            }
            switch (evt.keyCode) {
                case 27: // ESC, hide auto complete
                    this.selectOnEnter = false;
                    this.selectOne(undefined);
                    break;
                case 38: // UP, select the previous li el
                    if (0 === totalNumItem) {
                        return;
                    }
                    this.selectOnEnter = true;
                    this.itemIndex = (totalNumItem + this.itemIndex - 1) % totalNumItem;
                    this.scrollToView(this.itemIndex);
                    break;
                case 40: // DOWN, select the next li el or the first one
                    if (0 === totalNumItem) {
                        return;
                    }
                    this.selectOnEnter = true;
                    this.dropdownVisible = true;
                    let sum = this.itemIndex;
                    sum = (this.itemIndex === null) ? 0 : sum + 1;
                    this.itemIndex = (totalNumItem + sum) % totalNumItem;
                    this.scrollToView(this.itemIndex);
                    break;
                case 13: // ENTER, choose it!!
                    if (this.selectOnEnter) {
                        this.selectOne(this.filteredList[this.itemIndex]);
                    }
                    evt.preventDefault();
                    break;
                case 9: // TAB, choose if tab-to-select is enabled
                    if (this.tabToSelect) {
                        this.selectOne(this.filteredList[this.itemIndex]);
                    }
                    break;
            }
        };
        this.el = elementRef.nativeElement;
    }
    /**
     * user enters into input el, shows list to select, then select one
     */
    ngOnInit() {
        this.autoComplete.source = this.source;
        this.autoComplete.pathToData = this.pathToData;
        this.autoComplete.listFormatter = this.listFormatter;
        if (this.autoSelectFirstItem) {
            this.itemIndex = 0;
        }
        setTimeout(() => {
            if (this.autoCompleteInput && this.reFocusAfterSelect) {
                this.autoCompleteInput.nativeElement.focus();
            }
            if (this.showDropdownOnInit) {
                this.showDropdownList({ target: { value: '' } });
            }
        });
    }
    isSrcArr() {
        return Array.isArray(this.source);
    }
    showDropdownList(event) {
        this.dropdownVisible = true;
        this.reloadList(event.target.value);
    }
    hideDropdownList() {
        this.selectOnEnter = false;
        this.dropdownVisible = false;
    }
    findItemFromSelectValue(selectText) {
        const matchingItems = this.filteredList.filter((item) => ('' + item) === selectText);
        return matchingItems.length ? matchingItems[0] : null;
    }
    reloadList(keyword) {
        this.filteredList = [];
        if (keyword.length < (this.minChars || 0)) {
            this.minCharsEntered = false;
            return;
        }
        else {
            this.minCharsEntered = true;
        }
        if (this.isSrcArr()) { // local source
            this.isLoading = false;
            this.filteredList = this.autoComplete.filter(this.source, keyword, this.matchFormatted, this.ignoreAccents);
            if (this.maxNumList) {
                this.filteredList = this.filteredList.slice(0, this.maxNumList);
            }
        }
        else { // remote source
            this.isLoading = true;
            if (typeof this.source === 'function') {
                // custom function that returns observable
                this.source(keyword).subscribe((resp) => {
                    if (this.pathToData) {
                        const paths = this.pathToData.split('.');
                        paths.forEach((prop) => resp = resp[prop]);
                    }
                    this.filteredList = resp;
                    if (this.maxNumList) {
                        this.filteredList = this.filteredList.slice(0, this.maxNumList);
                    }
                }, (error) => null, () => this.isLoading = false // complete
                );
            }
            else {
                // remote source
                this.autoComplete.getRemoteData(keyword).subscribe((resp) => {
                    this.filteredList = resp ? resp : [];
                    if (this.maxNumList) {
                        this.filteredList = this.filteredList.slice(0, this.maxNumList);
                    }
                }, (error) => null, () => this.isLoading = false // complete
                );
            }
        }
    }
    selectOne(data) {
        if (!!data || data === '') {
            this.valueSelected.emit(data);
        }
        else {
            this.customSelected.emit(this.keyword);
        }
    }
    enterText(data) {
        this.textEntered.emit(data);
    }
    blurHandler(evt) {
        if (this.selectOnBlur) {
            this.selectOne(this.filteredList[this.itemIndex]);
        }
        this.hideDropdownList();
    }
    scrollToView(index) {
        const container = this.autoCompleteContainer.nativeElement;
        const ul = container.querySelector('ul');
        const li = ul.querySelector('li'); // just sample the first li to get height
        const liHeight = li.offsetHeight;
        const scrollTop = ul.scrollTop;
        const viewport = scrollTop + ul.offsetHeight;
        const scrollOffset = liHeight * index;
        if (scrollOffset < scrollTop || (scrollOffset + liHeight) > viewport) {
            ul.scrollTop = scrollOffset;
        }
    }
    trackByIndex(index, item) {
        return index;
    }
    get emptyList() {
        return !(this.isLoading ||
            (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||
            (this.filteredList.length));
    }
};
NguiAutoCompleteComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NguiAutoComplete }
];
__decorate([
    Input('autocomplete')
], NguiAutoCompleteComponent.prototype, "autocomplete", void 0);
__decorate([
    Input('list-formatter')
], NguiAutoCompleteComponent.prototype, "listFormatter", void 0);
__decorate([
    Input('source')
], NguiAutoCompleteComponent.prototype, "source", void 0);
__decorate([
    Input('path-to-data')
], NguiAutoCompleteComponent.prototype, "pathToData", void 0);
__decorate([
    Input('min-chars')
], NguiAutoCompleteComponent.prototype, "minChars", void 0);
__decorate([
    Input('placeholder')
], NguiAutoCompleteComponent.prototype, "placeholder", void 0);
__decorate([
    Input('blank-option-text')
], NguiAutoCompleteComponent.prototype, "blankOptionText", void 0);
__decorate([
    Input('no-match-found-text')
], NguiAutoCompleteComponent.prototype, "noMatchFoundText", void 0);
__decorate([
    Input('accept-user-input')
], NguiAutoCompleteComponent.prototype, "acceptUserInput", void 0);
__decorate([
    Input('loading-text')
], NguiAutoCompleteComponent.prototype, "loadingText", void 0);
__decorate([
    Input('loading-template')
], NguiAutoCompleteComponent.prototype, "loadingTemplate", void 0);
__decorate([
    Input('max-num-list')
], NguiAutoCompleteComponent.prototype, "maxNumList", void 0);
__decorate([
    Input('show-input-tag')
], NguiAutoCompleteComponent.prototype, "showInputTag", void 0);
__decorate([
    Input('show-dropdown-on-init')
], NguiAutoCompleteComponent.prototype, "showDropdownOnInit", void 0);
__decorate([
    Input('tab-to-select')
], NguiAutoCompleteComponent.prototype, "tabToSelect", void 0);
__decorate([
    Input('match-formatted')
], NguiAutoCompleteComponent.prototype, "matchFormatted", void 0);
__decorate([
    Input('auto-select-first-item')
], NguiAutoCompleteComponent.prototype, "autoSelectFirstItem", void 0);
__decorate([
    Input('select-on-blur')
], NguiAutoCompleteComponent.prototype, "selectOnBlur", void 0);
__decorate([
    Input('re-focus-after-select')
], NguiAutoCompleteComponent.prototype, "reFocusAfterSelect", void 0);
__decorate([
    Input('header-item-template')
], NguiAutoCompleteComponent.prototype, "headerItemTemplate", void 0);
__decorate([
    Input('ignore-accents')
], NguiAutoCompleteComponent.prototype, "ignoreAccents", void 0);
__decorate([
    Output()
], NguiAutoCompleteComponent.prototype, "valueSelected", void 0);
__decorate([
    Output()
], NguiAutoCompleteComponent.prototype, "customSelected", void 0);
__decorate([
    Output()
], NguiAutoCompleteComponent.prototype, "textEntered", void 0);
__decorate([
    ViewChild('autoCompleteInput')
], NguiAutoCompleteComponent.prototype, "autoCompleteInput", void 0);
__decorate([
    ViewChild('autoCompleteContainer')
], NguiAutoCompleteComponent.prototype, "autoCompleteContainer", void 0);
NguiAutoCompleteComponent = __decorate([
    Component({
        selector: 'ngui-auto-complete',
        template: "\n<div #autoCompleteContainer class=\"ngui-auto-complete\">\n" +
        "                        <!-- keyword input -->\n" +
        "                        <input *ngIf=\"showInputTag\"\n" +
        "                               #autoCompleteInput class=\"keyword\"\n" +
        "                               [attr.autocomplete]=\"autocomplete ? 'null' : 'off'\"\n" +
        "                               placeholder=\"{{placeholder}}\"\n" +
        "                               (focus)=\"showDropdownList($event)\"\n" +
        "                               (blur)=\"blurHandler($event)\"\n" +
        "                               (keydown)=\"inputElKeyHandler($event)\"\n" +
        "                               (input)=\"reloadListInDelay($event)\"\n" +
        "                               [(ngModel)]=\"keyword\"/>\n" +
        "\n" +
        "                        <!-- dropdown that user can select -->\n" +
        "                        <div class=\"resultWrapper\">\n" +
        "                          <div class=\"autoCompleteSubTitle\">Airport List</div>\n" +
        "                          <div *ngIf=\"dropdownVisible\" [class.empty]=\"emptyList\">\n" +
        "                            <div *ngIf=\"isLoading && loadingTemplate\" class=\"loading\"\n" +
        "                                [innerHTML]=\"loadingTemplate\">\n" +
        "                            </div>\n" +
        "                            <div *ngIf=\"isLoading && !loadingTemplate\" class=\"loading\">{{loadingText}}</div>\n" +
        "                            <div *ngIf=\"minCharsEntered && !isLoading && !filteredList.length\"\n" +
        "                                (mousedown)=\"selectOne('')\"\n" +
        "                                class=\"no-match-found\">{{noMatchFoundText || 'No Result Found'}}\n" +
        "                            </div>\n" +
        "                            <div *ngIf=\"headerItemTemplate && filteredList.length\" class=\"header-item\"\n" +
        "                                [innerHTML]=\"headerItemTemplate\">\n" +
        "                            </div>\n" +
        "                            <div *ngIf=\"blankOptionText && filteredList.length\"\n" +
        "                                (mousedown)=\"selectOne('')\"\n" +
        "                                class=\"blank-item\">{{blankOptionText}}\n" +
        "                            </div>\n" +
        "                            <div class=\"autoCompleteWrapper\"\n" +
        "                                *ngFor=\"let item of filteredList; let i=index; trackBy: trackByIndex\"\n" +
        "                                (mousedown)=\"selectOne(item)\"\n" +
        "                                [ngClass]=\"{selected: i === itemIndex}\"\n" +
        "                                [innerHtml]=\"autoComplete.getFormattedListItem(item)\">\n" +
        "                            </div>\n" +
        "                          </div>\n" +
        "                        </div>\n" +
        "                      </div>",
        encapsulation: ViewEncapsulation.None,
        styles: [`
    @keyframes slideDown {
      0% {
        transform: translateY(-10px);
      }
      100% {
        transform: translateY(0px);
      }
    }

    .ngui-auto-complete {
      background-color: transparent;
    }

    .ngui-auto-complete > input {
      outline: none;
      border: 0;
      padding: 2px;
      box-sizing: border-box;
      background-clip: content-box;
    }

    .ngui-auto-complete > ul {
      background-color: #fff;
      margin: 0;
      width: 100%;
      overflow-y: auto;
      list-style-type: none;
      padding: 0;
      border: 1px solid #ccc;
      box-sizing: border-box;
      animation: slideDown 0.1s;
    }

    .ngui-auto-complete > ul.empty {
      display: none;
    }

    .ngui-auto-complete > ul li {
      padding: 2px 5px;
      border-bottom: 1px solid #eee;
    }

    .ngui-auto-complete > ul li.selected {
      background-color: #ccc;
    }

    .ngui-auto-complete > ul li:last-child {
      border-bottom: none;
    }

    .ngui-auto-complete > ul li:not(.header-item):hover {
      background-color: #ccc;
    }`]
    })
], NguiAutoCompleteComponent);
export { NguiAutoCompleteComponent };
//# sourceMappingURL=data:application/json;base64,
