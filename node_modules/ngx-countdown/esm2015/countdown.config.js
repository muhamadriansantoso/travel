import * as tslib_1 from "tslib";
// tslint:disable: no-inferrable-types
import { Injectable, Inject, LOCALE_ID } from '@angular/core';
import { formatDate } from '@angular/common';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
let CountdownGlobalConfig = class CountdownGlobalConfig {
    constructor(locale) {
        this.locale = locale;
        this.demand = false;
        this.leftTime = 0;
        this.format = 'HH:mm:ss';
        this.timezone = '+0000';
        this.formatDate = ({ date, formatStr, timezone }) => {
            return formatDate(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');
        };
    }
};
CountdownGlobalConfig.ɵfac = function CountdownGlobalConfig_Factory(t) { return new (t || CountdownGlobalConfig)(ɵngcc0.ɵɵinject(LOCALE_ID)); };
CountdownGlobalConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CountdownGlobalConfig, factory: CountdownGlobalConfig.ɵfac, providedIn: 'root' });
CountdownGlobalConfig.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
CountdownGlobalConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CountdownGlobalConfig_Factory() { return new CountdownGlobalConfig(i0.ɵɵinject(i0.LOCALE_ID)); }, token: CountdownGlobalConfig, providedIn: "root" });
CountdownGlobalConfig = tslib_1.__decorate([ tslib_1.__param(0, Inject(LOCALE_ID)),
    tslib_1.__metadata("design:paramtypes", [String])
], CountdownGlobalConfig);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountdownGlobalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
export { CountdownGlobalConfig };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLmNvbmZpZy5qcyIsInNvdXJjZXMiOlsibmc6L25neC1jb3VudGRvd24vY291bnRkb3duLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQXNDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0M7O0FBR0EsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7QUFBRyxJQUNuQyxZQUF1QyxNQUFjO0FBQUksUUFBbEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBRXRELFdBQU0sR0FBYSxLQUFLLENBQUM7QUFDM0IsUUFDRSxhQUFRLEdBQVksQ0FBQyxDQUFDO0FBQ3hCLFFBQ0UsV0FBTSxHQUFZLFVBQVUsQ0FBQztBQUMvQixRQUNFLGFBQVEsR0FBWSxPQUFPLENBQUM7QUFDOUIsUUFDRSxlQUFVLEdBQXVCLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7QUFDckUsWUFBSSxPQUFPLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQztBQUNwRyxRQUFFLENBQUMsQ0FBQztBQUNKLElBYjBELENBQUM7QUFDM0QsQ0FZQzs7bUpBQUE7QUFDRDtBQUErQyx5Q0FkaEMsTUFBTSxTQUFDLFNBQVM7QUFBUTtBQUFHO0FBRDdCLHFCQUFxQiw0QkFEakMsVUFBVSxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLHZDQUMvQixDQUNXLG1CQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUFFO0FBRVAsR0FIZCxxQkFBcUIsQ0FjakM7Ozs7Ozs7a0NBQ0Q7QUFBQyxTQWZZLHFCQUFxQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6IG5vLWluZmVycmFibGUtdHlwZXNcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgTE9DQUxFX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvdW50ZG93bkZvcm1hdEZuLCBDb3VudGRvd25Db25maWcgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIENvdW50ZG93bkdsb2JhbENvbmZpZyBpbXBsZW1lbnRzIENvdW50ZG93bkNvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZTogc3RyaW5nKSB7fVxuXG4gIGRlbWFuZD86IGJvb2xlYW4gPSBmYWxzZTtcblxuICBsZWZ0VGltZT86IG51bWJlciA9IDA7XG5cbiAgZm9ybWF0Pzogc3RyaW5nID0gJ0hIOm1tOnNzJztcblxuICB0aW1lem9uZT86IHN0cmluZyA9ICcrMDAwMCc7XG5cbiAgZm9ybWF0RGF0ZT86IENvdW50ZG93bkZvcm1hdEZuID0gKHsgZGF0ZSwgZm9ybWF0U3RyLCB0aW1lem9uZSB9KSA9PiB7XG4gICAgcmV0dXJuIGZvcm1hdERhdGUobmV3IERhdGUoZGF0ZSksIGZvcm1hdFN0ciwgdGhpcy5sb2NhbGUsIHRpbWV6b25lIHx8IHRoaXMudGltZXpvbmUgfHwgJyswMDAwJyk7XG4gIH07XG59XG4iXX0=