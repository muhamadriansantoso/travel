import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let CountdownTimer = class CountdownTimer {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    start() {
        if (this.ing === true)
            return;
        this.ing = true;
        this.nextTime = +new Date();
        this.ngZone.runOutsideAngular(() => {
            this.process();
        });
    }
    process() {
        while (this.commands.length) {
            this.commands.shift()();
        }
        let diff = +new Date() - this.nextTime;
        const count = 1 + Math.floor(diff / 100);
        diff = 100 - (diff % 100);
        this.nextTime += 100 * count;
        for (let i = 0, len = this.fns.length; i < len; i += 2) {
            let frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                const step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = (frequency % 20) + 1;
            }
        }
        if (!this.ing)
            return;
        setTimeout(() => this.process(), diff);
    }
    add(fn, frequency) {
        this.commands.push(() => {
            this.fns.push(fn);
            this.fns.push(frequency === 1000 ? 1 : 0);
            this.ing = true;
        });
        return this;
    }
    remove(fn) {
        this.commands.push(() => {
            const i = this.fns.indexOf(fn);
            if (i !== -1) {
                this.fns.splice(i, 2);
            }
            this.ing = this.fns.length > 0;
        });
        return this;
    }
};
CountdownTimer.ɵfac = function CountdownTimer_Factory(t) { return new (t || CountdownTimer)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
CountdownTimer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CountdownTimer, factory: CountdownTimer.ɵfac });
CountdownTimer.ctorParameters = () => [
    { type: NgZone }
];
CountdownTimer = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [NgZone])
], CountdownTimer);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountdownTimer, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
export { CountdownTimer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLnRpbWVyLmpzIiwic291cmNlcyI6WyJuZzovbmd4LWNvdW50ZG93bi9jb3VudGRvd24udGltZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUduRCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0FBQzNCLElBS0UsWUFBb0IsTUFBYztBQUFJLFFBQWxCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUwzQixRQUFHLEdBQXVELEVBQUUsQ0FBQztBQUN2RSxRQUFVLGFBQVEsR0FBc0IsRUFBRSxDQUFDO0FBQzNDLFFBQ1UsUUFBRyxHQUFHLEtBQUssQ0FBQztBQUN0QixJQUN1QyxDQUFDO0FBQ3hDLElBQ0UsS0FBSztBQUNQLFFBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUk7QUFBRSxZQUFBLE9BQU87QUFDbEMsUUFDSSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztBQUNwQixRQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ2hDLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7QUFDdkMsWUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckIsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ1UsT0FBTztBQUNqQixRQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDakMsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7QUFDOUIsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDM0MsUUFBSSxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDN0MsUUFDSSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLFFBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFFBQ0ksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1RCxZQUFNLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBVyxDQUFDO0FBQ2hELFlBQ00sUUFBUTtBQUNkLFlBQU0sSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQzNCLGdCQUFTLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELGdCQUFRLFNBQVM7QUFDakIsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsZUFBZTtBQUN2QixnQkFBUSxTQUFTLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDbkMsZ0JBQ1EsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDaEQsZ0JBQVEsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLG9CQUFXLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pELGlCQUFTO0FBQ1QsZ0JBQ1EsVUFBVTtBQUNsQixnQkFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0MsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztBQUFFLFlBQUEsT0FBTztBQUMxQixRQUNJLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSxHQUFHLENBQUMsRUFBYyxFQUFFLFNBQWlCO0FBQUksUUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQzVCLFlBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsWUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hELFlBQU0sSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDdEIsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsRUFBYztBQUFJLFFBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUM1QixZQUFNLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLFlBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDcEIsZ0JBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLGFBQU87QUFDUCxZQUFNLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNILENBQUM7OzBHQUFBO0FBQ0Q7QUFBd0MsWUFwRVYsTUFBTTtBQUFHO0FBTjFCLGNBQWMsNEJBRDFCLFVBQVUsRUFBRSxqQkFDVCwwQ0FNMEIsTUFBTTtBQUFHLEdBTjFCLGNBQWMsQ0F5RTFCOzs7dUVBQ0Q7QUFBQyxTQTFFWSxjQUFjO0FBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb3VudGRvd25UaW1lciB7XG4gIHByaXZhdGUgZm5zOiBBcnJheTwoKGNvdW50OiBudW1iZXIpID0+IG51bWJlciB8IHZvaWQpIHwgbnVtYmVyPiA9IFtdO1xuICBwcml2YXRlIGNvbW1hbmRzOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuICBwcml2YXRlIG5leHRUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgaW5nID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge31cblxuICBzdGFydCgpIHtcbiAgICBpZiAodGhpcy5pbmcgPT09IHRydWUpIHJldHVybjtcblxuICAgIHRoaXMuaW5nID0gdHJ1ZTtcbiAgICB0aGlzLm5leHRUaW1lID0gK25ldyBEYXRlKCk7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3MoKSB7XG4gICAgd2hpbGUgKHRoaXMuY29tbWFuZHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmNvbW1hbmRzLnNoaWZ0KCkoKTtcbiAgICB9XG4gICAgbGV0IGRpZmYgPSArbmV3IERhdGUoKSAtIHRoaXMubmV4dFRpbWU7XG4gICAgY29uc3QgY291bnQgPSAxICsgTWF0aC5mbG9vcihkaWZmIC8gMTAwKTtcblxuICAgIGRpZmYgPSAxMDAgLSAoZGlmZiAlIDEwMCk7XG4gICAgdGhpcy5uZXh0VGltZSArPSAxMDAgKiBjb3VudDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmZucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgbGV0IGZyZXF1ZW5jeSA9IHRoaXMuZm5zW2kgKyAxXSBhcyBudW1iZXI7XG5cbiAgICAgIC8vIDEwMC9zXG4gICAgICBpZiAoMCA9PT0gZnJlcXVlbmN5KSB7XG4gICAgICAgICh0aGlzLmZuc1tpXSBhcyAoY291bnQ6IG51bWJlcikgPT4gdm9pZCkoY291bnQpO1xuICAgICAgICAvLyAxMDAwL3NcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOWFiOaKiuacq+S9jeiHszDvvIzlho3mr4/mrKHliqAyXG4gICAgICAgIGZyZXF1ZW5jeSArPSAyICogY291bnQgLSAxO1xuXG4gICAgICAgIGNvbnN0IHN0ZXAgPSBNYXRoLmZsb29yKGZyZXF1ZW5jeSAvIDIwKTtcbiAgICAgICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICAgICAgKHRoaXMuZm5zW2ldIGFzIChjb3VudDogbnVtYmVyKSA9PiB2b2lkKShzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOaKiuacq+S9jei/mOWOn+aIkDFcbiAgICAgICAgdGhpcy5mbnNbaSArIDFdID0gKGZyZXF1ZW5jeSAlIDIwKSArIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmluZykgcmV0dXJuO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnByb2Nlc3MoKSwgZGlmZik7XG4gIH1cblxuICBhZGQoZm46ICgpID0+IHZvaWQsIGZyZXF1ZW5jeTogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKCgpID0+IHtcbiAgICAgIHRoaXMuZm5zLnB1c2goZm4pO1xuICAgICAgdGhpcy5mbnMucHVzaChmcmVxdWVuY3kgPT09IDEwMDAgPyAxIDogMCk7XG4gICAgICB0aGlzLmluZyA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmUoZm46ICgpID0+IHZvaWQpOiB0aGlzIHtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goKCkgPT4ge1xuICAgICAgY29uc3QgaSA9IHRoaXMuZm5zLmluZGV4T2YoZm4pO1xuICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgIHRoaXMuZm5zLnNwbGljZShpLCAyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5nID0gdGhpcy5mbnMubGVuZ3RoID4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19