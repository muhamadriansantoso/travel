import { OnChanges, SimpleChanges, OnDestroy, EventEmitter, OnInit, SimpleChange, ChangeDetectorRef, TemplateRef, NgZone } from '@angular/core';
import { CountdownConfig, CountdownEvent, CountdownItem } from './interfaces';
import { CountdownTimer } from './countdown.timer';
import { CountdownGlobalConfig } from './countdown.config';
import * as ɵngcc0 from '@angular/core';
export declare class CountdownComponent implements OnInit, OnChanges, OnDestroy {
    private locale;
    private timer;
    private defCog;
    private cdr;
    private ngZone;
    private frequency;
    private _notify;
    private _left;
    private status;
    private isDestroy;
    i: CountdownItem;
    config: CountdownConfig;
    render: TemplateRef<void>;
    readonly event: EventEmitter<CountdownEvent>;
    constructor(locale: string, timer: CountdownTimer, defCog: CountdownGlobalConfig, cdr: ChangeDetectorRef, ngZone: NgZone);
    readonly left: number;
    /**
     * Start countdown, you must manually call when `demand: false`
     */
    begin(): void;
    /**
     * Restart countdown
     */
    restart(): void;
    /**
     * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover
     */
    stop(): void;
    /**
     * Pause countdown, you can use `resume` to recover again
     */
    pause(): void;
    /**
     * Resume countdown
     */
    resume(): void;
    private callEvent;
    private init;
    private destroy;
    /**
     * 更新时钟
     */
    private reflow;
    /**
     * 获取倒计时剩余帧数
     */
    private getLeft;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: {
        [P in keyof this]?: SimpleChange;
    } & SimpleChanges): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CountdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CountdownComponent, "countdown", never, { "config": "config"; "render": "render"; }, { "event": "event"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjb3VudGRvd24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIFNpbXBsZUNoYW5nZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFRlbXBsYXRlUmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvdW50ZG93bkNvbmZpZywgQ291bnRkb3duRXZlbnQsIENvdW50ZG93bkl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ291bnRkb3duVGltZXIgfSBmcm9tICcuL2NvdW50ZG93bi50aW1lcic7XG5pbXBvcnQgeyBDb3VudGRvd25HbG9iYWxDb25maWcgfSBmcm9tICcuL2NvdW50ZG93bi5jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ291bnRkb3duQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBsb2NhbGU7XG4gICAgcHJpdmF0ZSB0aW1lcjtcbiAgICBwcml2YXRlIGRlZkNvZztcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIGZyZXF1ZW5jeTtcbiAgICBwcml2YXRlIF9ub3RpZnk7XG4gICAgcHJpdmF0ZSBfbGVmdDtcbiAgICBwcml2YXRlIHN0YXR1cztcbiAgICBwcml2YXRlIGlzRGVzdHJveTtcbiAgICBpOiBDb3VudGRvd25JdGVtO1xuICAgIGNvbmZpZzogQ291bnRkb3duQ29uZmlnO1xuICAgIHJlbmRlcjogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgcmVhZG9ubHkgZXZlbnQ6IEV2ZW50RW1pdHRlcjxDb3VudGRvd25FdmVudD47XG4gICAgY29uc3RydWN0b3IobG9jYWxlOiBzdHJpbmcsIHRpbWVyOiBDb3VudGRvd25UaW1lciwgZGVmQ29nOiBDb3VudGRvd25HbG9iYWxDb25maWcsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIG5nWm9uZTogTmdab25lKTtcbiAgICByZWFkb25seSBsZWZ0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3RhcnQgY291bnRkb3duLCB5b3UgbXVzdCBtYW51YWxseSBjYWxsIHdoZW4gYGRlbWFuZDogZmFsc2VgXG4gICAgICovXG4gICAgYmVnaW4oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXN0YXJ0IGNvdW50ZG93blxuICAgICAqL1xuICAgIHJlc3RhcnQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTdG9wIGNvdW50ZG93biwgbXVzdCBjYWxsIGByZXN0YXJ0YCB3aGVuIHN0b3BwZWQsIGl0J3MgZGlmZmVyZW50IGZyb20gcGF1c2UsIHVuYWJsZSB0byByZWNvdmVyXG4gICAgICovXG4gICAgc3RvcCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFBhdXNlIGNvdW50ZG93biwgeW91IGNhbiB1c2UgYHJlc3VtZWAgdG8gcmVjb3ZlciBhZ2FpblxuICAgICAqL1xuICAgIHBhdXNlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVzdW1lIGNvdW50ZG93blxuICAgICAqL1xuICAgIHJlc3VtZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgY2FsbEV2ZW50O1xuICAgIHByaXZhdGUgaW5pdDtcbiAgICBwcml2YXRlIGRlc3Ryb3k7XG4gICAgLyoqXG4gICAgICog5pu05paw5pe26ZKfXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWZsb3c7XG4gICAgLyoqXG4gICAgICog6I635Y+W5YCS6K6h5pe25Ymp5L2Z5bin5pWwXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRMZWZ0O1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtQIGluIGtleW9mIHRoaXNdPzogU2ltcGxlQ2hhbmdlO1xuICAgIH0gJiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbn1cbiJdfQ==