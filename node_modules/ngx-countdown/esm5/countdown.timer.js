import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var CountdownTimer = /** @class */ (function () {
    function CountdownTimer(ngZone) {
        this.ngZone = ngZone;
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    CountdownTimer.prototype.start = function () {
        var _this = this;
        if (this.ing === true)
            return;
        this.ing = true;
        this.nextTime = +new Date();
        this.ngZone.runOutsideAngular(function () {
            _this.process();
        });
    };
    CountdownTimer.prototype.process = function () {
        var _this = this;
        while (this.commands.length) {
            this.commands.shift()();
        }
        var diff = +new Date() - this.nextTime;
        var count = 1 + Math.floor(diff / 100);
        diff = 100 - (diff % 100);
        this.nextTime += 100 * count;
        for (var i = 0, len = this.fns.length; i < len; i += 2) {
            var frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                var step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = (frequency % 20) + 1;
            }
        }
        if (!this.ing)
            return;
        setTimeout(function () { return _this.process(); }, diff);
    };
    CountdownTimer.prototype.add = function (fn, frequency) {
        var _this = this;
        this.commands.push(function () {
            _this.fns.push(fn);
            _this.fns.push(frequency === 1000 ? 1 : 0);
            _this.ing = true;
        });
        return this;
    };
    CountdownTimer.prototype.remove = function (fn) {
        var _this = this;
        this.commands.push(function () {
            var i = _this.fns.indexOf(fn);
            if (i !== -1) {
                _this.fns.splice(i, 2);
            }
            _this.ing = _this.fns.length > 0;
        });
        return this;
    };
    CountdownTimer.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    CountdownTimer = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [NgZone])
    ], CountdownTimer);
CountdownTimer.ɵfac = function CountdownTimer_Factory(t) { return new (t || CountdownTimer)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
CountdownTimer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CountdownTimer, factory: function (t) { return CountdownTimer.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountdownTimer, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
    return CountdownTimer;
}());
export { CountdownTimer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLnRpbWVyLmpzIiwic291cmNlcyI6WyJuZzovbmd4LWNvdW50ZG93bi9jb3VudGRvd24udGltZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUduRDtBQUNvQixJQUtsQix3QkFBb0IsTUFBYztBQUFJLFFBQWxCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUwzQixRQUFHLEdBQXVELEVBQUUsQ0FBQztBQUN2RSxRQUFVLGFBQVEsR0FBc0IsRUFBRSxDQUFDO0FBQzNDLFFBQ1UsUUFBRyxHQUFHLEtBQUssQ0FBQztBQUN0QixJQUN1QyxDQUFDO0FBQ3hDLElBQ0UsOEJBQUssR0FBTDtBQUNFLFFBREYsaUJBUUM7QUFDSCxRQVJJLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJO0FBQUUsWUFBQSxPQUFPO0FBQ2xDLFFBQ0ksSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDcEIsUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNoQyxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFDNUIsWUFBQSxLQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckIsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUVILElBQVUsZ0NBQU8sR0FBZjtBQUFjLFFBQWQsaUJBa0NDO0FBQ0gsUUFsQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUNqQyxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztBQUM5QixTQUFLO0FBQ0wsUUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMzQyxRQUFJLElBQU0sS0FBSyxHQUFHLENBQUMsR0FB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Q0FBQztBQUNoQixJQUFFLENBQUM7QUFDRjtBQUN5RCxnQkFwRTVCLE1BQU07QUFBRztBQUVoQyxJQVJNLGNBQWMsZ0NBRDFCLFVBQVUsRUFBRSxyQkFDTCwwQ0FNc0IsTUFBTTtBQUFHLE9BTjFCLGNBQWMsQ0F5RTFCOzs7Ozt1RUFDRDtBQUFDLElBREQscUJBQUM7QUFDQSxDQURBLEFBekVELElBeUVDO0FBQ0QsU0ExRWEsY0FBYztBQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ291bnRkb3duVGltZXIge1xuICBwcml2YXRlIGZuczogQXJyYXk8KChjb3VudDogbnVtYmVyKSA9PiBudW1iZXIgfCB2b2lkKSB8IG51bWJlcj4gPSBbXTtcbiAgcHJpdmF0ZSBjb21tYW5kczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgcHJpdmF0ZSBuZXh0VGltZTogbnVtYmVyO1xuICBwcml2YXRlIGluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuaW5nID09PSB0cnVlKSByZXR1cm47XG5cbiAgICB0aGlzLmluZyA9IHRydWU7XG4gICAgdGhpcy5uZXh0VGltZSA9ICtuZXcgRGF0ZSgpO1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMucHJvY2VzcygpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzKCkge1xuICAgIHdoaWxlICh0aGlzLmNvbW1hbmRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jb21tYW5kcy5zaGlmdCgpKCk7XG4gICAgfVxuICAgIGxldCBkaWZmID0gK25ldyBEYXRlKCkgLSB0aGlzLm5leHRUaW1lO1xuICAgIGNvbnN0IGNvdW50ID0gMSArIE1hdGguZmxvb3IoZGlmZiAvIDEwMCk7XG5cbiAgICBkaWZmID0gMTAwIC0gKGRpZmYgJSAxMDApO1xuICAgIHRoaXMubmV4dFRpbWUgKz0gMTAwICogY291bnQ7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5mbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICAgIGxldCBmcmVxdWVuY3kgPSB0aGlzLmZuc1tpICsgMV0gYXMgbnVtYmVyO1xuXG4gICAgICAvLyAxMDAvc1xuICAgICAgaWYgKDAgPT09IGZyZXF1ZW5jeSkge1xuICAgICAgICAodGhpcy5mbnNbaV0gYXMgKGNvdW50OiBudW1iZXIpID0+IHZvaWQpKGNvdW50KTtcbiAgICAgICAgLy8gMTAwMC9zXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDlhYjmiormnKvkvY3oh7Mw77yM5YaN5q+P5qyh5YqgMlxuICAgICAgICBmcmVxdWVuY3kgKz0gMiAqIGNvdW50IC0gMTtcblxuICAgICAgICBjb25zdCBzdGVwID0gTWF0aC5mbG9vcihmcmVxdWVuY3kgLyAyMCk7XG4gICAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgICh0aGlzLmZuc1tpXSBhcyAoY291bnQ6IG51bWJlcikgPT4gdm9pZCkoc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmiormnKvkvY3ov5jljp/miJAxXG4gICAgICAgIHRoaXMuZm5zW2kgKyAxXSA9IChmcmVxdWVuY3kgJSAyMCkgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5pbmcpIHJldHVybjtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wcm9jZXNzKCksIGRpZmYpO1xuICB9XG5cbiAgYWRkKGZuOiAoKSA9PiB2b2lkLCBmcmVxdWVuY3k6IG51bWJlcik6IHRoaXMge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCgoKSA9PiB7XG4gICAgICB0aGlzLmZucy5wdXNoKGZuKTtcbiAgICAgIHRoaXMuZm5zLnB1c2goZnJlcXVlbmN5ID09PSAxMDAwID8gMSA6IDApO1xuICAgICAgdGhpcy5pbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlKGZuOiAoKSA9PiB2b2lkKTogdGhpcyB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKCgpID0+IHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLmZucy5pbmRleE9mKGZuKTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICB0aGlzLmZucy5zcGxpY2UoaSwgMik7XG4gICAgICB9XG4gICAgICB0aGlzLmluZyA9IHRoaXMuZm5zLmxlbmd0aCA+IDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==