import * as tslib_1 from "tslib";
import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, OnInit, SimpleChange, ChangeDetectionStrategy, ViewEncapsulation, Inject, LOCALE_ID, ChangeDetectorRef, TemplateRef, NgZone, } from '@angular/core';
import { CountdownStatus } from './interfaces';
import { CountdownTimer } from './countdown.timer';
import { CountdownGlobalConfig } from './countdown.config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function CountdownComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "span", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1152 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1152.i.text, ɵngcc0.ɵɵsanitizeHtml);
} }
function CountdownComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c0 = function (a0) { return { $implicit: a0 }; };
var CountdownComponent = /** @class */ (function () {
    function CountdownComponent(locale, timer, defCog, cdr, ngZone) {
        this.locale = locale;
        this.timer = timer;
        this.defCog = defCog;
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.frequency = 1000;
        this._notify = {};
        this._left = 0;
        this.status = CountdownStatus.ing;
        this.isDestroy = false;
        this.i = {};
        this.event = new EventEmitter();
    }
    Object.defineProperty(CountdownComponent.prototype, "left", {
        get: function () {
            return this._left;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Start countdown, you must manually call when `demand: false`
     */
    CountdownComponent.prototype.begin = function () {
        this.status = CountdownStatus.ing;
        this.callEvent('start');
    };
    /**
     * Restart countdown
     */
    CountdownComponent.prototype.restart = function () {
        if (this.status !== CountdownStatus.stop) {
            this.destroy();
        }
        this.init();
        this.callEvent('restart');
    };
    /**
     * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover
     */
    CountdownComponent.prototype.stop = function () {
        if (this.status === CountdownStatus.stop) {
            return;
        }
        this.status = CountdownStatus.stop;
        this.destroy();
        this.callEvent('stop');
    };
    /**
     * Pause countdown, you can use `resume` to recover again
     */
    CountdownComponent.prototype.pause = function () {
        if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause)
            return;
        this.status = CountdownStatus.pause;
        this.callEvent('pause');
    };
    /**
     * Resume countdown
     */
    CountdownComponent.prototype.resume = function () {
        if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause)
            return;
        this.status = CountdownStatus.ing;
        this.callEvent('resume');
    };
    CountdownComponent.prototype.callEvent = function (action) {
        this.event.emit({ action: action, left: this._left, status: this.status, text: this.i.text });
    };
    CountdownComponent.prototype.init = function () {
        var _this = this;
        var _a = this, locale = _a.locale, defCog = _a.defCog;
        var config = (this.config = tslib_1.__assign({}, new CountdownGlobalConfig(locale), defCog, this.config));
        // tslint:disable-next-line: no-bitwise
        var frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);
        this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;
        this.getLeft();
        // bind reflow to me
        var _reflow = this.reflow;
        this.reflow = function (count, force) {
            if (count === void 0) { count = 0; }
            if (force === void 0) { force = false; }
            return _reflow.apply(_this, [count, force]);
        };
        if (Array.isArray(config.notify)) {
            config.notify.forEach(function (time) {
                if (time < 1)
                    throw new Error("The notify config must be a positive integer.");
                time = time * 1000;
                time = time - (time % frq);
                _this._notify[time] = true;
            });
        }
        this.timer.add(this.reflow, frq).start();
        this.reflow(0, true);
    };
    CountdownComponent.prototype.destroy = function () {
        this.timer.remove(this.reflow);
        return this;
    };
    /**
     * 更新时钟
     */
    CountdownComponent.prototype.reflow = function (count, force) {
        var _this = this;
        if (count === void 0) { count = 0; }
        if (force === void 0) { force = false; }
        if (this.isDestroy)
            return;
        var _a = this, status = _a.status, config = _a.config, _notify = _a._notify;
        if (!force && status !== CountdownStatus.ing)
            return;
        var value = (this._left = this._left - this.frequency * count);
        this.i = {
            value: value,
            text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),
        };
        if (typeof config.prettyText === 'function') {
            this.i.text = config.prettyText(this.i.text);
        }
        this.cdr.detectChanges();
        if (config.notify === 0 || _notify[value]) {
            this.ngZone.run(function () {
                _this.callEvent('notify');
            });
        }
        if (value < 1) {
            this.ngZone.run(function () {
                _this.status = CountdownStatus.done;
                _this.callEvent('done');
                _this.destroy();
            });
        }
    };
    /**
     * 获取倒计时剩余帧数
     */
    CountdownComponent.prototype.getLeft = function () {
        var _a = this, config = _a.config, frequency = _a.frequency;
        var left = config.leftTime * 1000;
        var end = config.stopTime;
        if (!left && end) {
            left = end - new Date().getTime();
        }
        this._left = left - (left % frequency);
    };
    CountdownComponent.prototype.ngOnInit = function () {
        this.init();
        if (!this.config.demand) {
            this.begin();
        }
    };
    CountdownComponent.prototype.ngOnDestroy = function () {
        this.isDestroy = true;
        this.destroy();
    };
    CountdownComponent.prototype.ngOnChanges = function (changes) {
        if (!changes.config.firstChange) {
            this.restart();
        }
    };
    CountdownComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: CountdownTimer },
        { type: CountdownGlobalConfig },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CountdownComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], CountdownComponent.prototype, "render", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], CountdownComponent.prototype, "event", void 0);
    CountdownComponent = tslib_1.__decorate([ tslib_1.__param(0, Inject(LOCALE_ID)),
        tslib_1.__metadata("design:paramtypes", [String, CountdownTimer,
            CountdownGlobalConfig,
            ChangeDetectorRef,
            NgZone])
    ], CountdownComponent);
CountdownComponent.ɵfac = function CountdownComponent_Factory(t) { return new (t || CountdownComponent)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID), ɵngcc0.ɵɵdirectiveInject(CountdownTimer), ɵngcc0.ɵɵdirectiveInject(CountdownGlobalConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
CountdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountdownComponent, selectors: [["countdown"]], hostVars: 2, hostBindings: function CountdownComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("count-down", true);
    } }, inputs: { config: "config", render: "render" }, outputs: { event: "event" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 5, consts: [[4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "innerHTML"]], template: function CountdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CountdownComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, CountdownComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.render);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.render)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.i));
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountdownComponent, [{
        type: Component,
        args: [{
                selector: 'countdown',
                template: "\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  ",
                host: { '[class.count-down]': 'true' },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: CountdownTimer }, { type: CountdownGlobalConfig }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, { event: [{
            type: Output
        }], config: [{
            type: Input
        }], render: [{
            type: Input
        }] }); })();
    return CountdownComponent;
}());
export { CountdownComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,