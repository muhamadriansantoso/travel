{"version":3,"file":"ngx-countdown.js","sources":["ng:/ngx-countdown/interfaces.ts","ng:/ngx-countdown/countdown.timer.ts","ng:/ngx-countdown/countdown.config.ts","ng:/ngx-countdown/countdown.component.ts","ng:/ngx-countdown/countdown.module.ts","ng:/ngx-countdown/ngx-countdown.ts"],"names":["tslib_1.__param","tslib_1.__decorate"],"mappings":"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","sourcesContent":["export type CountdownFormatFn = (opt: CountdownFormatFnOption) => string;\n\nexport interface CountdownFormatFnOption {\n  date: number;\n  formatStr: string;\n  timezone?: string;\n}\n\nexport enum CountdownStatus {\n  ing,\n  pause,\n  stop,\n  done,\n}\n\nexport interface CountdownConfig {\n  /**\n   * Start the counter on demand, must call `begin()` to starting, Default: `false`\n   */\n  demand?: boolean;\n\n  /**\n   * Calculate the remaining time based on the server, e.g: `10`,`5.5`, (Unit: seconds)\n   */\n  leftTime?: number;\n\n  /**\n   * Refers to counting down from local time to end time (Unit: Milliseconds second UNIX timestamp)\n   */\n  stopTime?: number;\n\n  /**\n   * Formats a date value, pls refer to [Accepted patterns](https://angular.io/api/common/DatePipe#usage-notes), Default: `HH:mm:ss`\n   */\n  format?: string;\n\n  /**\n   * Beautify text, generally used to convert formatted time text into HTML\n   */\n  prettyText?: (text: string) => string;\n\n  /**\n   * Should be trigger type `notify` event on the x second. When values is `0` will be trigger every time.\n   */\n  notify?: number[] | number;\n\n  /**\n   * Default based on the implementation of `formatDate` in `@angular/common`\n   *\n   * You can changed to other libs, e.g: [date-fns](https://date-fns.org/v2.0.1/docs/format)\n   */\n  formatDate?: CountdownFormatFn;\n\n  /**\n   * A timezone offset (such as '+0430'), or a standard UTC/GMT. When not supplied, uses the end-user's local system timezone, Default: `+0000`\n   */\n  timezone?: string;\n}\n\nexport type CountdownEventAction = 'start' | 'stop' | 'restart' | 'pause' | 'resume' | 'notify' | 'done';\n\nexport interface CountdownEvent {\n  action: CountdownEventAction;\n  status: CountdownStatus;\n  left: number;\n  text: string;\n}\n\nexport interface CountdownItem {\n  text?: string;\n  value?: number;\n}\n","import { Injectable, NgZone } from '@angular/core';\n\n@Injectable()\nexport class CountdownTimer {\n  private fns: Array<((count: number) => number | void) | number> = [];\n  private commands: Array<() => void> = [];\n  private nextTime: number;\n  private ing = false;\n\n  constructor(private ngZone: NgZone) {}\n\n  start() {\n    if (this.ing === true) return;\n\n    this.ing = true;\n    this.nextTime = +new Date();\n    this.ngZone.runOutsideAngular(() => {\n      this.process();\n    });\n  }\n\n  private process() {\n    while (this.commands.length) {\n      this.commands.shift()();\n    }\n    let diff = +new Date() - this.nextTime;\n    const count = 1 + Math.floor(diff / 100);\n\n    diff = 100 - (diff % 100);\n    this.nextTime += 100 * count;\n\n    for (let i = 0, len = this.fns.length; i < len; i += 2) {\n      let frequency = this.fns[i + 1] as number;\n\n      // 100/s\n      if (0 === frequency) {\n        (this.fns[i] as (count: number) => void)(count);\n        // 1000/s\n      } else {\n        // åææ«ä½è³0ï¼åæ¯æ¬¡å 2\n        frequency += 2 * count - 1;\n\n        const step = Math.floor(frequency / 20);\n        if (step > 0) {\n          (this.fns[i] as (count: number) => void)(step);\n        }\n\n        // ææ«ä½è¿åæ1\n        this.fns[i + 1] = (frequency % 20) + 1;\n      }\n    }\n\n    if (!this.ing) return;\n\n    setTimeout(() => this.process(), diff);\n  }\n\n  add(fn: () => void, frequency: number): this {\n    this.commands.push(() => {\n      this.fns.push(fn);\n      this.fns.push(frequency === 1000 ? 1 : 0);\n      this.ing = true;\n    });\n    return this;\n  }\n\n  remove(fn: () => void): this {\n    this.commands.push(() => {\n      const i = this.fns.indexOf(fn);\n      if (i !== -1) {\n        this.fns.splice(i, 2);\n      }\n      this.ing = this.fns.length > 0;\n    });\n    return this;\n  }\n}\n","// tslint:disable: no-inferrable-types\nimport { Injectable, Inject, LOCALE_ID } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { CountdownFormatFn, CountdownConfig } from './interfaces';\n\n@Injectable({ providedIn: 'root' })\nexport class CountdownGlobalConfig implements CountdownConfig {\n  constructor(@Inject(LOCALE_ID) private locale: string) {}\n\n  demand?: boolean = false;\n\n  leftTime?: number = 0;\n\n  format?: string = 'HH:mm:ss';\n\n  timezone?: string = '+0000';\n\n  formatDate?: CountdownFormatFn = ({ date, formatStr, timezone }) => {\n    return formatDate(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');\n  };\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  OnInit,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Inject,\n  LOCALE_ID,\n  ChangeDetectorRef,\n  TemplateRef,\n  NgZone,\n} from '@angular/core';\n\nimport { CountdownConfig, CountdownStatus, CountdownEvent, CountdownEventAction, CountdownItem } from './interfaces';\nimport { CountdownTimer } from './countdown.timer';\nimport { CountdownGlobalConfig } from './countdown.config';\n\n@Component({\n  selector: 'countdown',\n  template: `\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  `,\n  host: { '[class.count-down]': 'true' },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountdownComponent implements OnInit, OnChanges, OnDestroy {\n  private frequency = 1000;\n  private _notify: any = {};\n  private _left = 0;\n  private status: CountdownStatus = CountdownStatus.ing;\n  private isDestroy = false;\n  i: CountdownItem = {};\n\n  @Input() config: CountdownConfig;\n  @Input() render: TemplateRef<void>;\n  @Output() readonly event = new EventEmitter<CountdownEvent>();\n\n  constructor(\n    @Inject(LOCALE_ID) private locale: string,\n    private timer: CountdownTimer,\n    private defCog: CountdownGlobalConfig,\n    private cdr: ChangeDetectorRef,\n    private ngZone: NgZone,\n  ) {}\n\n  get left() {\n    return this._left;\n  }\n\n  /**\n   * Start countdown, you must manually call when `demand: false`\n   */\n  begin() {\n    this.status = CountdownStatus.ing;\n    this.callEvent('start');\n  }\n\n  /**\n   * Restart countdown\n   */\n  restart(): void {\n    if (this.status !== CountdownStatus.stop) {\n      this.destroy();\n    }\n    this.init();\n    this.callEvent('restart');\n  }\n\n  /**\n   * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n   */\n  stop() {\n    if (this.status === CountdownStatus.stop) {\n      return;\n    }\n    this.status = CountdownStatus.stop;\n    this.destroy();\n    this.callEvent('stop');\n  }\n\n  /**\n   * Pause countdown, you can use `resume` to recover again\n   */\n  pause() {\n    if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) return;\n    this.status = CountdownStatus.pause;\n    this.callEvent('pause');\n  }\n\n  /**\n   * Resume countdown\n   */\n  resume() {\n    if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) return;\n    this.status = CountdownStatus.ing;\n    this.callEvent('resume');\n  }\n\n  private callEvent(action: CountdownEventAction) {\n    this.event.emit({ action, left: this._left, status: this.status, text: this.i.text });\n  }\n\n  private init() {\n    const { locale, defCog } = this;\n    const config = (this.config = {\n      ...new CountdownGlobalConfig(locale),\n      ...defCog,\n      ...this.config,\n    });\n    // tslint:disable-next-line: no-bitwise\n    const frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);\n    this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n\n    this.getLeft();\n\n    // bind reflow to me\n    const _reflow = this.reflow;\n    this.reflow = (count: number = 0, force: boolean = false) => _reflow.apply(this, [count, force]);\n\n    if (Array.isArray(config.notify)) {\n      config.notify.forEach((time: number) => {\n        if (time < 1) throw new Error(`The notify config must be a positive integer.`);\n\n        time = time * 1000;\n        time = time - (time % frq);\n        this._notify[time] = true;\n      });\n    }\n\n    this.timer.add(this.reflow, frq).start();\n\n    this.reflow(0, true);\n  }\n\n  private destroy() {\n    this.timer.remove(this.reflow);\n    return this;\n  }\n\n  /**\n   * æ´æ°æ¶é\n   */\n  private reflow(count: number = 0, force: boolean = false): void {\n    if (this.isDestroy) return;\n\n    const { status, config, _notify } = this;\n    if (!force && status !== CountdownStatus.ing) return;\n\n    const value = (this._left = this._left - this.frequency * count);\n    this.i = {\n      value,\n      text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),\n    };\n    if (typeof config.prettyText === 'function') {\n      this.i.text = config.prettyText(this.i.text);\n    }\n    this.cdr.detectChanges();\n\n    if (config.notify === 0 || _notify[value]) {\n      this.ngZone.run(() => {\n        this.callEvent('notify');\n      });\n    }\n\n    if (value < 1) {\n      this.ngZone.run(() => {\n        this.status = CountdownStatus.done;\n        this.callEvent('done');\n        this.destroy();\n      });\n    }\n  }\n\n  /**\n   * è·ååè®¡æ¶å©ä½å¸§æ°\n   */\n  private getLeft(): void {\n    const { config, frequency } = this;\n    let left = config.leftTime * 1000;\n    const end = config.stopTime;\n\n    if (!left && end) {\n      left = end - new Date().getTime();\n    }\n\n    this._left = left - (left % frequency);\n  }\n\n  ngOnInit() {\n    this.init();\n    if (!this.config.demand) {\n      this.begin();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.isDestroy = true;\n    this.destroy();\n  }\n\n  ngOnChanges(changes: { [P in keyof this]?: SimpleChange } & SimpleChanges): void {\n    if (!changes.config.firstChange) {\n      this.restart();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CountdownComponent } from './countdown.component';\nimport { CountdownTimer } from './countdown.timer';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [CountdownTimer],\n  declarations: [CountdownComponent],\n  exports: [CountdownComponent],\n})\nexport class CountdownModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}