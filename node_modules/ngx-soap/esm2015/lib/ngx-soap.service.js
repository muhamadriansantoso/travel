/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { createClient } from './soap/soap';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
export { security } from './soap/security/security';
export class NgxSoapService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} wsdlUrl
     * @param {?=} options
     * @param {?=} endpoint
     * @return {?}
     */
    createClient(wsdlUrl, options = {}, endpoint) {
        options.httpClient = this.http;
        return createClient(wsdlUrl, options, endpoint);
    }
}
NgxSoapService.ɵfac = function NgxSoapService_Factory(t) { return new (t || NgxSoapService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
NgxSoapService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxSoapService, factory: NgxSoapService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxSoapService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ NgxSoapService.ngInjectableDef = i0.defineInjectable({ factory: function NgxSoapService_Factory() { return new NgxSoapService(i0.inject(i1.HttpClient)); }, token: NgxSoapService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxSoapService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxSoapService.prototype.http;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNvYXAuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1zb2FwL2xpYi9uZ3gtc29hcC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xEO0FBQXFDOzs7QUFjckMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBS25ELE1BQU0sT0FBTyxjQUFjO0FBQzNCO0FBQ087QUFBdUI7QUFBUSxJQUFwQyxZQUFvQixJQUFnQjtBQUFJLFFBQXBCLFNBQUksR0FBSixJQUFJLENBQVk7QUFBQyxJQUFHLENBQUM7QUFDM0M7QUFDTztBQUEwQjtBQUEyQjtBQUE0QjtBQUN0RTtBQUFRLElBRHhCLFlBQVksQ0FBQyxPQUFlLEVBQUUsVUFBZSxFQUFFLEVBQUUsUUFBaUI7QUFBSSxRQUNwRSxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDbkMsUUFBSSxPQUFPLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFFO0FBQ3JELElBQUUsQ0FBQztBQUNIOzBDQVhDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxjQUNuQjs4SEFDSTtBQUFDO0FBQW1CO0FBRVMsWUF0QnpCLFVBQVU7QUFBRztBQUFHOzs7Ozs7MkVBWWY7QUFBQztBQUNGO0FBQVE7QUFFWjtBQUFnQjtBQUFRLElBT2YsOEJBQXdCO0FBQUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJy4vc29hcC9zb2FwJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tICcuL3NvYXAvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCB7XG4gIENsaWVudCxcbiAgV1NETCxcbiAgSVNvYXBNZXRob2QsXG4gIElTb2FwTWV0aG9kUmVzcG9uc2UsXG4gIEJhc2ljQXV0aFNlY3VyaXR5LFxuICBCZWFyZXJTZWN1cml0eSxcbiAgLy8gV1NTZWN1cml0eUNlcnQsXG4gIFdTU2VjdXJpdHksXG4gIE5UTE1TZWN1cml0eVxufSBmcm9tICcuL3NvYXAvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCB7IHNlY3VyaXR5IH0gZnJvbSAnLi9zb2FwL3NlY3VyaXR5L3NlY3VyaXR5J1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hTb2FwU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cblxuICBjcmVhdGVDbGllbnQod3NkbFVybDogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSwgZW5kcG9pbnQ/OiBzdHJpbmcpOiBQcm9taXNlPENsaWVudD4ge1xuICAgIG9wdGlvbnMuaHR0cENsaWVudCA9IHRoaXMuaHR0cDtcbiAgICByZXR1cm4gY3JlYXRlQ2xpZW50KHdzZGxVcmwsIG9wdGlvbnMsIGVuZHBvaW50KSA7XG4gIH1cbn1cbiJdfQ==