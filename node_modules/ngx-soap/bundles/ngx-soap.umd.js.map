{"version":3,"file":"ngx-soap.umd.js","sources":["node_modules/tslib/tslib.es6.js","ng:/ngx-soap/lib/soap/nscontext.ts","ng:/ngx-soap/lib/soap/utils.ts","ng:/ngx-soap/lib/soap/wsdl.ts","ng:/ngx-soap/lib/soap/security/BasicAuthSecurity.ts","ng:/ngx-soap/lib/soap/security/WSSecurity.ts","ng:/ngx-soap/lib/soap/security/BearerSecurity.ts","ng:/ngx-soap/lib/soap/security/NTLMSecurity.ts","ng:/ngx-soap/lib/soap/security/security.ts","ng:/ngx-soap/lib/soap/multipart.ts","ng:/ngx-soap/lib/soap/soapAttachment.ts","ng:/ngx-soap/lib/soap/client.ts","ng:/ngx-soap/lib/soap/soap.ts","ng:/ngx-soap/lib/ngx-soap.service.ts","ng:/ngx-soap/lib/ngx-soap.module.ts"],"names":["_","Buffer","TNS_PREFIX","utils.TNS_PREFIX","findPrefix","utils.findPrefix","_.mergeWith","_.isArray","_.defaultsDeep","assert","_.merge","url.resolve","_.assign","sax.parser","_.isPlainObject","sax.createStream","assert.ok","from","map","tslib_1.__values","flatMap","_.isObject","throwError","url","wsdl.open_wsdl","Injectable","HttpClient","NgModule","HttpClientModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","'use strict';\n\nexport class NamespaceScope {\n  parent: any;\n  namespaces: any;\n  constructor(parent: any) {\n    if (!(this instanceof NamespaceScope)) {\n      return new NamespaceScope(parent);\n    }\n    this.parent = parent;\n    this.namespaces = {};  \n  }\n\n  getNamespaceURI = function(prefix, localOnly) {\n    switch (prefix) {\n      case 'xml':\n        return 'http://www.w3.org/XML/1998/namespace';\n      case 'xmlns':\n        return 'http://www.w3.org/2000/xmlns/';\n      default:\n        var nsUri = this.namespaces[prefix];\n        /*jshint -W116 */\n        if (nsUri != null) {\n          return nsUri.uri;\n        } else if (!localOnly && this.parent) {\n          return this.parent.getNamespaceURI(prefix);\n        } else {\n          return null;\n        }\n    }\n  }\n\n  getNamespaceMapping = function(prefix) {\n    switch (prefix) {\n      case 'xml':\n        return {\n          uri: 'http://www.w3.org/XML/1998/namespace',\n          prefix: 'xml',\n          declared: true\n        };\n      case 'xmlns':\n        return {\n          uri: 'http://www.w3.org/2000/xmlns/',\n          prefix: 'xmlns',\n          declared: true\n        };\n      default:\n        var mapping = this.namespaces[prefix];\n        /*jshint -W116 */\n        if (mapping != null) {\n          return mapping;\n        } else if (this.parent) {\n          return this.parent.getNamespaceMapping(prefix);\n        } else {\n          return null;\n        }\n    }\n  }\n\n  getPrefix = function(nsUri, localOnly) {\n    switch (nsUri) {\n      case 'http://www.w3.org/XML/1998/namespace':\n        return 'xml';\n      case 'http://www.w3.org/2000/xmlns/':\n        return 'xmlns';\n      default:\n        for (var p in this.namespaces) {\n          if (this.namespaces[p].uri === nsUri) {\n            return p;\n          }\n        }\n        if (!localOnly && this.parent) {\n          return this.parent.getPrefix(nsUri);\n        } else {\n          return null;\n        }\n    }\n  }\n}\n\nexport class NamespaceContext {\n  scopes: any[];\n  prefixCount: number; \n\n  constructor() {\n    if (!(this instanceof NamespaceContext)) {\n      return new NamespaceContext();\n    }\n    this.scopes = [];\n    this.pushContext();\n    this.prefixCount = 0;\n  }\n\n  addNamespace = function(prefix, nsUri, localOnly) {\n    if (this.getNamespaceURI(prefix, localOnly) === nsUri) {\n      return false;\n    }\n    if (this.currentScope) {\n      this.currentScope.namespaces[prefix] = {\n        uri: nsUri,\n        prefix: prefix,\n        declared: false\n      };\n      return true;\n    }\n    return false;\n  }\n\n  pushContext = function() {\n    var scope = new NamespaceScope(this.currentScope);\n    this.scopes.push(scope);\n    this.currentScope = scope;\n    return scope;\n  }\n\n  popContext = function() {\n    var scope = this.scopes.pop();\n    if (scope) {\n      this.currentScope = scope.parent;\n    } else {\n      this.currentScope = null;\n    }\n    return scope;\n  }\n\n  getNamespaceURI = function(prefix, localOnly) {\n    return this.currentScope && this.currentScope.getNamespaceURI(prefix, localOnly);\n  }\n\n  getPrefix = function(nsUri, localOnly) {\n    return this.currentScope && this.currentScope.getPrefix(nsUri, localOnly);\n  }\n  \n  registerNamespace = function(nsUri) {\n    var prefix = this.getPrefix(nsUri);\n    if (prefix) {\n      // If the namespace has already mapped to a prefix\n      return prefix;\n    } else {\n      // Try to generate a unique namespace\n      while (true) {\n        prefix = 'ns' + (++this.prefixCount);\n        if (!this.getNamespaceURI(prefix)) {\n          // The prefix is not used\n          break;\n        }\n      }\n    }\n    this.addNamespace(prefix, nsUri, true);\n    return prefix;\n  }\n\n  declareNamespace = function(prefix, nsUri) {\n    if (this.currentScope) {\n      var mapping = this.currentScope.getNamespaceMapping(prefix);\n      if (mapping && mapping.uri === nsUri && mapping.declared) {\n        return false;\n      }\n      this.currentScope.namespaces[prefix] = {\n        uri: nsUri,\n        prefix: prefix,\n        declared: true\n      };\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\n * Scope for XML namespaces\n * @param [parent] Parent scope\n * \n */\n// export function NamespaceScope(parent) {\n//   if (!(this instanceof NamespaceScope)) {\n//     return NamespaceScope(parent);\n//   }\n//   this.parent = parent;\n//   this.namespaces = {};\n// }\n\n// /**\n//  * Namespace context that manages hierarchical scopes\n//  *  {NamespaceContext}\n//  */\n// export function NamespaceContext() {\n//   if (!(this instanceof NamespaceContext)) {\n//     return NamespaceContext();\n//   }\n//   this.scopes = [];\n//   this.pushContext();\n//   this.prefixCount = 0;\n// }\n\n// /**\n//  * Look up the namespace URI by prefix\n//  * @param  prefix Namespace prefix\n//  * @param  [localOnly] Search current scope only\n//  *   Namespace URI\n//  */\n// NamespaceScope.prototype.getNamespaceURI = function(prefix, localOnly) {\n//   switch (prefix) {\n//     case 'xml':\n//       return 'http://www.w3.org/XML/1998/namespace';\n//     case 'xmlns':\n//       return 'http://www.w3.org/2000/xmlns/';\n//     default:\n//       var nsUri = this.namespaces[prefix];\n//       /*jshint -W116 */\n//       if (nsUri != null) {\n//         return nsUri.uri;\n//       } else if (!localOnly && this.parent) {\n//         return this.parent.getNamespaceURI(prefix);\n//       } else {\n//         return null;\n//       }\n//   }\n// };\n\n// NamespaceScope.prototype.getNamespaceMapping = function(prefix) {\n//   switch (prefix) {\n//     case 'xml':\n//       return {\n//         uri: 'http://www.w3.org/XML/1998/namespace',\n//         prefix: 'xml',\n//         declared: true\n//       };\n//     case 'xmlns':\n//       return {\n//         uri: 'http://www.w3.org/2000/xmlns/',\n//         prefix: 'xmlns',\n//         declared: true\n//       };\n//     default:\n//       var mapping = this.namespaces[prefix];\n//       /*jshint -W116 */\n//       if (mapping != null) {\n//         return mapping;\n//       } else if (this.parent) {\n//         return this.parent.getNamespaceMapping(prefix);\n//       } else {\n//         return null;\n//       }\n//   }\n// };\n\n// /**\n//  * Look up the namespace prefix by URI\n//  * @param  nsUri Namespace URI\n//  * @param  [localOnly] Search current scope only\n//  *   Namespace prefix\n//  */\n// NamespaceScope.prototype.getPrefix = function(nsUri, localOnly) {\n//   switch (nsUri) {\n//     case 'http://www.w3.org/XML/1998/namespace':\n//       return 'xml';\n//     case 'http://www.w3.org/2000/xmlns/':\n//       return 'xmlns';\n//     default:\n//       for (var p in this.namespaces) {\n//         if (this.namespaces[p].uri === nsUri) {\n//           return p;\n//         }\n//       }\n//       if (!localOnly && this.parent) {\n//         return this.parent.getPrefix(nsUri);\n//       } else {\n//         return null;\n//       }\n//   }\n// };\n\n// /**\n//  * Add a prefix/URI namespace mapping\n//  * @param  prefix Namespace prefix\n//  * @param  nsUri Namespace URI\n//  * @param  [localOnly] Search current scope only\n//  *  {boolean} true if the mapping is added or false if the mapping\n//  * already exists\n//  */\n// NamespaceContext.prototype.addNamespace = function(prefix, nsUri, localOnly) {\n//   if (this.getNamespaceURI(prefix, localOnly) === nsUri) {\n//     return false;\n//   }\n//   if (this.currentScope) {\n//     this.currentScope.namespaces[prefix] = {\n//       uri: nsUri,\n//       prefix: prefix,\n//       declared: false\n//     };\n//     return true;\n//   }\n//   return false;\n// };\n\n// /**\n//  * Push a scope into the context\n//  *  The current scope\n//  */\n// NamespaceContext.prototype.pushContext = function() {\n//   var scope = NamespaceScope(this.currentScope);\n//   this.scopes.push(scope);\n//   this.currentScope = scope;\n//   return scope;\n// };\n\n// /**\n//  * Pop a scope out of the context\n//  *   The removed scope\n//  */\n// NamespaceContext.prototype.popContext = function() {\n//   var scope = this.scopes.pop();\n//   if (scope) {\n//     this.currentScope = scope.parent;\n//   } else {\n//     this.currentScope = null;\n//   }\n//   return scope;\n// };\n\n// /**\n//  * Look up the namespace URI by prefix\n//  * @param  prefix Namespace prefix\n//  * @param  [localOnly] Search current scope only\n//  *   Namespace URI\n//  */\n// NamespaceContext.prototype.getNamespaceURI = function(prefix, localOnly) {\n//   return this.currentScope && this.currentScope.getNamespaceURI(prefix, localOnly);\n// };\n\n// /**\n//  * Look up the namespace prefix by URI\n//  * @param  nsURI Namespace URI\n//  * @param  [localOnly] Search current scope only\n//  *   Namespace prefix\n//  */\n// NamespaceContext.prototype.getPrefix = function(nsUri, localOnly) {\n//   return this.currentScope && this.currentScope.getPrefix(nsUri, localOnly);\n// };\n\n// /**\n//  * Register a namespace\n//  * @param  nsUri Namespace URI\n//  *   The matching or generated namespace prefix\n//  */\n// NamespaceContext.prototype.registerNamespace = function(nsUri) {\n//   var prefix = this.getPrefix(nsUri);\n//   if (prefix) {\n//     // If the namespace has already mapped to a prefix\n//     return prefix;\n//   } else {\n//     // Try to generate a unique namespace\n//     while (true) {\n//       prefix = 'ns' + (++this.prefixCount);\n//       if (!this.getNamespaceURI(prefix)) {\n//         // The prefix is not used\n//         break;\n//       }\n//     }\n//   }\n//   this.addNamespace(prefix, nsUri, true);\n//   return prefix;\n// };\n\n// /**\n//  * Declare a namespace prefix/uri mapping\n//  * @param  prefix Namespace prefix\n//  * @param  nsUri Namespace URI\n//  *   true if the declaration is created\n//  */\n// NamespaceContext.prototype.declareNamespace = function(prefix, nsUri) {\n//   if (this.currentScope) {\n//     var mapping = this.currentScope.getNamespaceMapping(prefix);\n//     if (mapping && mapping.uri === nsUri && mapping.declared) {\n//       return false;\n//     }\n//     this.currentScope.namespaces[prefix] = {\n//       uri: nsUri,\n//       prefix: prefix,\n//       declared: true\n//     };\n//     return true;\n//   }\n//   return false;\n// };\n","import sha1 from 'crypto-js/sha1';\nimport Base64 from 'crypto-js/enc-base64';\nimport { Buffer } from 'buffer';\n\nexport const passwordDigest = function passwordDigest(nonce, created, password) {\n  const rawNonce = new Buffer(nonce || '', 'base64').toString('binary');\n  return Base64.stringify(sha1(rawNonce + created + password, ''));\n};\n\nexport const TNS_PREFIX = '__tns__'; // Prefix for targetNamespace\n\n/**\n * Find a key from an object based on the value\n * @param  Namespace prefix/uri mapping\n * @param  nsURI value\n * @returns  The matching key\n */\nexport const findPrefix = function(xmlnsMapping, nsURI) {\n  for (const n in xmlnsMapping) {\n    if (n === TNS_PREFIX) { continue; }\n    if (xmlnsMapping[n] === nsURI) {\n      return n;\n    }\n  }\n};\n","/*\n * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>\n * MIT Licensed\n *\n */\n/*jshint proto:true*/\n\n\"use strict\";\n\nimport * as sax from 'sax';\nimport { HttpClient } from '@angular/common/http';\nimport { NamespaceContext } Â from './nscontext';\nimport * as _ from 'lodash';\nimport * as utils from './utils';\nimport * as url from 'url';\nimport { ok as assert } from 'assert';\n\nconst stripBom = (x: string): string => {\n  // Catches EFBBBF (UTF-8 BOM) because the buffer-to-string\n  // conversion translates it to FEFF (UTF-16 BOM)\n  if (x.charCodeAt(0) === 0xFEFF) {\n    return x.slice(1);\n  }\n\n  return x;\n}\n\n\n\n\nlet TNS_PREFIX = utils.TNS_PREFIX;\nlet findPrefix = utils.findPrefix;\n\nlet Primitives = {\n  string: 1,\n  boolean: 1,\n  decimal: 1,\n  float: 1,\n  double: 1,\n  anyType: 1,\n  byte: 1,\n  int: 1,\n  long: 1,\n  short: 1,\n  negativeInteger: 1,\n  nonNegativeInteger: 1,\n  positiveInteger: 1,\n  nonPositiveInteger: 1,\n  unsignedByte: 1,\n  unsignedInt: 1,\n  unsignedLong: 1,\n  unsignedShort: 1,\n  duration: 0,\n  dateTime: 0,\n  time: 0,\n  date: 0,\n  gYearMonth: 0,\n  gYear: 0,\n  gMonthDay: 0,\n  gDay: 0,\n  gMonth: 0,\n  hexBinary: 0,\n  base64Binary: 0,\n  anyURI: 0,\n  QName: 0,\n  NOTATION: 0\n};\n\nfunction splitQName(nsName) {\n  let i = typeof nsName === 'string' ? nsName.indexOf(':') : -1;\n  return i < 0 ? { prefix: TNS_PREFIX, name: nsName } :\n    { prefix: nsName.substring(0, i), name: nsName.substring(i + 1) };\n}\n\nfunction xmlEscape(obj) {\n  if (typeof (obj) === 'string') {\n    if (obj.substr(0, 9) === '<![CDATA[' && obj.substr(-3) === \"]]>\") {\n      return obj;\n    }\n    return obj\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n  }\n\n  return obj;\n}\n\nlet trimLeft = /^[\\s\\xA0]+/;\nlet trimRight = /[\\s\\xA0]+$/;\n\nfunction trim(text) {\n  return text.replace(trimLeft, '').replace(trimRight, '');\n}\n\nfunction deepMerge(destination, source) {\n  return _.mergeWith(destination || {}, source, function (a, b) {\n    return _.isArray(a) ? a.concat(b) : undefined;\n  });\n}\n\nlet Element: any = function (nsName, attrs, options) {\n  let parts = splitQName(nsName);\n\n  this.nsName = nsName;\n  this.prefix = parts.prefix;\n  this.name = parts.name;\n  this.children = [];\n  this.xmlns = {};\n\n  this._initializeOptions(options);\n\n  for (let key in attrs) {\n    let match = /^xmlns:?(.*)$/.exec(key);\n    if (match) {\n      this.xmlns[match[1] ? match[1] : TNS_PREFIX] = attrs[key];\n    }\n    else {\n      if (key === 'value') {\n        this[this.valueKey] = attrs[key];\n      } else {\n        this['$' + key] = attrs[key];\n      }\n    }\n  }\n  if (this.$targetNamespace !== undefined) {\n    // Add targetNamespace to the mapping\n    this.xmlns[TNS_PREFIX] = this.$targetNamespace;\n  }\n};\n\nElement.prototype._initializeOptions = function (options) {\n  if (options) {\n    this.valueKey = options.valueKey || '$value';\n    this.xmlKey = options.xmlKey || '$xml';\n    this.ignoredNamespaces = options.ignoredNamespaces || [];\n  } else {\n    this.valueKey = '$value';\n    this.xmlKey = '$xml';\n    this.ignoredNamespaces = [];\n  }\n};\n\nElement.prototype.deleteFixedAttrs = function () {\n  this.children && this.children.length === 0 && delete this.children;\n  this.xmlns && Object.keys(this.xmlns).length === 0 && delete this.xmlns;\n  delete this.nsName;\n  delete this.prefix;\n  delete this.name;\n};\n\nElement.prototype.allowedChildren = [];\n\nElement.prototype.startElement = function (stack, nsName, attrs, options) {\n  if (!this.allowedChildren) {\n    return;\n  }\n\n  let ChildClass = this.allowedChildren[splitQName(nsName).name],\n    element = null;\n\n  if (ChildClass) {\n    stack.push(new ChildClass(nsName, attrs, options));\n  }\n  else {\n    this.unexpected(nsName);\n  }\n\n};\n\nElement.prototype.endElement = function (stack, nsName) {\n  if (this.nsName === nsName) {\n    if (stack.length < 2)\n      return;\n    let parent = stack[stack.length - 2];\n    if (this !== stack[0]) {\n      _.defaultsDeep(stack[0].xmlns, this.xmlns);\n      // delete this.xmlns;\n      parent.children.push(this);\n      parent.addChild(this);\n    }\n    stack.pop();\n  }\n};\n\nElement.prototype.addChild = function (child) {\n  return;\n};\n\nElement.prototype.unexpected = function (name) {\n  throw new Error('Found unexpected element (' + name + ') inside ' + this.nsName);\n};\n\nElement.prototype.description = function (definitions) {\n  return this.$name || this.name;\n};\n\nElement.prototype.init = function () {\n};\n\nElement.createSubClass = function () {\n  let root = this;\n  let subElement = function () {\n    root.apply(this, arguments);\n    this.init();\n  };\n  // inherits(subElement, root);\n  subElement.prototype.__proto__ = root.prototype;\n  return subElement;\n};\n\n\nlet ElementElement = Element.createSubClass();\nlet AnyElement = Element.createSubClass();\nlet InputElement = Element.createSubClass();\nlet OutputElement = Element.createSubClass();\nlet SimpleTypeElement = Element.createSubClass();\nlet RestrictionElement = Element.createSubClass();\nlet ExtensionElement = Element.createSubClass();\nlet ChoiceElement = Element.createSubClass();\nlet EnumerationElement = Element.createSubClass();\nlet ComplexTypeElement = Element.createSubClass();\nlet ComplexContentElement = Element.createSubClass();\nlet SimpleContentElement = Element.createSubClass();\nlet SequenceElement = Element.createSubClass();\nlet AllElement = Element.createSubClass();\nlet MessageElement = Element.createSubClass();\nlet DocumentationElement = Element.createSubClass();\n\nlet SchemaElement = Element.createSubClass();\nlet TypesElement = Element.createSubClass();\nlet OperationElement = Element.createSubClass();\nlet PortTypeElement = Element.createSubClass();\nlet BindingElement = Element.createSubClass();\nlet PortElement = Element.createSubClass();\nlet ServiceElement = Element.createSubClass();\nlet DefinitionsElement = Element.createSubClass();\n\nlet ElementTypeMap = {\n  types: [TypesElement, 'schema documentation'],\n  schema: [SchemaElement, 'element complexType simpleType include import'],\n  element: [ElementElement, 'annotation complexType'],\n  any: [AnyElement, ''],\n  simpleType: [SimpleTypeElement, 'restriction'],\n  restriction: [RestrictionElement, 'enumeration all choice sequence'],\n  extension: [ExtensionElement, 'all sequence choice'],\n  choice: [ChoiceElement, 'element sequence choice any'],\n  // group: [GroupElement, 'element group'],\n  enumeration: [EnumerationElement, ''],\n  complexType: [ComplexTypeElement, 'annotation sequence all complexContent simpleContent choice'],\n  complexContent: [ComplexContentElement, 'extension'],\n  simpleContent: [SimpleContentElement, 'extension'],\n  sequence: [SequenceElement, 'element sequence choice any'],\n  all: [AllElement, 'element choice'],\n\n  service: [ServiceElement, 'port documentation'],\n  port: [PortElement, 'address documentation'],\n  binding: [BindingElement, '_binding SecuritySpec operation documentation'],\n  portType: [PortTypeElement, 'operation documentation'],\n  message: [MessageElement, 'part documentation'],\n  operation: [OperationElement, 'documentation input output fault _operation'],\n  input: [InputElement, 'body SecuritySpecRef documentation header'],\n  output: [OutputElement, 'body SecuritySpecRef documentation header'],\n  fault: [Element, '_fault documentation'],\n  definitions: [DefinitionsElement, 'types message portType binding service import documentation'],\n  documentation: [DocumentationElement, '']\n};\n\nfunction mapElementTypes(types) {\n  let rtn = {};\n  types = types.split(' ');\n  types.forEach(function (type) {\n    rtn[type.replace(/^_/, '')] = (ElementTypeMap[type] || [Element])[0];\n  });\n  return rtn;\n}\n\nfor (let n in ElementTypeMap) {\n  let v = ElementTypeMap[n];\n  v[0].prototype.allowedChildren = mapElementTypes(v[1]);\n}\n\nMessageElement.prototype.init = function () {\n  this.element = null;\n  this.parts = null;\n};\n\nSchemaElement.prototype.init = function () {\n  this.complexTypes = {};\n  this.types = {};\n  this.elements = {};\n  this.includes = [];\n};\n\nTypesElement.prototype.init = function () {\n  this.schemas = {};\n};\n\nOperationElement.prototype.init = function () {\n  this.input = null;\n  this.output = null;\n  this.inputSoap = null;\n  this.outputSoap = null;\n  this.style = '';\n  this.soapAction = '';\n};\n\nPortTypeElement.prototype.init = function () {\n  this.methods = {};\n};\n\nBindingElement.prototype.init = function () {\n  this.transport = '';\n  this.style = '';\n  this.methods = {};\n};\n\nPortElement.prototype.init = function () {\n  this.location = null;\n};\n\nServiceElement.prototype.init = function () {\n  this.ports = {};\n};\n\nDefinitionsElement.prototype.init = function () {\n  if (this.name !== 'definitions') this.unexpected(this.nsName);\n  this.messages = {};\n  this.portTypes = {};\n  this.bindings = {};\n  this.services = {};\n  this.schemas = {};\n};\n\nDocumentationElement.prototype.init = function () {\n};\n\nSchemaElement.prototype.merge = function (source) {\n  assert(source instanceof SchemaElement);\n  if (this.$targetNamespace === source.$targetNamespace) {\n    _.merge(this.complexTypes, source.complexTypes);\n    _.merge(this.types, source.types);\n    _.merge(this.elements, source.elements);\n    _.merge(this.xmlns, source.xmlns);\n  }\n  return this;\n};\n\n\nSchemaElement.prototype.addChild = function (child) {\n  if (child.$name in Primitives)\n    return;\n  if (child.name === 'include' || child.name === 'import') {\n    let location = child.$schemaLocation || child.$location;\n    if (location) {\n      this.includes.push({\n        namespace: child.$namespace || child.$targetNamespace || this.$targetNamespace,\n        location: location\n      });\n    }\n  }\n  else if (child.name === 'complexType') {\n    this.complexTypes[child.$name] = child;\n  }\n  else if (child.name === 'element') {\n    this.elements[child.$name] = child;\n  }\n  else if (child.$name) {\n    this.types[child.$name] = child;\n  }\n  this.children.pop();\n  // child.deleteFixedAttrs();\n};\n//fix#325\nTypesElement.prototype.addChild = function (child) {\n  assert(child instanceof SchemaElement);\n\n  let targetNamespace = child.$targetNamespace;\n\n  if (!this.schemas.hasOwnProperty(targetNamespace)) {\n    this.schemas[targetNamespace] = child;\n  } else {\n    console.error('Target-Namespace \"' + targetNamespace + '\" already in use by another Schema!');\n  }\n};\n\nInputElement.prototype.addChild = function (child) {\n  if (child.name === 'body') {\n    this.use = child.$use;\n    if (this.use === 'encoded') {\n      this.encodingStyle = child.$encodingStyle;\n    }\n    this.children.pop();\n  }\n};\n\nOutputElement.prototype.addChild = function (child) {\n  if (child.name === 'body') {\n    this.use = child.$use;\n    if (this.use === 'encoded') {\n      this.encodingStyle = child.$encodingStyle;\n    }\n    this.children.pop();\n  }\n};\n\nOperationElement.prototype.addChild = function (child) {\n  if (child.name === 'operation') {\n    this.soapAction = child.$soapAction || '';\n    this.style = child.$style || '';\n    this.children.pop();\n  }\n};\n\nBindingElement.prototype.addChild = function (child) {\n  if (child.name === 'binding') {\n    this.transport = child.$transport;\n    this.style = child.$style;\n    this.children.pop();\n  }\n};\n\nPortElement.prototype.addChild = function (child) {\n  if (child.name === 'address' && typeof (child.$location) !== 'undefined') {\n    this.location = child.$location;\n  }\n};\n\nDefinitionsElement.prototype.addChild = function (child) {\n  let self = this;\n  if (child instanceof TypesElement) {\n    // Merge types.schemas into definitions.schemas\n    _.merge(self.schemas, child.schemas);\n  }\n  else if (child instanceof MessageElement) {\n    self.messages[child.$name] = child;\n  }\n  else if (child.name === 'import') {\n    self.schemas[child.$namespace] = new SchemaElement(child.$namespace, {});\n    self.schemas[child.$namespace].addChild(child);\n  }\n  else if (child instanceof PortTypeElement) {\n    self.portTypes[child.$name] = child;\n  }\n  else if (child instanceof BindingElement) {\n    if (child.transport === 'http://schemas.xmlsoap.org/soap/http' ||\n      child.transport === 'http://www.w3.org/2003/05/soap/bindings/HTTP/')\n      self.bindings[child.$name] = child;\n  }\n  else if (child instanceof ServiceElement) {\n    self.services[child.$name] = child;\n  }\n  else if (child instanceof DocumentationElement) {\n  }\n  this.children.pop();\n};\n\nMessageElement.prototype.postProcess = function (definitions) {\n  let part = null;\n  let child = undefined;\n  let children = this.children || [];\n  let ns = undefined;\n  let nsName = undefined;\n  let i = undefined;\n  let type = undefined;\n\n  for (i in children) {\n    if ((child = children[i]).name === 'part') {\n      part = child;\n      break;\n    }\n  }\n\n  if (!part) {\n    return;\n  }\n\n  if (part.$element) {\n    let lookupTypes = [],\n      elementChildren;\n\n    delete this.parts;\n\n    nsName = splitQName(part.$element);\n    ns = nsName.prefix;\n    let schema = definitions.schemas[definitions.xmlns[ns]];\n    this.element = schema.elements[nsName.name];\n    if (!this.element) {\n      // debug(nsName.name + \" is not present in wsdl and cannot be processed correctly.\");\n      return;\n    }\n    this.element.targetNSAlias = ns;\n    this.element.targetNamespace = definitions.xmlns[ns];\n\n    // set the optional $lookupType to be used within `client#_invoke()` when\n    // calling `wsdl#objectToDocumentXML()\n    this.element.$lookupType = part.$element;\n\n    elementChildren = this.element.children;\n\n    // get all nested lookup types (only complex types are followed)\n    if (elementChildren.length > 0) {\n      for (i = 0; i < elementChildren.length; i++) {\n        lookupTypes.push(this._getNestedLookupTypeString(elementChildren[i]));\n      }\n    }\n\n    // if nested lookup types where found, prepare them for furter usage\n    if (lookupTypes.length > 0) {\n      lookupTypes = lookupTypes.\n        join('_').\n        split('_').\n        filter(function removeEmptyLookupTypes(type) {\n          return type !== '^';\n        });\n\n      let schemaXmlns = definitions.schemas[this.element.targetNamespace].xmlns;\n\n      for (i = 0; i < lookupTypes.length; i++) {\n        lookupTypes[i] = this._createLookupTypeObject(lookupTypes[i], schemaXmlns);\n      }\n    }\n\n    this.element.$lookupTypes = lookupTypes;\n\n    if (this.element.$type) {\n      type = splitQName(this.element.$type);\n      let typeNs = schema.xmlns && schema.xmlns[type.prefix] || definitions.xmlns[type.prefix];\n\n      if (typeNs) {\n        if (type.name in Primitives) {\n          // this.element = this.element.$type;\n        }\n        else {\n          // first check local mapping of ns alias to namespace\n          schema = definitions.schemas[typeNs];\n          let ctype = schema.complexTypes[type.name] || schema.types[type.name] || schema.elements[type.name];\n\n\n          if (ctype) {\n            this.parts = ctype.description(definitions, schema.xmlns);\n          }\n        }\n      }\n    }\n    else {\n      let method = this.element.description(definitions, schema.xmlns);\n      this.parts = method[nsName.name];\n    }\n\n\n    this.children.splice(0, 1);\n  } else {\n    // rpc encoding\n    this.parts = {};\n    delete this.element;\n    for (i = 0; part = this.children[i]; i++) {\n      if (part.name === 'documentation') {\n        // <wsdl:documentation can be present under <wsdl:message>\n        continue;\n      }\n      assert(part.name === 'part', 'Expected part element');\n      nsName = splitQName(part.$type);\n      ns = definitions.xmlns[nsName.prefix];\n      type = nsName.name;\n      let schemaDefinition = definitions.schemas[ns];\n      if (typeof schemaDefinition !== 'undefined') {\n        this.parts[part.$name] = definitions.schemas[ns].types[type] || definitions.schemas[ns].complexTypes[type];\n      } else {\n        this.parts[part.$name] = part.$type;\n      }\n\n      if (typeof this.parts[part.$name] === 'object') {\n        this.parts[part.$name].prefix = nsName.prefix;\n        this.parts[part.$name].xmlns = ns;\n      }\n\n      this.children.splice(i--, 1);\n    }\n  }\n  this.deleteFixedAttrs();\n};\n\n/**\n * Takes a given namespaced String(for example: 'alias:property') and creates a lookupType\n * object for further use in as first (lookup) `parameterTypeObj` within the `objectToXML`\n * method and provides an entry point for the already existing code in `findChildSchemaObject`.\n *\n * @method _createLookupTypeObject\n * @param {String}            nsString          The NS String (for example \"alias:type\").\n * @param {Object}            xmlns       The fully parsed `wsdl` definitions object (including all schemas).\n * @returns {Object}\n * @private\n */\nMessageElement.prototype._createLookupTypeObject = function (nsString, xmlns) {\n  let splittedNSString = splitQName(nsString),\n    nsAlias = splittedNSString.prefix,\n    splittedName = splittedNSString.name.split('#'),\n    type = splittedName[0],\n    name = splittedName[1],\n    lookupTypeObj: any = {};\n\n  lookupTypeObj.$namespace = xmlns[nsAlias];\n  lookupTypeObj.$type = nsAlias + ':' + type;\n  lookupTypeObj.$name = name;\n\n  return lookupTypeObj;\n};\n\n/**\n * Iterates through the element and every nested child to find any defined `$type`\n * property and returns it in a underscore ('_') separated String (using '^' as default\n * value if no `$type` property was found).\n *\n * @method _getNestedLookupTypeString\n * @param {Object}            element         The element which (probably) contains nested `$type` values.\n * @returns {String}\n * @private\n */\nMessageElement.prototype._getNestedLookupTypeString = function (element) {\n  let resolvedType = '^',\n    excluded = this.ignoredNamespaces.concat('xs'); // do not process $type values wich start with\n\n  if (element.hasOwnProperty('$type') && typeof element.$type === 'string') {\n    if (excluded.indexOf(element.$type.split(':')[0]) === -1) {\n      resolvedType += ('_' + element.$type + '#' + element.$name);\n    }\n  }\n\n  if (element.children.length > 0) {\n    let self = this;\n\n    element.children.forEach(function (child) {\n      let resolvedChildType = self._getNestedLookupTypeString(child).replace(/\\^_/, '');\n\n      if (resolvedChildType && typeof resolvedChildType === 'string') {\n        resolvedType += ('_' + resolvedChildType);\n      }\n    });\n  }\n\n  return resolvedType;\n};\n\nOperationElement.prototype.postProcess = function (definitions, tag) {\n  let children = this.children;\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child.name !== 'input' && child.name !== 'output')\n      continue;\n    if (tag === 'binding') {\n      this[child.name] = child;\n      children.splice(i--, 1);\n      continue;\n    }\n    let messageName = splitQName(child.$message).name;\n    let message = definitions.messages[messageName];\n    message.postProcess(definitions);\n    if (message.element) {\n      definitions.messages[message.element.$name] = message;\n      this[child.name] = message.element;\n    }\n    else {\n      this[child.name] = message;\n    }\n    children.splice(i--, 1);\n  }\n  this.deleteFixedAttrs();\n};\n\nPortTypeElement.prototype.postProcess = function (definitions) {\n  let children = this.children;\n  if (typeof children === 'undefined')\n    return;\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child.name !== 'operation')\n      continue;\n    child.postProcess(definitions, 'portType');\n    this.methods[child.$name] = child;\n    children.splice(i--, 1);\n  }\n  delete this.$name;\n  this.deleteFixedAttrs();\n};\n\nBindingElement.prototype.postProcess = function (definitions) {\n  let type = splitQName(this.$type).name,\n    portType = definitions.portTypes[type],\n    style = this.style,\n    children = this.children;\n  if (portType) {\n    portType.postProcess(definitions);\n    this.methods = portType.methods;\n\n    for (let i = 0, child; child = children[i]; i++) {\n      if (child.name !== 'operation')\n        continue;\n      child.postProcess(definitions, 'binding');\n      children.splice(i--, 1);\n      child.style || (child.style = style);\n      let method = this.methods[child.$name];\n\n      if (method) {\n        method.style = child.style;\n        method.soapAction = child.soapAction;\n        method.inputSoap = child.input || null;\n        method.outputSoap = child.output || null;\n        method.inputSoap && method.inputSoap.deleteFixedAttrs();\n        method.outputSoap && method.outputSoap.deleteFixedAttrs();\n      }\n    }\n  }\n  delete this.$name;\n  delete this.$type;\n  this.deleteFixedAttrs();\n};\n\nServiceElement.prototype.postProcess = function (definitions) {\n  let children = this.children,\n    bindings = definitions.bindings;\n  if (children && children.length > 0) {\n    for (let i = 0, child; child = children[i]; i++) {\n      if (child.name !== 'port')\n        continue;\n      let bindingName = splitQName(child.$binding).name;\n      let binding = bindings[bindingName];\n      if (binding) {\n        binding.postProcess(definitions);\n        this.ports[child.$name] = {\n          location: child.location,\n          binding: binding\n        };\n        children.splice(i--, 1);\n      }\n    }\n  }\n  delete this.$name;\n  this.deleteFixedAttrs();\n};\n\n\nSimpleTypeElement.prototype.description = function (definitions) {\n  let children = this.children;\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child instanceof RestrictionElement)\n      return this.$name + \"|\" + child.description();\n  }\n  return {};\n};\n\nRestrictionElement.prototype.description = function (definitions, xmlns) {\n  let children = this.children;\n  let desc;\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child instanceof SequenceElement ||\n      child instanceof ChoiceElement) {\n      desc = child.description(definitions, xmlns);\n      break;\n    }\n  }\n  if (desc && this.$base) {\n    let type = splitQName(this.$base),\n      typeName = type.name,\n      ns = xmlns && xmlns[type.prefix] || definitions.xmlns[type.prefix],\n      schema = definitions.schemas[ns],\n      typeElement = schema && (schema.complexTypes[typeName] || schema.types[typeName] || schema.elements[typeName]);\n\n    desc.getBase = function () {\n      return typeElement.description(definitions, schema.xmlns);\n    };\n    return desc;\n  }\n\n  // then simple element\n  let base = this.$base ? this.$base + \"|\" : \"\";\n  return base + this.children.map(function (child) {\n    return child.description();\n  }).join(\",\");\n};\n\nExtensionElement.prototype.description = function (definitions, xmlns) {\n  let children = this.children;\n  let desc = {};\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child instanceof SequenceElement ||\n      child instanceof ChoiceElement) {\n      desc = child.description(definitions, xmlns);\n    }\n  }\n  if (this.$base) {\n    let type = splitQName(this.$base),\n      typeName = type.name,\n      ns = xmlns && xmlns[type.prefix] || definitions.xmlns[type.prefix],\n      schema = definitions.schemas[ns];\n\n    if (typeName in Primitives) {\n      return this.$base;\n    }\n    else {\n      let typeElement = schema && (schema.complexTypes[typeName] ||\n        schema.types[typeName] || schema.elements[typeName]);\n\n      if (typeElement) {\n        let base = typeElement.description(definitions, schema.xmlns);\n        desc = _.defaultsDeep(base, desc);\n      }\n    }\n  }\n  return desc;\n};\n\nEnumerationElement.prototype.description = function () {\n  return this[this.valueKey];\n};\n\nComplexTypeElement.prototype.description = function (definitions, xmlns) {\n  let children = this.children || [];\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child instanceof ChoiceElement ||\n      child instanceof SequenceElement ||\n      child instanceof AllElement ||\n      child instanceof SimpleContentElement ||\n      child instanceof ComplexContentElement) {\n\n      return child.description(definitions, xmlns);\n    }\n  }\n  return {};\n};\n\nComplexContentElement.prototype.description = function (definitions, xmlns) {\n  let children = this.children;\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child instanceof ExtensionElement) {\n      return child.description(definitions, xmlns);\n    }\n  }\n  return {};\n};\n\nSimpleContentElement.prototype.description = function (definitions, xmlns) {\n  let children = this.children;\n  for (let i = 0, child; child = children[i]; i++) {\n    if (child instanceof ExtensionElement) {\n      return child.description(definitions, xmlns);\n    }\n  }\n  return {};\n};\n\nElementElement.prototype.description = function (definitions, xmlns) {\n  let element = {},\n    name = this.$name;\n  let isMany = !this.$maxOccurs ? false : (isNaN(this.$maxOccurs) ? (this.$maxOccurs === 'unbounded') : (this.$maxOccurs > 1));\n  if (this.$minOccurs !== this.$maxOccurs && isMany) {\n    name += '[]';\n  }\n\n  if (xmlns && xmlns[TNS_PREFIX]) {\n    this.$targetNamespace = xmlns[TNS_PREFIX];\n  }\n  let type = this.$type || this.$ref;\n  if (type) {\n    type = splitQName(type);\n    let typeName = type.name,\n      ns = xmlns && xmlns[type.prefix] || definitions.xmlns[type.prefix],\n      schema = definitions.schemas[ns],\n      typeElement = schema && (this.$type ? schema.complexTypes[typeName] || schema.types[typeName] : schema.elements[typeName]);\n\n    if (ns && definitions.schemas[ns]) {\n      xmlns = definitions.schemas[ns].xmlns;\n    }\n\n    if (typeElement && !(typeName in Primitives)) {\n\n      if (!(typeName in definitions.descriptions.types)) {\n\n        let elem: any = {};\n        definitions.descriptions.types[typeName] = elem;\n        let description = typeElement.description(definitions, xmlns);\n        if (typeof description === 'string') {\n          elem = description;\n        }\n        else {\n          Object.keys(description).forEach(function (key) {\n            elem[key] = description[key];\n          });\n        }\n\n        if (this.$ref) {\n          element = elem;\n        }\n        else {\n          element[name] = elem;\n        }\n\n        if (typeof elem === 'object') {\n          elem.targetNSAlias = type.prefix;\n          elem.targetNamespace = ns;\n        }\n\n        definitions.descriptions.types[typeName] = elem;\n      }\n      else {\n        if (this.$ref) {\n          element = definitions.descriptions.types[typeName];\n        }\n        else {\n          element[name] = definitions.descriptions.types[typeName];\n        }\n      }\n\n    }\n    else {\n      element[name] = this.$type;\n    }\n  }\n  else {\n    let children = this.children;\n    element[name] = {};\n    for (let i = 0, child; child = children[i]; i++) {\n      if (child instanceof ComplexTypeElement) {\n        element[name] = child.description(definitions, xmlns);\n      }\n    }\n  }\n  return element;\n};\n\nAllElement.prototype.description =\n  SequenceElement.prototype.description = function (definitions, xmlns) {\n    let children = this.children;\n    let sequence = {};\n    for (let i = 0, child; child = children[i]; i++) {\n      if (child instanceof AnyElement) {\n        continue;\n      }\n      let description = child.description(definitions, xmlns);\n      for (let key in description) {\n        sequence[key] = description[key];\n      }\n    }\n    return sequence;\n  };\n\nChoiceElement.prototype.description = function (definitions, xmlns) {\n  let children = this.children;\n  let choice = {};\n  for (let i = 0, child; child = children[i]; i++) {\n    let description = child.description(definitions, xmlns);\n    for (let key in description) {\n      choice[key] = description[key];\n    }\n  }\n  return choice;\n};\n\nMessageElement.prototype.description = function (definitions) {\n  if (this.element) {\n    return this.element && this.element.description(definitions);\n  }\n  let desc = {};\n  desc[this.$name] = this.parts;\n  return desc;\n};\n\nPortTypeElement.prototype.description = function (definitions) {\n  let methods = {};\n  for (let name in this.methods) {\n    let method = this.methods[name];\n    methods[name] = method.description(definitions);\n  }\n  return methods;\n};\n\nOperationElement.prototype.description = function (definitions) {\n  let inputDesc = this.input ? this.input.description(definitions) : null;\n  let outputDesc = this.output ? this.output.description(definitions) : null;\n  return {\n    input: inputDesc && inputDesc[Object.keys(inputDesc)[0]],\n    output: outputDesc && outputDesc[Object.keys(outputDesc)[0]]\n  };\n};\n\nBindingElement.prototype.description = function (definitions) {\n  let methods = {};\n  for (let name in this.methods) {\n    let method = this.methods[name];\n    methods[name] = method.description(definitions);\n  }\n  return methods;\n};\n\nServiceElement.prototype.description = function (definitions) {\n  let ports = {};\n  for (let name in this.ports) {\n    let port = this.ports[name];\n    ports[name] = port.binding.description(definitions);\n  }\n  return ports;\n};\n\nexport let WSDL = function (definition, uri, options) {\n  let self = this,\n    fromFunc;\n\n  this.uri = uri;\n  this.callback = function () {\n  };\n  this._includesWsdl = [];\n\n  // initialize WSDL cache\n  this.WSDL_CACHE = (options || {}).WSDL_CACHE || {};\n\n  this._initializeOptions(options);\n\n  if (typeof definition === 'string') {\n    definition = stripBom(definition);\n    fromFunc = this._fromXML;\n  }\n  else if (typeof definition === 'object') {\n    fromFunc = this._fromServices;\n  }\n  else {\n    throw new Error('WSDL letructor takes either an XML string or service definition');\n  }\n\n  Promise.resolve(true).then(() => {\n    try {\n      fromFunc.call(self, definition);\n    } catch (e) {\n      return self.callback(e.message);\n    }\n\n    self.processIncludes().then(() => {\n      self.definitions.deleteFixedAttrs();\n      let services = self.services = self.definitions.services;\n      if (services) {\n        for (const name in services) {\n          services[name].postProcess(self.definitions);\n        }\n      }\n      let complexTypes = self.definitions.complexTypes;\n      if (complexTypes) {\n        for (const name in complexTypes) {\n          complexTypes[name].deleteFixedAttrs();\n        }\n      }\n\n      // for document style, for every binding, prepare input message element name to (methodName, output message element name) mapping\n      let bindings = self.definitions.bindings;\n      for (let bindingName in bindings) {\n        let binding = bindings[bindingName];\n        if (typeof binding.style === 'undefined') {\n          binding.style = 'document';\n        }\n        if (binding.style !== 'document')\n          continue;\n        let methods = binding.methods;\n        let topEls = binding.topElements = {};\n        for (let methodName in methods) {\n          if (methods[methodName].input) {\n            let inputName = methods[methodName].input.$name;\n            let outputName = \"\";\n            if (methods[methodName].output)\n              outputName = methods[methodName].output.$name;\n            topEls[inputName] = { \"methodName\": methodName, \"outputName\": outputName };\n          }\n        }\n      }\n\n      // prepare soap envelope xmlns definition string\n      self.xmlnsInEnvelope = self._xmlnsMap();\n      self.callback(null, self);\n    }).catch(err => self.callback(err));\n\n  });\n\n  // process.nextTick(function() {\n  //   try {\n  //     fromFunc.call(self, definition);\n  //   } catch (e) {\n  //     return self.callback(e.message);\n  //   }\n\n  //   self.processIncludes(function(err) {\n  //     let name;\n  //     if (err) {\n  //       return self.callback(err);\n  //     }\n\n  //     self.definitions.deleteFixedAttrs();\n  //     let services = self.services = self.definitions.services;\n  //     if (services) {\n  //       for (name in services) {\n  //         services[name].postProcess(self.definitions);\n  //       }\n  //     }\n  //     let complexTypes = self.definitions.complexTypes;\n  //     if (complexTypes) {\n  //       for (name in complexTypes) {\n  //         complexTypes[name].deleteFixedAttrs();\n  //       }\n  //     }\n\n  //     // for document style, for every binding, prepare input message element name to (methodName, output message element name) mapping\n  //     let bindings = self.definitions.bindings;\n  //     for (let bindingName in bindings) {\n  //       let binding = bindings[bindingName];\n  //       if (typeof binding.style === 'undefined') {\n  //         binding.style = 'document';\n  //       }\n  //       if (binding.style !== 'document')\n  //         continue;\n  //       let methods = binding.methods;\n  //       let topEls = binding.topElements = {};\n  //       for (let methodName in methods) {\n  //         if (methods[methodName].input) {\n  //           let inputName = methods[methodName].input.$name;\n  //           let outputName=\"\";\n  //           if(methods[methodName].output )\n  //             outputName = methods[methodName].output.$name;\n  //           topEls[inputName] = {\"methodName\": methodName, \"outputName\": outputName};\n  //         }\n  //       }\n  //     }\n\n  //     // prepare soap envelope xmlns definition string\n  //     self.xmlnsInEnvelope = self._xmlnsMap();\n\n  //     self.callback(err, self);\n  //   });\n\n  // });\n};\n\nWSDL.prototype.ignoredNamespaces = ['tns', 'targetNamespace', 'typedNamespace'];\n\nWSDL.prototype.ignoreBaseNameSpaces = false;\n\nWSDL.prototype.valueKey = '$value';\nWSDL.prototype.xmlKey = '$xml';\n\nWSDL.prototype._initializeOptions = function (options) {\n  this._originalIgnoredNamespaces = (options || {}).ignoredNamespaces;\n  this.options = {};\n\n  let ignoredNamespaces = options ? options.ignoredNamespaces : null;\n\n  if (ignoredNamespaces &&\n    (Array.isArray(ignoredNamespaces.namespaces) || typeof ignoredNamespaces.namespaces === 'string')) {\n    if (ignoredNamespaces.override) {\n      this.options.ignoredNamespaces = ignoredNamespaces.namespaces;\n    } else {\n      this.options.ignoredNamespaces = this.ignoredNamespaces.concat(ignoredNamespaces.namespaces);\n    }\n  } else {\n    this.options.ignoredNamespaces = this.ignoredNamespaces;\n  }\n\n  this.options.valueKey = options.valueKey || this.valueKey;\n  this.options.xmlKey = options.xmlKey || this.xmlKey;\n  if (options.escapeXML !== undefined) {\n    this.options.escapeXML = options.escapeXML;\n  } else {\n    this.options.escapeXML = true;\n  }\n  if (options.returnFault !== undefined) {\n    this.options.returnFault = options.returnFault;\n  } else {\n    this.options.returnFault = false;\n  }\n  this.options.handleNilAsNull = !!options.handleNilAsNull;\n\n  if (options.namespaceArrayElements !== undefined) {\n    this.options.namespaceArrayElements = options.namespaceArrayElements;\n  } else {\n    this.options.namespaceArrayElements = true;\n  }\n\n  // Allow any request headers to keep passing through\n  this.options.wsdl_headers = options.wsdl_headers;\n  this.options.wsdl_options = options.wsdl_options;\n  if (options.httpClient) {\n    this.options.httpClient = options.httpClient;\n  }\n\n  // The supplied request-object should be passed through\n  if (options.request) {\n    this.options.request = options.request;\n  }\n\n  let ignoreBaseNameSpaces = options ? options.ignoreBaseNameSpaces : null;\n  if (ignoreBaseNameSpaces !== null && typeof ignoreBaseNameSpaces !== 'undefined') {\n    this.options.ignoreBaseNameSpaces = ignoreBaseNameSpaces;\n  } else {\n    this.options.ignoreBaseNameSpaces = this.ignoreBaseNameSpaces;\n  }\n\n  // Works only in client\n  this.options.forceSoap12Headers = options.forceSoap12Headers;\n  this.options.customDeserializer = options.customDeserializer;\n\n  if (options.overrideRootElement !== undefined) {\n    this.options.overrideRootElement = options.overrideRootElement;\n  }\n\n  this.options.useEmptyTag = !!options.useEmptyTag;\n};\n\nWSDL.prototype.onReady = function (callback) {\n  if (callback)\n    this.callback = callback;\n};\n\nWSDL.prototype._processNextInclude = async function (includes) {\n  let self = this,\n    include = includes.shift(),\n    options;\n\n  if (!include)\n    return; // callback();\n\n  let includePath;\n  if (!/^https?:/.test(self.uri) && !/^https?:/.test(include.location)) {\n    // includePath = path.resolve(path.dirname(self.uri), include.location);\n  } else {\n    includePath = url.resolve(self.uri || '', include.location);\n  }\n\n  options = _.assign({}, this.options);\n  // follow supplied ignoredNamespaces option\n  options.ignoredNamespaces = this._originalIgnoredNamespaces || this.options.ignoredNamespaces;\n  options.WSDL_CACHE = this.WSDL_CACHE;\n\n  const wsdl = await open_wsdl_recursive(includePath, options)\n  self._includesWsdl.push(wsdl);\n\n  if (wsdl.definitions instanceof DefinitionsElement) {\n    _.mergeWith(self.definitions, wsdl.definitions, function (a, b) {\n      return (a instanceof SchemaElement) ? a.merge(b) : undefined;\n    });\n  } else {\n    self.definitions.schemas[include.namespace || wsdl.definitions.$targetNamespace] = deepMerge(self.definitions.schemas[include.namespace || wsdl.definitions.$targetNamespace], wsdl.definitions);\n  }\n\n  return self._processNextInclude(includes);\n\n  // open_wsdl_recursive(includePath, options, function(err, wsdl) {\n  //   if (err) {\n  //     return callback(err);\n  //   }\n\n  //   self._includesWsdl.push(wsdl);\n\n  //   if (wsdl.definitions instanceof DefinitionsElement) {\n  //     _.mergeWith(self.definitions, wsdl.definitions, function(a,b) {\n  //       return (a instanceof SchemaElement) ? a.merge(b) : undefined;\n  //     });\n  //   } else {\n  //     self.definitions.schemas[include.namespace || wsdl.definitions.$targetNamespace] = deepMerge(self.definitions.schemas[include.namespace || wsdl.definitions.$targetNamespace], wsdl.definitions);\n  //   }\n  //   self._processNextInclude(includes, function(err) {\n  //     callback(err);\n  //   });\n  // });\n};\n\nWSDL.prototype.processIncludes = async function () {\n  let schemas = this.definitions.schemas,\n    includes = [];\n\n  for (let ns in schemas) {\n    let schema = schemas[ns];\n    includes = includes.concat(schema.includes || []);\n  }\n\n  return this._processNextInclude(includes);\n};\n\nWSDL.prototype.describeServices = function () {\n  let services = {};\n  for (let name in this.services) {\n    let service = this.services[name];\n    services[name] = service.description(this.definitions);\n  }\n  return services;\n};\n\nWSDL.prototype.toXML = function () {\n  return this.xml || '';\n};\n\nWSDL.prototype.xmlToObject = function (xml, callback) {\n  let self = this;\n  let p = typeof callback === 'function' ? {} : sax.parser(true);\n  let objectName = null;\n  let root: any = {};\n  let schema = {\n    Envelope: {\n      Header: {\n        Security: {\n          UsernameToken: {\n            Username: 'string',\n            Password: 'string'\n          }\n        }\n      },\n      Body: {\n        Fault: {\n          faultcode: 'string',\n          faultstring: 'string',\n          detail: 'string'\n        }\n      }\n    }\n  };\n  let stack: any[] = [{ name: null, object: root, schema: schema }];\n  let xmlns: any = {};\n\n  let refs = {}, id; // {id:{hrefs:[],obj:}, ...}\n\n  p.onopentag = function (node) {\n    let nsName = node.name;\n    let attrs: any = node.attributes;\n    let name = splitQName(nsName).name,\n      attributeName,\n      top = stack[stack.length - 1],\n      topSchema = top.schema,\n      elementAttributes = {},\n      hasNonXmlnsAttribute = false,\n      hasNilAttribute = false,\n      obj = {};\n    let originalName = name;\n\n    if (!objectName && top.name === 'Body' && name !== 'Fault') {\n      let message = self.definitions.messages[name];\n      // Support RPC/literal messages where response body contains one element named\n      // after the operation + 'Response'. See http://www.w3.org/TR/wsdl#_names\n      if (!message) {\n        try {\n          // Determine if this is request or response\n          let isInput = false;\n          let isOutput = false;\n          if ((/Response$/).test(name)) {\n            isOutput = true;\n            name = name.replace(/Response$/, '');\n          } else if ((/Request$/).test(name)) {\n            isInput = true;\n            name = name.replace(/Request$/, '');\n          } else if ((/Solicit$/).test(name)) {\n            isInput = true;\n            name = name.replace(/Solicit$/, '');\n          }\n          // Look up the appropriate message as given in the portType's operations\n          let portTypes = self.definitions.portTypes;\n          let portTypeNames = Object.keys(portTypes);\n          // Currently this supports only one portType definition.\n          let portType = portTypes[portTypeNames[0]];\n          if (isInput) {\n            name = portType.methods[name].input.$name;\n          } else {\n            name = portType.methods[name].output.$name;\n          }\n          message = self.definitions.messages[name];\n          // 'cache' this alias to speed future lookups\n          self.definitions.messages[originalName] = self.definitions.messages[name];\n        } catch (e) {\n          if (self.options.returnFault) {\n            p.onerror(e);\n          }\n        }\n      }\n\n      topSchema = message.description(self.definitions);\n      objectName = originalName;\n    }\n\n    if (attrs.href) {\n      id = attrs.href.substr(1);\n      if (!refs[id]) {\n        refs[id] = { hrefs: [], obj: null };\n      }\n      refs[id].hrefs.push({ par: top.object, key: name, obj: obj });\n    }\n    if (id = attrs.id) {\n      if (!refs[id]) {\n        refs[id] = { hrefs: [], obj: null };\n      }\n    }\n\n    //Handle element attributes\n    for (attributeName in attrs) {\n      if (/^xmlns:|^xmlns$/.test(attributeName)) {\n        xmlns[splitQName(attributeName).name] = attrs[attributeName];\n        continue;\n      }\n      hasNonXmlnsAttribute = true;\n      elementAttributes[attributeName] = attrs[attributeName];\n    }\n\n    for (attributeName in elementAttributes) {\n      let res = splitQName(attributeName);\n      if (res.name === 'nil' && xmlns[res.prefix] === 'http://www.w3.org/2001/XMLSchema-instance' && elementAttributes[attributeName] &&\n        (elementAttributes[attributeName].toLowerCase() === 'true' || elementAttributes[attributeName] === '1')\n      ) {\n        hasNilAttribute = true;\n        break;\n      }\n    }\n\n    if (hasNonXmlnsAttribute) {\n      obj[self.options.attributesKey] = elementAttributes;\n    }\n\n    // Pick up the schema for the type specified in element's xsi:type attribute.\n    let xsiTypeSchema;\n    let xsiType = elementAttributes['xsi:type'];\n    if (xsiType) {\n      let type = splitQName(xsiType);\n      let typeURI;\n      if (type.prefix === TNS_PREFIX) {\n        // In case of xsi:type = \"MyType\"\n        typeURI = xmlns[type.prefix] || xmlns.xmlns;\n      } else {\n        typeURI = xmlns[type.prefix];\n      }\n      let typeDef = self.findSchemaObject(typeURI, type.name);\n      if (typeDef) {\n        xsiTypeSchema = typeDef.description(self.definitions);\n      }\n    }\n\n    if (topSchema && topSchema[name + '[]']) {\n      name = name + '[]';\n    }\n    stack.push({\n      name: originalName,\n      object: obj,\n      schema: (xsiTypeSchema || (topSchema && topSchema[name])),\n      id: attrs.id,\n      nil: hasNilAttribute\n    });\n  };\n\n  p.onclosetag = function (nsName) {\n    let cur: any = stack.pop(),\n      obj = cur.object,\n      top = stack[stack.length - 1],\n      topObject = top.object,\n      topSchema = top.schema,\n      name = splitQName(nsName).name;\n\n    if (typeof cur.schema === 'string' && (cur.schema === 'string' || (<string>cur.schema).split(':')[1] === 'string')) {\n      if (typeof obj === 'object' && Object.keys(obj).length === 0) obj = cur.object = '';\n    }\n\n    if (cur.nil === true) {\n      if (self.options.handleNilAsNull) {\n        obj = null;\n      } else {\n        return;\n      }\n    }\n\n    if (_.isPlainObject(obj) && !Object.keys(obj).length) {\n      obj = null;\n    }\n\n    if (topSchema && topSchema[name + '[]']) {\n      if (!topObject[name]) {\n        topObject[name] = [];\n      }\n      topObject[name].push(obj);\n    } else if (name in topObject) {\n      if (!Array.isArray(topObject[name])) {\n        topObject[name] = [topObject[name]];\n      }\n      topObject[name].push(obj);\n    } else {\n      topObject[name] = obj;\n    }\n\n    if (cur.id) {\n      refs[cur.id].obj = obj;\n    }\n  };\n\n  p.oncdata = function (text) {\n    let originalText = text;\n    text = trim(text);\n    if (!text.length) {\n      return;\n    }\n\n    if (/<\\?xml[\\s\\S]+\\?>/.test(text)) {\n      let top = stack[stack.length - 1];\n      let value = self.xmlToObject(text);\n      if (top.object[self.options.attributesKey]) {\n        top.object[self.options.valueKey] = value;\n      } else {\n        top.object = value;\n      }\n    } else {\n      p.ontext(originalText);\n    }\n  };\n\n  p.onerror = function (e) {\n    p.resume();\n    throw {\n      Fault: {\n        faultcode: 500,\n        faultstring: 'Invalid XML',\n        detail: new Error(e).message,\n        statusCode: 500\n      }\n    };\n  };\n\n  p.ontext = function (text) {\n    let originalText = text;\n    text = trim(text);\n    if (!text.length) {\n      return;\n    }\n\n    let top = stack[stack.length - 1];\n    let name = splitQName(top.schema).name,\n      value;\n    if (self.options && self.options.customDeserializer && self.options.customDeserializer[name]) {\n      value = self.options.customDeserializer[name](text, top);\n    }\n    else {\n      if (name === 'int' || name === 'integer') {\n        value = parseInt(text, 10);\n      } else if (name === 'bool' || name === 'boolean') {\n        value = text.toLowerCase() === 'true' || text === '1';\n      } else if (name === 'dateTime' || name === 'date') {\n        value = new Date(text);\n      } else {\n        if (self.options.preserveWhitespace) {\n          text = originalText;\n        }\n        // handle string or other types\n        if (typeof top.object !== 'string') {\n          value = text;\n        } else {\n          value = top.object + text;\n        }\n      }\n    }\n\n    if (top.object[self.options.attributesKey]) {\n      top.object[self.options.valueKey] = value;\n    } else {\n      top.object = value;\n    }\n  };\n\n  if (typeof callback === 'function') {\n    // we be streaming\n    let saxStream = sax.createStream(true);\n    saxStream.on('opentag', p.onopentag);\n    saxStream.on('closetag', p.onclosetag);\n    saxStream.on('cdata', p.oncdata);\n    saxStream.on('text', p.ontext);\n    xml.pipe(saxStream)\n      .on('error', function (err) {\n        callback(err);\n      })\n      .on('end', function () {\n        let r;\n        try {\n          r = finish();\n        } catch (e) {\n          return callback(e);\n        }\n        callback(null, r);\n      });\n    return;\n  }\n  p.write(xml).close();\n\n  return finish();\n\n  function finish() {\n    // MultiRef support: merge objects instead of replacing\n    for (let n in refs) {\n      let ref = refs[n];\n      for (let i = 0; i < ref.hrefs.length; i++) {\n        _.assign(ref.hrefs[i].obj, ref.obj);\n      }\n    }\n\n    if (root.Envelope) {\n      let body = root.Envelope.Body;\n      if (body && body.Fault) {\n        let code = body.Fault.faultcode && body.Fault.faultcode.$value;\n        let string = body.Fault.faultstring && body.Fault.faultstring.$value;\n        let detail = body.Fault.detail && body.Fault.detail.$value;\n\n        code = code || body.Fault.faultcode;\n        string = string || body.Fault.faultstring;\n        detail = detail || body.Fault.detail;\n\n        let error: any = new Error(code + ': ' + string + (detail ? ': ' + detail : ''));\n\n        error.root = root;\n        throw error;\n      }\n      return root.Envelope;\n    }\n    return root;\n  }\n};\n\n/**\n * Look up a XSD type or element by namespace URI and name\n * @param {String} nsURI Namespace URI\n * @param {String} qname Local or qualified name\n * @returns {*} The XSD type/element definition\n */\nWSDL.prototype.findSchemaObject = function (nsURI, qname) {\n  if (!nsURI || !qname) {\n    return null;\n  }\n\n  let def = null;\n\n  if (this.definitions.schemas) {\n    let schema = this.definitions.schemas[nsURI];\n    if (schema) {\n      if (qname.indexOf(':') !== -1) {\n        qname = qname.substring(qname.indexOf(':') + 1, qname.length);\n      }\n\n      // if the client passed an input element which has a `$lookupType` property instead of `$type`\n      // the `def` is found in `schema.elements`.\n      def = schema.complexTypes[qname] || schema.types[qname] || schema.elements[qname];\n    }\n  }\n\n  return def;\n};\n\n/**\n * Create document style xml string from the parameters\n * @param {String} name\n * @param {*} params\n * @param {String} nsPrefix\n * @param {String} nsURI\n * @param {String} type\n */\nWSDL.prototype.objectToDocumentXML = function (name, params, nsPrefix, nsURI, type) {\n  //If user supplies XML already, just use that.  XML Declaration should not be present.\n  if (params && params._xml) {\n    return params._xml;\n  }\n  let args = {};\n  args[name] = params;\n  let parameterTypeObj = type ? this.findSchemaObject(nsURI, type) : null;\n  return this.objectToXML(args, null, nsPrefix, nsURI, true, null, parameterTypeObj);\n};\n\n/**\n * Create RPC style xml string from the parameters\n * @param {String} name\n * @param {*} params\n * @param {String} nsPrefix\n * @param {String} nsURI\n * @returns {string}\n */\nWSDL.prototype.objectToRpcXML = function (name, params, nsPrefix, nsURI, isParts) {\n  let parts = [];\n  let defs = this.definitions;\n  let nsAttrName = '_xmlns';\n\n  nsPrefix = nsPrefix || findPrefix(defs.xmlns, nsURI);\n\n  nsURI = nsURI || defs.xmlns[nsPrefix];\n  nsPrefix = nsPrefix === TNS_PREFIX ? '' : (nsPrefix + ':');\n\n  parts.push(['<', nsPrefix, name, '>'].join(''));\n\n  for (let key in params) {\n    if (!params.hasOwnProperty(key)) {\n      continue;\n    }\n    if (key !== nsAttrName) {\n      let value = params[key];\n      let prefixedKey = (isParts ? '' : nsPrefix) + key;\n      let attributes = [];\n      if (typeof value === 'object' && value.hasOwnProperty(this.options.attributesKey)) {\n        let attrs = value[this.options.attributesKey];\n        for (let n in attrs) {\n          attributes.push(' ' + n + '=' + '\"' + attrs[n] + '\"');\n        }\n      }\n      parts.push(['<', prefixedKey].concat(attributes).concat('>').join(''));\n      parts.push((typeof value === 'object') ? this.objectToXML(value, key, nsPrefix, nsURI) : xmlEscape(value));\n      parts.push(['</', prefixedKey, '>'].join(''));\n    }\n  }\n  parts.push(['</', nsPrefix, name, '>'].join(''));\n  return parts.join('');\n};\n\n\nfunction appendColon(ns) {\n  return (ns && ns.charAt(ns.length - 1) !== ':') ? ns + ':' : ns;\n}\n\nfunction noColonNameSpace(ns) {\n  return (ns && ns.charAt(ns.length - 1) === ':') ? ns.substring(0, ns.length - 1) : ns;\n}\n\nWSDL.prototype.isIgnoredNameSpace = function (ns) {\n  return this.options.ignoredNamespaces.indexOf(ns) > -1;\n};\n\nWSDL.prototype.filterOutIgnoredNameSpace = function (ns) {\n  let namespace = noColonNameSpace(ns);\n  return this.isIgnoredNameSpace(namespace) ? '' : namespace;\n};\n\n\n\n/**\n * Convert an object to XML.  This is a recursive method as it calls itself.\n *\n * @param {Object} obj the object to convert.\n * @param {String} name the name of the element (if the object being traversed is\n * an element).\n * @param {String} nsPrefix the namespace prefix of the object I.E. xsd.\n * @param {String} nsURI the full namespace of the object I.E. http://w3.org/schema.\n * @param {Boolean} isFirst whether or not this is the first item being traversed.\n * @param {?} xmlnsAttr\n * @param {?} parameterTypeObject\n * @param {NamespaceContext} nsContext Namespace context\n */\nWSDL.prototype.objectToXML = function (obj, name, nsPrefix, nsURI, isFirst, xmlnsAttr, schemaObject, nsContext) {\n  const schema = this.definitions.schemas[nsURI];\n\n  let parentNsPrefix = nsPrefix ? nsPrefix.parent : undefined;\n  if (typeof parentNsPrefix !== 'undefined') {\n    // we got the parentNsPrefix for our array. setting the namespace-variable back to the current namespace string\n    nsPrefix = nsPrefix.current;\n  }\n\n  parentNsPrefix = noColonNameSpace(parentNsPrefix);\n  if (this.isIgnoredNameSpace(parentNsPrefix)) {\n    parentNsPrefix = '';\n  }\n\n  const soapHeader = !schema;\n  const qualified = schema && schema.$elementFormDefault === 'qualified';\n  const parts = [];\n  const prefixNamespace = (nsPrefix || qualified) && nsPrefix !== TNS_PREFIX;\n\n  let xmlnsAttrib = '';\n  if (nsURI && isFirst) {\n    if (this.options.overrideRootElement && this.options.overrideRootElement.xmlnsAttributes) {\n      this.options.overrideRootElement.xmlnsAttributes.forEach((attribute) => {\n        xmlnsAttrib += ' ' + attribute.name + '=\"' + attribute.value + '\"';\n      });\n    } else {\n      if (prefixNamespace && !this.isIgnoredNameSpace(nsPrefix)) {\n        // resolve the prefix namespace\n        xmlnsAttrib += ' xmlns:' + nsPrefix + '=\"' + nsURI + '\"';\n      }\n      // only add default namespace if the schema elementFormDefault is qualified\n      if (qualified || soapHeader) { xmlnsAttrib += ' xmlns=\"' + nsURI + '\"'; }\n    }\n  }\n\n  if (!nsContext) {\n    nsContext = new NamespaceContext();\n    nsContext.declareNamespace(nsPrefix, nsURI);\n  } else {\n    nsContext.pushContext();\n  }\n\n  // explicitly use xmlns attribute if available\n  if (xmlnsAttr && !(this.options.overrideRootElement && this.options.overrideRootElement.xmlnsAttributes)) {\n    xmlnsAttrib = xmlnsAttr;\n  }\n\n  let ns = '';\n\n  if (this.options.overrideRootElement && isFirst) {\n    ns = this.options.overrideRootElement.namespace;\n  } else if (prefixNamespace && (qualified || isFirst || soapHeader) && !this.isIgnoredNameSpace(nsPrefix)) {\n    ns = nsPrefix;\n  }\n\n  let i;\n  let n;\n  // start building out XML string.\n  if (Array.isArray(obj)) {\n    let nonSubNameSpace = '';\n    let emptyNonSubNameSpaceForArray = false;\n    const nameWithNsRegex = /^([^:]+):([^:]+)$/.exec(name);\n    if (nameWithNsRegex) {\n      nonSubNameSpace = nameWithNsRegex[1];\n      name = nameWithNsRegex[2];\n    } else if (name[0] === ':') {\n      emptyNonSubNameSpaceForArray = true;\n      name = name.substr(1);\n    }\n\n    for (i = 0, n = obj.length; i < n; i++) {\n      const item = obj[i];\n      const arrayAttr = this.processAttributes(item, nsContext);\n      const correctOuterNsPrefix = nonSubNameSpace || parentNsPrefix || ns; // using the parent namespace prefix if given\n\n      const body = this.objectToXML(item, name, nsPrefix, nsURI, false, null, schemaObject, nsContext);\n\n      let openingTagParts = ['<', name, arrayAttr, xmlnsAttrib];\n      if (!emptyNonSubNameSpaceForArray) {\n        openingTagParts = ['<', appendColon(correctOuterNsPrefix), name, arrayAttr, xmlnsAttrib];\n      }\n\n      if (body === '' && this.options.useEmptyTag) {\n        // Use empty (self-closing) tags if no contents\n        openingTagParts.push(' />');\n        parts.push(openingTagParts.join(''));\n      } else {\n        openingTagParts.push('>');\n        if (this.options.namespaceArrayElements || i === 0) {\n          parts.push(openingTagParts.join(''));\n        }\n        parts.push(body);\n        if (this.options.namespaceArrayElements || i === n - 1) {\n          if (emptyNonSubNameSpaceForArray) {\n            parts.push(['</', name, '>'].join(''));\n          } else {\n            parts.push(['</', appendColon(correctOuterNsPrefix), name, '>'].join(''));\n          }\n        }\n      }\n    }\n  } else if (typeof obj === 'object') {\n    for (name in obj) {\n      if (!obj.hasOwnProperty(name)) { continue; }\n      // don't process attributes as element\n      if (name === this.options.attributesKey) {\n        continue;\n      }\n      // Its the value of a xml object. Return it directly.\n      if (name === this.options.xmlKey) {\n        nsContext.popContext();\n        return obj[name];\n      }\n      // Its the value of an item. Return it directly.\n      if (name === this.options.valueKey) {\n        nsContext.popContext();\n        return xmlEscape(obj[name]);\n      }\n\n      const child = obj[name];\n      if (typeof child === 'undefined') {\n        continue;\n      }\n\n      const attr = this.processAttributes(child, nsContext);\n\n      let value = '';\n      let nonSubNameSpace = '';\n      let emptyNonSubNameSpace = false;\n\n      const nameWithNsRegex = /^([^:]+):([^:]+)$/.exec(name);\n      if (nameWithNsRegex) {\n        nonSubNameSpace = nameWithNsRegex[1] + ':';\n        name = nameWithNsRegex[2];\n      } else if (name[0] === ':') {\n        emptyNonSubNameSpace = true;\n        name = name.substr(1);\n      }\n\n      if (isFirst) {\n        value = this.objectToXML(child, name, nsPrefix, nsURI, false, null, schemaObject, nsContext);\n      } else {\n\n        if (this.definitions.schemas) {\n          if (schema) {\n            const childSchemaObject = this.findChildSchemaObject(schemaObject, name);\n            // find sub namespace if not a primitive\n            if (childSchemaObject &&\n                ((childSchemaObject.$type && (childSchemaObject.$type.indexOf('xsd:') === -1)) ||\n                    childSchemaObject.$ref || childSchemaObject.$name)) {\n              /*if the base name space of the children is not in the ingoredSchemaNamspaces we use it.\n               This is because in some services the child nodes do not need the baseNameSpace.\n               */\n\n              let childNsPrefix: any = '';\n              let childName = '';\n              let childNsURI;\n              let childXmlnsAttrib = '';\n\n              let elementQName = childSchemaObject.$ref || childSchemaObject.$name;\n              if (elementQName) {\n                elementQName = splitQName(elementQName);\n                childName = elementQName.name;\n                if (elementQName.prefix === TNS_PREFIX) {\n                  // Local element\n                  childNsURI = childSchemaObject.$targetNamespace;\n                  childNsPrefix = nsContext.registerNamespace(childNsURI);\n                  if (this.isIgnoredNameSpace(childNsPrefix)) {\n                    childNsPrefix = nsPrefix;\n                  }\n                } else {\n                  childNsPrefix = elementQName.prefix;\n                  if (this.isIgnoredNameSpace(childNsPrefix)) {\n                    childNsPrefix = nsPrefix;\n                  }\n                  childNsURI = schema.xmlns[childNsPrefix] || this.definitions.xmlns[childNsPrefix];\n                }\n\n                let unqualified = false;\n                // Check qualification form for local elements\n                if (childSchemaObject.$name && childSchemaObject.targetNamespace === undefined) {\n                  if (childSchemaObject.$form === 'unqualified') {\n                    unqualified = true;\n                  } else if (childSchemaObject.$form === 'qualified') {\n                    unqualified = false;\n                  } else {\n                    unqualified = schema.$elementFormDefault !== 'qualified';\n                  }\n                }\n                if (unqualified) {\n                  childNsPrefix = '';\n                }\n\n                if (childNsURI && childNsPrefix) {\n                  if (nsContext.declareNamespace(childNsPrefix, childNsURI)) {\n                    childXmlnsAttrib = ' xmlns:' + childNsPrefix + '=\"' + childNsURI + '\"';\n                    xmlnsAttrib += childXmlnsAttrib;\n                  }\n                }\n              }\n\n              let resolvedChildSchemaObject;\n              if (childSchemaObject.$type) {\n                const typeQName = splitQName(childSchemaObject.$type);\n                const typePrefix = typeQName.prefix;\n                const typeURI = schema.xmlns[typePrefix] || this.definitions.xmlns[typePrefix];\n                childNsURI = typeURI;\n                if (typeURI !== 'http://www.w3.org/2001/XMLSchema' && typePrefix !== TNS_PREFIX) {\n                  // Add the prefix/namespace mapping, but not declare it\n                  nsContext.addNamespace(typePrefix, typeURI);\n                }\n                resolvedChildSchemaObject =\n                    this.findSchemaType(typeQName.name, typeURI) || childSchemaObject;\n              } else {\n                resolvedChildSchemaObject =\n                    this.findSchemaObject(childNsURI, childName) || childSchemaObject;\n              }\n\n              if (childSchemaObject.$baseNameSpace && this.options.ignoreBaseNameSpaces) {\n                childNsPrefix = nsPrefix;\n                childNsURI = nsURI;\n              }\n\n              if (this.options.ignoreBaseNameSpaces) {\n                childNsPrefix = '';\n                childNsURI = '';\n              }\n\n              ns = childNsPrefix;\n\n              if (Array.isArray(child)) {\n                // for arrays, we need to remember the current namespace\n                childNsPrefix = {\n                  current: childNsPrefix,\n                  parent: ns,\n                };\n              } else {\n                // parent (array) already got the namespace\n                childXmlnsAttrib = null;\n              }\n\n              value = this.objectToXML(child, name, childNsPrefix, childNsURI,\n                  false, childXmlnsAttrib, resolvedChildSchemaObject, nsContext);\n            } else if (obj[this.options.attributesKey] && obj[this.options.attributesKey].xsi_type) {\n              // if parent object has complex type defined and child not found in parent\n              const completeChildParamTypeObject = this.findChildSchemaObject(\n                  obj[this.options.attributesKey].xsi_type.type,\n                  obj[this.options.attributesKey].xsi_type.xmlns);\n\n              nonSubNameSpace = obj[this.options.attributesKey].xsi_type.prefix;\n              nsContext.addNamespace(obj[this.options.attributesKey].xsi_type.prefix,\n                  obj[this.options.attributesKey].xsi_type.xmlns);\n              value = this.objectToXML(child, name, obj[this.options.attributesKey].xsi_type.prefix,\n                  obj[this.options.attributesKey].xsi_type.xmlns, false, null, null, nsContext);\n            } else {\n              if (Array.isArray(child)) {\n                if (emptyNonSubNameSpace) {\n                  name = ':' + name;\n                } else {\n                  name = nonSubNameSpace + name;\n                }\n              }\n\n              value = this.objectToXML(child, name, nonSubNameSpace || nsPrefix, nsURI, false, null, null, nsContext);\n            }\n          } else {\n            value = this.objectToXML(child, name, nonSubNameSpace || nsPrefix, nsURI, false, null, null, nsContext);\n          }\n        }\n      }\n\n      ns = noColonNameSpace(ns);\n      if (prefixNamespace && !qualified && isFirst && !this.options.overrideRootElement) {\n        ns = nsPrefix;\n      } else if (this.isIgnoredNameSpace(ns)) {\n        ns = '';\n      }\n\n      const useEmptyTag = !value && this.options.useEmptyTag;\n      if (!Array.isArray(child)) {\n        // start tag\n        parts.push(['<', emptyNonSubNameSpace ? '' : appendColon(nonSubNameSpace || ns), name, attr, xmlnsAttrib,\n          (child === null ? ' xsi:nil=\"true\"' : ''),\n          useEmptyTag ? ' />' : '>',\n        ].join(''));\n      }\n\n      if (!useEmptyTag) {\n        parts.push(value);\n        if (!Array.isArray(child)) {\n          // end tag\n          parts.push(['</', emptyNonSubNameSpace ? '' : appendColon(nonSubNameSpace || ns), name, '>'].join(''));\n        }\n      }\n    }\n  } else if (obj !== undefined) {\n    parts.push((this.options.escapeXML) ? xmlEscape(obj) : obj);\n  }\n  nsContext.popContext();\n  return parts.join('');\n};\n\nWSDL.prototype.processAttributes = function (child, nsContext) {\n  let attr = '';\n\n  if (child === null) {\n    child = [];\n  }\n\n  let attrObj = child[this.options.attributesKey];\n  if (attrObj && attrObj.xsi_type) {\n    let xsiType = attrObj.xsi_type;\n\n    let prefix = xsiType.prefix || xsiType.namespace;\n    // Generate a new namespace for complex extension if one not provided\n    if (!prefix) {\n      prefix = nsContext.registerNamespace(xsiType.xmlns);\n    } else {\n      nsContext.declareNamespace(prefix, xsiType.xmlns);\n    }\n    xsiType.prefix = prefix;\n  }\n\n\n  if (attrObj) {\n    for (let attrKey in attrObj) {\n      //handle complex extension separately\n      if (attrKey === 'xsi_type') {\n        let attrValue = attrObj[attrKey];\n        attr += ' xsi:type=\"' + attrValue.prefix + ':' + attrValue.type + '\"';\n        attr += ' xmlns:' + attrValue.prefix + '=\"' + attrValue.xmlns + '\"';\n\n        continue;\n      } else {\n        attr += ' ' + attrKey + '=\"' + xmlEscape(attrObj[attrKey]) + '\"';\n      }\n    }\n  }\n\n  return attr;\n};\n\n/**\n * Look up a schema type definition\n * @param name\n * @param nsURI\n * @returns {*}\n */\nWSDL.prototype.findSchemaType = function (name, nsURI) {\n  if (!this.definitions.schemas || !name || !nsURI) {\n    return null;\n  }\n\n  let schema = this.definitions.schemas[nsURI];\n  if (!schema || !schema.complexTypes) {\n    return null;\n  }\n\n  return schema.complexTypes[name];\n};\n\nWSDL.prototype.findChildSchemaObject = function (parameterTypeObj, childName, backtrace) {\n  if (!parameterTypeObj || !childName) {\n    return null;\n  }\n\n  if (!backtrace) {\n    backtrace = [];\n  }\n\n  if (backtrace.indexOf(parameterTypeObj) >= 0) {\n    // We've recursed back to ourselves; break.\n    return null;\n  } else {\n    backtrace = backtrace.concat([parameterTypeObj]);\n  }\n\n  let found = null,\n    i = 0,\n    child,\n    ref;\n\n  if (Array.isArray(parameterTypeObj.$lookupTypes) && parameterTypeObj.$lookupTypes.length) {\n    let types = parameterTypeObj.$lookupTypes;\n\n    for (i = 0; i < types.length; i++) {\n      let typeObj = types[i];\n\n      if (typeObj.$name === childName) {\n        found = typeObj;\n        break;\n      }\n    }\n  }\n\n  let object = parameterTypeObj;\n  if (object.$name === childName && object.name === 'element') {\n    return object;\n  }\n  if (object.$ref) {\n    ref = splitQName(object.$ref);\n    if (ref.name === childName) {\n      return object;\n    }\n  }\n\n  let childNsURI;\n\n  // want to avoid unecessary recursion to improve performance\n  if (object.$type && backtrace.length === 1) {\n    let typeInfo = splitQName(object.$type);\n    if (typeInfo.prefix === TNS_PREFIX) {\n      childNsURI = parameterTypeObj.$targetNamespace;\n    } else {\n      childNsURI = this.definitions.xmlns[typeInfo.prefix];\n    }\n    let typeDef = this.findSchemaType(typeInfo.name, childNsURI);\n    if (typeDef) {\n      return this.findChildSchemaObject(typeDef, childName, backtrace);\n    }\n  }\n\n  if (object.children) {\n    for (i = 0, child; child = object.children[i]; i++) {\n      found = this.findChildSchemaObject(child, childName, backtrace);\n      if (found) {\n        break;\n      }\n\n      if (child.$base) {\n        let baseQName = splitQName(child.$base);\n        let childNameSpace = baseQName.prefix === TNS_PREFIX ? '' : baseQName.prefix;\n        childNsURI = child.xmlns[baseQName.prefix] || this.definitions.xmlns[baseQName.prefix];\n\n        let foundBase = this.findSchemaType(baseQName.name, childNsURI);\n\n        if (foundBase) {\n          found = this.findChildSchemaObject(foundBase, childName, backtrace);\n\n          if (found) {\n            found.$baseNameSpace = childNameSpace;\n            found.$type = childNameSpace + ':' + childName;\n            break;\n          }\n        }\n      }\n    }\n\n  }\n\n  if (!found && object.$name === childName) {\n    return object;\n  }\n\n  return found;\n};\n\nWSDL.prototype._parse = function (xml) {\n  let self = this,\n    p = sax.parser(true),\n    stack = [],\n    root = null,\n    types = null,\n    schema = null,\n    options = self.options;\n\n  p.onopentag = function (node) {\n    let nsName = node.name;\n    let attrs = node.attributes;\n\n    let top = stack[stack.length - 1];\n    let name;\n    if (top) {\n      try {\n        top.startElement(stack, nsName, attrs, options);\n      } catch (e) {\n        if (self.options.strict) {\n          throw e;\n        } else {\n          stack.push(new Element(nsName, attrs, options));\n        }\n      }\n    } else {\n      name = splitQName(nsName).name;\n      if (name === 'definitions') {\n        root = new DefinitionsElement(nsName, attrs, options);\n        stack.push(root);\n      } else if (name === 'schema') {\n        // Shim a structure in here to allow the proper objects to be created when merging back.\n        root = new DefinitionsElement('definitions', {}, {});\n        types = new TypesElement('types', {}, {});\n        schema = new SchemaElement(nsName, attrs, options);\n        types.addChild(schema);\n        root.addChild(types);\n        stack.push(schema);\n      } else {\n        throw new Error('Unexpected root element of WSDL or include');\n      }\n    }\n  };\n\n  p.onclosetag = function (name) {\n    let top = stack[stack.length - 1];\n    assert(top, 'Unmatched close tag: ' + name);\n\n    top.endElement(stack, name);\n  };\n\n  p.write(xml).close();\n\n  return root;\n};\n\nWSDL.prototype._fromXML = function (xml) {\n  this.definitions = this._parse(xml);\n  this.definitions.descriptions = {\n    types: {}\n  };\n  this.xml = xml;\n};\n\nWSDL.prototype._fromServices = function (services) {\n\n};\n\n\n\nWSDL.prototype._xmlnsMap = function () {\n  let xmlns = this.definitions.xmlns;\n  let str = '';\n  for (let alias in xmlns) {\n    if (alias === '' || alias === TNS_PREFIX) {\n      continue;\n    }\n    let ns = xmlns[alias];\n    switch (ns) {\n      case \"http://xml.apache.org/xml-soap\": // apachesoap\n      case \"http://schemas.xmlsoap.org/wsdl/\": // wsdl\n      case \"http://schemas.xmlsoap.org/wsdl/soap/\": // wsdlsoap\n      case \"http://schemas.xmlsoap.org/wsdl/soap12/\": // wsdlsoap12\n      case \"http://schemas.xmlsoap.org/soap/encoding/\": // soapenc\n      case \"http://www.w3.org/2001/XMLSchema\": // xsd\n        continue;\n    }\n    if (~ns.indexOf('http://schemas.xmlsoap.org/')) {\n      continue;\n    }\n    if (~ns.indexOf('http://www.w3.org/')) {\n      continue;\n    }\n    if (~ns.indexOf('http://xml.apache.org/')) {\n      continue;\n    }\n    str += ' xmlns:' + alias + '=\"' + ns + '\"';\n  }\n  return str;\n};\n\n/*\n * Have another function to load previous WSDLs as we\n * don't want this to be invoked externally (expect for tests)\n * This will attempt to fix circular dependencies with XSD files,\n * Given\n * - file.wsdl\n *   - xs:import namespace=\"A\" schemaLocation: A.xsd\n * - A.xsd\n *   - xs:import namespace=\"B\" schemaLocation: B.xsd\n * - B.xsd\n *   - xs:import namespace=\"A\" schemaLocation: A.xsd\n * file.wsdl will start loading, import A, then A will import B, which will then import A\n * Because A has already started to load previously it will be returned right away and\n * have an internal circular reference\n * B would then complete loading, then A, then file.wsdl\n * By the time file A starts processing its includes its definitions will be already loaded,\n * this is the only thing that B will depend on when \"opening\" A\n */\nfunction open_wsdl_recursive(uri, options): Promise<any> {\n  let fromCache,\n    WSDL_CACHE;\n\n  // if (typeof options === 'function') {\n  //   callback = options;\n  //   options = {};\n  // }\n\n  WSDL_CACHE = options.WSDL_CACHE;\n\n  if (fromCache = WSDL_CACHE[uri]) {\n    // return callback.call(fromCache, null, fromCache);\n    return fromCache;\n  }\n\n  return open_wsdl(uri, options);\n}\n\nexport async function open_wsdl(uri, options): Promise<any> {\n  // if (typeof options === 'function') {\n  //   callback = options;\n  //   options = {};\n  // }\n\n  // initialize cache when calling open_wsdl directly\n  let WSDL_CACHE = options.WSDL_CACHE || {};\n  let request_headers = options.wsdl_headers;\n  let request_options = options.wsdl_options;\n\n  // let wsdl;\n  // if (!/^https?:/.test(uri)) {\n  //   // debug('Reading file: %s', uri);\n  //   // fs.readFile(uri, 'utf8', function(err, definition) {\n  //   //   if (err) {\n  //   //     callback(err);\n  //   //   }\n  //   //   else {\n  //   //     wsdl = new WSDL(definition, uri, options);\n  //   //     WSDL_CACHE[ uri ] = wsdl;\n  //   //     wsdl.WSDL_CACHE = WSDL_CACHE;\n  //   //     wsdl.onReady(callback);\n  //   //   }\n  //   // });\n  // }\n  // else {\n  //   debug('Reading url: %s', uri);\n  //   let httpClient = options.httpClient || new HttpClient(options);\n  //   httpClient.request(uri, null /* options */, function(err, response, definition) {\n  //     if (err) {\n  //       callback(err);\n  //     } else if (response && response.statusCode === 200) {\n  //       wsdl = new WSDL(definition, uri, options);\n  //       WSDL_CACHE[ uri ] = wsdl;\n  //       wsdl.WSDL_CACHE = WSDL_CACHE;\n  //       wsdl.onReady(callback);\n  //     } else {\n  //       callback(new Error('Invalid WSDL URL: ' + uri + \"\\n\\n\\r Code: \" + response.statusCode + \"\\n\\n\\r Response Body: \" + response.body));\n  //     }\n  //   }, request_headers, request_options);\n  // }\n  // return wsdl;\n\n  const httpClient: HttpClient = options.httpClient;\n  const wsdlDef = await httpClient.get(uri, { responseType: 'text' }).toPromise();\n  const wsdlObj = await new Promise((resolve) => {\n    const wsdl = new WSDL(wsdlDef, uri, options);\n    WSDL_CACHE[uri] = wsdl;\n    wsdl.WSDL_CACHE = WSDL_CACHE;\n    wsdl.onReady(resolve(wsdl));\n  });\n  return wsdlObj;\n}\n","import * as _ from 'lodash';\nimport { Buffer } from 'buffer';\n\nexport function BasicAuthSecurity(username, password, defaults) {\n  this._username = username;\n  this._password = password;\n  this.defaults = {};\n  _.merge(this.defaults, defaults);\n}\n\nBasicAuthSecurity.prototype.addHeaders = function(headers) {\n  headers.Authorization = 'Basic ' + new Buffer((this._username + ':' + this._password) || '').toString('base64');\n};\n\nBasicAuthSecurity.prototype.toXML = function() {\n  return '';\n};\n\nBasicAuthSecurity.prototype.addOptions = function(options) {\n  _.merge(options, this.defaults);\n};\n","\"use strict\";\n\n// var crypto = require('crypto');\nimport sha1 from 'crypto-js/sha1';\nimport Base64 from 'crypto-js/enc-base64';\n\n// var passwordDigest = require('../utils').passwordDigest;\nimport { passwordDigest } from '../utils';\n\nvar validPasswordTypes = ['PasswordDigest', 'PasswordText'];\n\nexport function WSSecurity(username, password, options) {\n  options = options || {};\n  this._username = username;\n  this._password = password;\n  //must account for backward compatibility for passwordType String param as well as object options defaults: passwordType = 'PasswordText', hasTimeStamp = true   \n  if (typeof options === 'string') {\n    this._passwordType = options ? options : 'PasswordText';\n    options = {};\n  } else {\n    this._passwordType = options.passwordType ? options.passwordType : 'PasswordText';\n  }\n\n  if (validPasswordTypes.indexOf(this._passwordType) === -1) {\n    this._passwordType = 'PasswordText';\n  }\n\n  this._hasTimeStamp = options.hasTimeStamp || typeof options.hasTimeStamp === 'boolean' ? !!options.hasTimeStamp : true;\n  /*jshint eqnull:true */\n  if (options.hasNonce != null) {\n    this._hasNonce = !!options.hasNonce;\n  }\n  this._hasTokenCreated = options.hasTokenCreated || typeof options.hasTokenCreated === 'boolean' ? !!options.hasTokenCreated : true;\n  if (options.actor != null) {\n    this._actor = options.actor;\n  }\n  if (options.mustUnderstand != null) {\n    this._mustUnderstand = !!options.mustUnderstand;\n  }\n}\n\nWSSecurity.prototype.toXML = function() {\n  // avoid dependency on date formatting libraries\n  function getDate(d) {\n    function pad(n) {\n      return n < 10 ? '0' + n : n;\n    }\n    return d.getUTCFullYear() + '-'\n      + pad(d.getUTCMonth() + 1) + '-'\n      + pad(d.getUTCDate()) + 'T'\n      + pad(d.getUTCHours()) + ':'\n      + pad(d.getUTCMinutes()) + ':'\n      + pad(d.getUTCSeconds()) + 'Z';\n  }\n  var now = new Date();\n  var created = getDate(now);\n  var timeStampXml = '';\n  if (this._hasTimeStamp) {\n    var expires = getDate( new Date(now.getTime() + (1000 * 600)) );\n    timeStampXml = \"<wsu:Timestamp wsu:Id=\\\"Timestamp-\"+created+\"\\\">\" +\n      \"<wsu:Created>\"+created+\"</wsu:Created>\" +\n      \"<wsu:Expires>\"+expires+\"</wsu:Expires>\" +\n      \"</wsu:Timestamp>\";\n  }\n\n  var password, nonce;\n  if (this._hasNonce || this._passwordType !== 'PasswordText') {\n    // nonce = base64 ( sha1 ( created + random ) )\n    // var nHash = crypto.createHash('sha1');\n    // nHash.update(created + Math.random());\n    // nonce = nHash.digest('base64');\n    nonce = Base64.stringify(sha1(created + Math.random(), ''));\n  }\n  if (this._passwordType === 'PasswordText') {\n    password = \"<wsse:Password Type=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\\\">\" + this._password + \"</wsse:Password>\";\n    if (nonce) {\n      password += \"<wsse:Nonce EncodingType=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\\\">\" + nonce + \"</wsse:Nonce>\";\n    }\n  } else {\n    password = \"<wsse:Password Type=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\\\">\" + passwordDigest(nonce, created, this._password) + \"</wsse:Password>\" +\n      \"<wsse:Nonce EncodingType=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\\\">\" + nonce + \"</wsse:Nonce>\";\n  }\n\n  return \"<wsse:Security \" + (this._actor ? \"soap:actor=\\\"\" + this._actor + \"\\\" \" : \"\") +\n    (this._mustUnderstand ? \"soap:mustUnderstand=\\\"1\\\" \" : \"\") +\n    \"xmlns:wsse=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\\" xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\">\" +\n    timeStampXml +\n    \"<wsse:UsernameToken xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\" wsu:Id=\\\"SecurityToken-\" + created + \"\\\">\" +\n    \"<wsse:Username>\" + this._username + \"</wsse:Username>\" +\n    password +\n    (this._hasTokenCreated ? \"<wsu:Created>\" + created + \"</wsu:Created>\" : \"\") +\n    \"</wsse:UsernameToken>\" +\n    \"</wsse:Security>\";\n};\n\n// module.exports = WSSecurity;\n","\"use strict\";\n\n// var _ = require('lodash');\nimport * as _ from 'lodash';\n\nexport function BearerSecurity(token, defaults) {\n\tthis._token = token;\n\tthis.defaults = {};\n\t_.merge(this.defaults, defaults);\n}\n\nBearerSecurity.prototype.addHeaders = function(headers) {\n\theaders.Authorization = \"Bearer \" + this._token;\n};\n\nBearerSecurity.prototype.toXML = function() {\n\treturn '';\n};\n\nBearerSecurity.prototype.addOptions = function(options) {\n  _.merge(options, this.defaults);\n};\n\n// module.exports = BearerSecurity;\n","\"use strict\";\n\n// var _ = require('lodash');\nimport * as _ from 'lodash';\n\nexport function NTLMSecurity(username, password, domain, workstation) {\n  if (typeof username === \"object\") {\n    this.defaults = username;\n    this.defaults.ntlm = true;\n  } else {\n    this.defaults = {\n      ntlm: true,\n      username: username,\n      password: password,\n      domain: domain,\n      workstation: workstation\n    };\n  }\n}\n\nNTLMSecurity.prototype.addHeaders = function (headers) {\n  headers.Connection = 'keep-alive';\n};\n\nNTLMSecurity.prototype.toXML = function () {\n  return '';\n};\n\nNTLMSecurity.prototype.addOptions = function (options) {\n  _.merge(options, this.defaults);\n};\n\n// module.exports = NTLMSecurity;\n","\"use strict\";\n\nimport {Â BasicAuthSecurity } from './BasicAuthSecurity';\nimport { WSSecurity } from './WSSecurity';\n// import { WSSecurityCert } from './WSSecurityCert';\nimport { BearerSecurity } from './BearerSecurity';\nimport { NTLMSecurity } from './NTLMSecurity';\n\nexport const security = { \n  BasicAuthSecurity,\n  BearerSecurity,\n  WSSecurity,\n  // WSSecurityCert,\n  NTLMSecurity,\n  // ClientSSLSecurity,\n  // ClientSSLSecurityPFX\n};","export class Multipart  {\n  preambleCRLF = true;\n  postambleCRLF = true;\n\n  build(parts, boundary) {\n    const body = [];\n\n    function add (part) {\n      if (typeof part === 'number') {\n        part = part.toString();\n      }\n      return body.push(part)\n    }\n\n    if (this.preambleCRLF) {\n      add('\\r\\n')\n    }\n\n    parts.forEach(function (part) {\n      let preamble = '--' + boundary + '\\r\\n';\n      Object.keys(part).forEach(function (key) {\n        if (key === 'body') { return }\n        preamble += key + ': ' + part[key] + '\\r\\n'\n      });\n      preamble += '\\r\\n';\n      add(preamble);\n      add(part.body);\n      add('\\r\\n');\n    });\n    add('--' + boundary + '--');\n\n    if (this.postambleCRLF) {\n      add('\\r\\n');\n    }\n\n    const size = body.map((part) => {\n      if (typeof part === 'string') {\n        return part.length\n      } else {\n        return part.byteLength;\n      }\n    }).reduce((a, b) => a + b, 0);\n\n    let uint8array = new Uint8Array(size);\n    let i = 0;\n    body.forEach((part) => {\n      if (typeof part === 'string') {\n        for (let j = 0; j < part.length; i++, j++) {\n          uint8array[i] = part.charCodeAt(j) & 0xff;\n        }\n      } else {\n        for (let j = 0; j < part.byteLength; i++, j++) {\n          uint8array[i] = part[j];\n        }\n      }\n    });\n    return uint8array.buffer;\n  }\n\n}\n","export class SoapAttachment {\n\n  constructor(\n    public mimetype: string,\n    public contentId: string,\n    public name: string,\n    public body: any\n  ) {\n\n  }\n\n  static fromFormFiles(files: FileList | File[] = []): Promise<any> {\n    if (files instanceof FileList) {\n      files = Array.from(files);\n    }\n\n    const promises = files.map((file: any) => {\n      return new Promise(function(resolve) {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onload = function (e) {\n          const arrayBuffer = (e.target as any).result;\n          const bytes = new Uint8Array(arrayBuffer);\n          const attachment = new SoapAttachment(file.type, file.contentId || file.name, file.name, bytes);\n          resolve(attachment);\n        }\n      });\n    });\n\n   return Promise.all(promises);\n  }\n\n}\n","/*\n * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>\n * MIT Licensed\n */\n\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport * as assert from 'assert';\nimport { findPrefix } from './utils';\nimport * as _ from 'lodash';\nimport uuid4 from 'uuid/v4';\nimport { from, Observable, throwError } from 'rxjs';\nimport { flatMap, map } from 'rxjs/operators';\nimport { Multipart } from './multipart';\nimport { SoapAttachment } from './soapAttachment';\n\nconst nonIdentifierChars = /[^a-z$_0-9]/i;\n\nexport const Client = function(wsdl, endpoint, options) {\n    options = options || {};\n    this.wsdl = wsdl;\n    this._initializeOptions(options);\n    this._initializeServices(endpoint);\n    this.httpClient = options.httpClient as HttpClient;\n    const promiseOptions: any = { multiArgs: true };\n    if (options.overridePromiseSuffix) {\n        promiseOptions.suffix = options.overridePromiseSuffix;\n    }\n    Promise.all([this, promiseOptions]);\n};\n\nClient.prototype.addSoapHeader = function(soapHeader, name, namespace, xmlns) {\n    if (!this.soapHeaders) {\n        this.soapHeaders = [];\n    }\n    if (typeof soapHeader === 'object') {\n        soapHeader = this.wsdl.objectToXML(soapHeader, name, namespace, xmlns, true);\n    }\n    return this.soapHeaders.push(soapHeader) - 1;\n};\n\nClient.prototype.changeSoapHeader = function(index, soapHeader, name, namespace, xmlns) {\n    if (!this.soapHeaders) {\n        this.soapHeaders = [];\n    }\n    if (typeof soapHeader === 'object') {\n        soapHeader = this.wsdl.objectToXML(soapHeader, name, namespace, xmlns, true);\n    }\n    this.soapHeaders[index] = soapHeader;\n};\n\nClient.prototype.getSoapHeaders = function() {\n    return this.soapHeaders;\n};\n\nClient.prototype.clearSoapHeaders = function() {\n    this.soapHeaders = null;\n};\n\nClient.prototype.addHttpHeader = function(name, value) {\n    if (!this.httpHeaders) {\n        this.httpHeaders = {};\n    }\n    this.httpHeaders[name] = value;\n};\n\nClient.prototype.getHttpHeaders = function() {\n    return this.httpHeaders;\n};\n\nClient.prototype.clearHttpHeaders = function() {\n    this.httpHeaders = {};\n};\n\nClient.prototype.addBodyAttribute = function(bodyAttribute, name, namespace, xmlns) {\n    if (!this.bodyAttributes) {\n        this.bodyAttributes = [];\n    }\n    if (typeof bodyAttribute === 'object') {\n        let composition = '';\n        Object.getOwnPropertyNames(bodyAttribute).forEach(function(prop, idx, array) {\n            composition += ' ' + prop + '=\"' + bodyAttribute[prop] + '\"';\n        });\n        bodyAttribute = composition;\n    }\n    if (bodyAttribute.substr(0, 1) !== ' ') bodyAttribute = ' ' + bodyAttribute;\n    this.bodyAttributes.push(bodyAttribute);\n};\n\nClient.prototype.getBodyAttributes = function() {\n    return this.bodyAttributes;\n};\n\nClient.prototype.clearBodyAttributes = function() {\n    this.bodyAttributes = null;\n};\n\nClient.prototype.setEndpoint = function(endpoint) {\n    this.endpoint = endpoint;\n    this._initializeServices(endpoint);\n};\n\nClient.prototype.describe = function() {\n    const types = this.wsdl.definitions.types;\n    return this.wsdl.describeServices();\n};\n\nClient.prototype.setSecurity = function(security) {\n    this.security = security;\n};\n\nClient.prototype.setSOAPAction = function(SOAPAction) {\n    this.SOAPAction = SOAPAction;\n};\n\nClient.prototype._initializeServices = function(endpoint) {\n    const definitions = this.wsdl.definitions,\n        services = definitions.services;\n    for (const name in services) {\n        this[name] = this._defineService(services[name], endpoint);\n    }\n};\n\nClient.prototype._initializeOptions = function(options) {\n    this.streamAllowed = options.stream;\n    this.normalizeNames = options.normalizeNames;\n    this.wsdl.options.attributesKey = options.attributesKey || 'attributes';\n    this.wsdl.options.envelopeKey = options.envelopeKey || 'soap';\n    this.wsdl.options.preserveWhitespace = !!options.preserveWhitespace;\n    if (options.ignoredNamespaces !== undefined) {\n        if (options.ignoredNamespaces.override !== undefined) {\n            if (options.ignoredNamespaces.override === true) {\n                if (options.ignoredNamespaces.namespaces !== undefined) {\n                    this.wsdl.options.ignoredNamespaces = options.ignoredNamespaces.namespaces;\n                }\n            }\n        }\n    }\n    if (options.overrideRootElement !== undefined) {\n        this.wsdl.options.overrideRootElement = options.overrideRootElement;\n    }\n    this.wsdl.options.forceSoap12Headers = !!options.forceSoap12Headers;\n};\n\nClient.prototype._defineService = function(service, endpoint) {\n    const ports = service.ports,\n        def = {};\n    for (const name in ports) {\n        def[name] = this._definePort(ports[name], endpoint ? endpoint : ports[name].location);\n    }\n    return def;\n};\n\nClient.prototype._definePort = function(port, endpoint) {\n    const location = endpoint,\n        binding = port.binding,\n        methods = binding.methods,\n        def = {};\n    for (const name in methods) {\n        def[name] = this._defineMethod(methods[name], location);\n        const methodName = this.normalizeNames ? name.replace(nonIdentifierChars, '_') : name;\n        this[methodName] = def[name];\n    }\n    return def;\n};\n\nClient.prototype._defineMethod = function(method, location) {\n    const self = this;\n    let temp = null;\n    return function(args, options, extraHeaders): Observable<any> {\n        return self._invoke(method, args, location, options, extraHeaders);\n    };\n};\n\nClient.prototype._invoke = function(method, args, location, options, extraHeaders): Observable<any> {\n    let self = this,\n        name = method.$name,\n        input = method.input,\n        output = method.output,\n        style = method.style,\n        defs = this.wsdl.definitions,\n        envelopeKey = this.wsdl.options.envelopeKey,\n        ns = defs.$targetNamespace,\n        encoding = '',\n        message = '',\n        xml = null,\n        req = null,\n        soapAction = null,\n        alias = findPrefix(defs.xmlns, ns),\n        headers: any = {\n            'Content-Type': 'text/xml; charset=utf-8'\n        },\n        xmlnsSoap = 'xmlns:' + envelopeKey + '=\"http://schemas.xmlsoap.org/soap/envelope/\"';\n\n    if (this.wsdl.options.forceSoap12Headers) {\n        headers['Content-Type'] = 'application/soap+xml; charset=utf-8';\n        xmlnsSoap = 'xmlns:' + envelopeKey + '=\"http://www.w3.org/2003/05/soap-envelope\"';\n    }\n\n    if (this.SOAPAction) {\n        soapAction = this.SOAPAction;\n    } else if (method.soapAction !== undefined && method.soapAction !== null) {\n        soapAction = method.soapAction;\n    } else {\n        soapAction = (ns.lastIndexOf('/') !== ns.length - 1 ? ns + '/' : ns) + name;\n    }\n\n    if (!this.wsdl.options.forceSoap12Headers) {\n        headers.SOAPAction = '\"' + soapAction + '\"';\n    }\n\n    options = options || {};\n\n    //Add extra headers\n    for (const header in this.httpHeaders) {\n        headers[header] = this.httpHeaders[header];\n    }\n    for (const attr in extraHeaders) {\n        headers[attr] = extraHeaders[attr];\n    }\n\n    // Allow the security object to add headers\n    if (self.security && self.security.addHeaders) self.security.addHeaders(headers);\n    if (self.security && self.security.addOptions) self.security.addOptions(options);\n\n    if (style === 'rpc' && (input.parts || input.name === 'element' || args === null)) {\n        assert.ok(!style || style === 'rpc', 'invalid message definition for document style binding');\n        message = self.wsdl.objectToRpcXML(name, args, alias, ns, input.name !== 'element');\n        method.inputSoap === 'encoded' && (encoding = 'soap:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" ');\n    } else {\n        assert.ok(!style || style === 'document', 'invalid message definition for rpc style binding');\n        // pass `input.$lookupType` if `input.$type` could not be found\n        message = self.wsdl.objectToDocumentXML(input.$name, args, input.targetNSAlias, input.targetNamespace, input.$type || input.$lookupType);\n    }\n    xml =\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n        '<' +\n        envelopeKey +\n        ':Envelope ' +\n        xmlnsSoap +\n        ' ' +\n        'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n        encoding +\n        this.wsdl.xmlnsInEnvelope +\n        '>' +\n        (self.soapHeaders || self.security\n            ? '<' +\n              envelopeKey +\n              ':Header>' +\n              (self.soapHeaders ? self.soapHeaders.join('\\n') : '') +\n              (self.security && !self.security.postProcess ? self.security.toXML() : '') +\n              '</' +\n              envelopeKey +\n              ':Header>'\n            : '') +\n        '<' +\n        envelopeKey +\n        ':Body' +\n        (self.bodyAttributes ? self.bodyAttributes.join(' ') : '') +\n        (self.security && self.security.postProcess ? ' Id=\"_0\"' : '') +\n        '>' +\n        message +\n        '</' +\n        envelopeKey +\n        ':Body>' +\n        '</' +\n        envelopeKey +\n        ':Envelope>';\n\n    if (self.security && self.security.postProcess) {\n        xml = self.security.postProcess(xml, envelopeKey);\n    }\n\n    if (options && options.postProcess) {\n        xml = options.postProcess(xml);\n    }\n\n    self.lastMessage = message;\n    self.lastRequest = xml;\n    self.lastEndpoint = location;\n\n    const tryJSONparse = function(body) {\n        try {\n            return JSON.parse(body);\n        } catch (err) {\n            return undefined;\n        }\n    };\n\n    return from(SoapAttachment.fromFormFiles(options.attachments)).pipe(\n        map((soapAttachments: SoapAttachment[]) => {\n            if (!soapAttachments.length) {\n                return xml;\n            }\n\n            if (options.forceMTOM || soapAttachments.length > 0) {\n                const start = uuid4();\n                const boundry = uuid4();\n                let action = null;\n                if (headers['Content-Type'].indexOf('action') > -1) {\n                    for (const ct of headers['Content-Type'].split('; ')) {\n                        if (ct.indexOf('action') > -1) {\n                            action = ct;\n                        }\n                    }\n                }\n\n                headers['Content-Type'] =\n                    'multipart/related; type=\"application/xop+xml\"; start=\"<' + start + '>\"; start-info=\"text/xml\"; boundary=\"' + boundry + '\"';\n                if (action) {\n                    headers['Content-Type'] = headers['Content-Type'] + '; ' + action;\n                }\n\n                const multipart: any[] = [\n                    {\n                        'Content-Type': 'application/xop+xml; charset=UTF-8; type=\"text/xml\"',\n                        'Content-ID': '<' + start + '>',\n                        body: xml\n                    }\n                ];\n\n                soapAttachments.forEach((attachment: SoapAttachment) => {\n                    multipart.push({\n                        'Content-Type': attachment.mimetype + ';',\n                        'Content-Transfer-Encoding': 'binary',\n                        'Content-ID': '<' + (attachment.contentId || attachment.name) + '>',\n                        'Content-Disposition': 'attachment; name=\"' + attachment.name + '\"; filename=\"' + attachment.name + '\"',\n                        body: attachment.body\n                    });\n                });\n\n                return new Multipart().build(multipart, boundry);\n            }\n        }),\n        flatMap((body: any) =>\n            (<HttpClient>self.httpClient)\n                .post(location, body, {\n                    headers: headers,\n                    responseType: 'text',\n                    observe: 'response'\n                })\n                .pipe(\n                    map((response: HttpResponse<any>) => {\n                        self.lastResponse = response.body;\n                        self.lastResponseHeaders = response && response.headers;\n                        return parseSync(response.body, response);\n                    })\n                )\n        )\n    );\n\n    function parseSync(body, response: HttpResponse<any>) {\n        let obj;\n        try {\n            obj = self.wsdl.xmlToObject(body);\n        } catch (error) {\n            //  When the output element cannot be looked up in the wsdl and the body is JSON\n            //  instead of sending the error, we pass the body in the response.\n            if (!output || !output.$lookupTypes) {\n                // debug('Response element is not present. Unable to convert response xml to json.');\n                //  If the response is JSON then return it as-is.\n                const json = _.isObject(body) ? body : tryJSONparse(body);\n                if (json) {\n                    return { err: null, response, responseBody: json, header: undefined, xml };\n                }\n            }\n            error.response = response;\n            error.body = body;\n            // self.emit('soapError', error, eid);\n            throw error;\n        }\n        return finish(obj, body, response);\n    }\n\n    function finish(obj, responseBody, response) {\n        let result = null;\n\n        if (!output) {\n            // one-way, no output expected\n            return { err: null, response: null, responseBody, header: obj.Header, xml };\n        }\n\n        // If it's not HTML and Soap Body is empty\n        if (!obj.html && !obj.Body) {\n            return { err: null, obj, responseBody, header: obj.Header, xml };\n        }\n\n        if (typeof obj.Body !== 'object') {\n            const error: any = new Error('Cannot parse response');\n            error.response = response;\n            error.body = responseBody;\n            return { err: error, obj, responseBody, header: undefined, xml };\n        }\n\n        result = obj.Body[output.$name];\n        // RPC/literal response body may contain elements with added suffixes I.E.\n        // 'Response', or 'Output', or 'Out'\n        // This doesn't necessarily equal the ouput message name. See WSDL 1.1 Section 2.4.5\n        if (!result) {\n            result = obj.Body[output.$name.replace(/(?:Out(?:put)?|Response)$/, '')];\n        }\n        if (!result) {\n            ['Response', 'Out', 'Output'].forEach(function(term) {\n                if (obj.Body.hasOwnProperty(name + term)) {\n                    return (result = obj.Body[name + term]);\n                }\n            });\n        }\n\n        return { err: null, result, responseBody, header: obj.Header, xml };\n    }\n};\n\nClient.prototype.call = function(method: string, body: any, options?: any, extraHeaders?: any): Observable<any> {\n    if (!this[method]) {\n        return throwError(`Method ${method} not found`);\n    }\n\n    return (<Function>this[method]).call(this, body, options, extraHeaders);\n};\n","/*\n * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>\n * MIT Licensed\n */\n\nimport * as wsdl from './wsdl';\nimport { security } from './security/security';\nimport { Client } from './client';\nexport { Client } from './client';\nexport { security  } from './security/security';\n\nexport { passwordDigest } from './utils'\nexport const WSDL = wsdl.WSDL;\n\nconst cache = {}; // TODO some caching?\n\nconst getFromCache = async (url, options) => {\n  // console.log('Getting from cache', url);\n  // console.log('Cache', cache)\n  if (cache[url]) {\n    // console.log('Found in cache', url);\n    return cache[url];\n  } else {\n    return wsdl.open_wsdl(url, options).then(wsdl => {\n      cache[url] = wsdl;\n      return wsdl;\n    })\n  }\n};\n\nasync function _requestWSDL(url, options) {\n  if (options.disableCache === true) {\n    return wsdl.open_wsdl(url, options);\n  } else {\n    return getFromCache(url, options);\n  }\n\n}\n\nexport async function createClient(url, options, endpoint): Promise<any> {\n  if (typeof options === 'undefined') {\n    options = {};\n  }\n  // console.log(\"createClient\", options)\n  endpoint = options.endpoint || endpoint;\n  \n  const wsdl = await _requestWSDL(url, options);\n  const client = new Client(wsdl, endpoint, options);\n  return client;\n}\n\nexport const BasicAuthSecurity = security.BasicAuthSecurity;\nexport const NTLMSecurity = security.NTLMSecurity;\nexport const WSSecurity = security.WSSecurity;\n// export const WSSecurityCert = security.WSSecurityCert;\nexport const BearerSecurity = security.BearerSecurity;\n// export const ClientSSLSecurity = security.ClientSSLSecurity;\n// export const ClientSSLSecurityPFX = security.ClientSSLSecurityPFX;\n","import { Injectable } from '@angular/core';\nimport { createClient } from './soap/soap';\nimport { HttpClient } from '@angular/common/http';\nimport { Client } from './soap/interfaces';\n\nexport {\n  Client,\n  WSDL,\n  ISoapMethod,\n  ISoapMethodResponse,\n  BasicAuthSecurity,\n  BearerSecurity,\n  // WSSecurityCert,\n  WSSecurity,\n  NTLMSecurity\n} from './soap/interfaces';\n\nexport { security } from './soap/security/security'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSoapService {\n\n  constructor(private http: HttpClient) { }\n\n  createClient(wsdlUrl: string, options: any = {}, endpoint?: string): Promise<Client> {\n    options.httpClient = this.http;\n    return createClient(wsdlUrl, options, endpoint) ;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  exports: []\n})\nexport class NgxSoapModule { }\n"]}