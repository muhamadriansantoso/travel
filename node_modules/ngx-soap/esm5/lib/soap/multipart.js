/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Multipart = /** @class */ (function () {
    function Multipart() {
        this.preambleCRLF = true;
        this.postambleCRLF = true;
    }
    /**
     * @param {?} parts
     * @param {?} boundary
     * @return {?}
     */
    Multipart.prototype.build = /**
     * @param {?} parts
     * @param {?} boundary
     * @return {?}
     */
    function (parts, boundary) {
        /** @type {?} */
        var body = [];
        /**
         * @param {?} part
         * @return {?}
         */
        function add(part) {
            if (typeof part === 'number') {
                part = part.toString();
            }
            return body.push(part);
        }
        if (this.preambleCRLF) {
            add('\r\n');
        }
        parts.forEach((/**
         * @param {?} part
         * @return {?}
         */
        function (part) {
            /** @type {?} */
            var preamble = '--' + boundary + '\r\n';
            Object.keys(part).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (key === 'body') {
                    return;
                }
                preamble += key + ': ' + part[key] + '\r\n';
            }));
            preamble += '\r\n';
            add(preamble);
            add(part.body);
            add('\r\n');
        }));
        add('--' + boundary + '--');
        if (this.postambleCRLF) {
            add('\r\n');
        }
        /** @type {?} */
        var size = body.map((/**
         * @param {?} part
         * @return {?}
         */
        function (part) {
            if (typeof part === 'string') {
                return part.length;
            }
            else {
                return part.byteLength;
            }
        })).reduce((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a + b; }), 0);
        /** @type {?} */
        var uint8array = new Uint8Array(size);
        /** @type {?} */
        var i = 0;
        body.forEach((/**
         * @param {?} part
         * @return {?}
         */
        function (part) {
            if (typeof part === 'string') {
                for (var j = 0; j < part.length; i++, j++) {
                    uint8array[i] = part.charCodeAt(j) & 0xff;
                }
            }
            else {
                for (var j = 0; j < part.byteLength; i++, j++) {
                    uint8array[i] = part[j];
                }
            }
        }));
        return uint8array.buffer;
    };
    return Multipart;
}());
export { Multipart };
if (false) {
    /** @type {?} */
    Multipart.prototype.preambleCRLF;
    /** @type {?} */
    Multipart.prototype.postambleCRLF;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwYXJ0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNvYXAvIiwic291cmNlcyI6WyJsaWIvc29hcC9tdWx0aXBhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0lBQUE7UUFDRSxpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixrQkFBYSxHQUFHLElBQUksQ0FBQztJQXlEdkIsQ0FBQzs7Ozs7O0lBdkRDLHlCQUFLOzs7OztJQUFMLFVBQU0sS0FBSyxFQUFFLFFBQVE7O1lBQ2IsSUFBSSxHQUFHLEVBQUU7Ozs7O1FBRWYsU0FBUyxHQUFHLENBQUUsSUFBSTtZQUNoQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN4QjtZQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN4QixDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUNaO1FBRUQsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFVLElBQUk7O2dCQUN0QixRQUFRLEdBQUcsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQVUsR0FBRztnQkFDckMsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO29CQUFFLE9BQU07aUJBQUU7Z0JBQzlCLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUE7WUFDN0MsQ0FBQyxFQUFDLENBQUM7WUFDSCxRQUFRLElBQUksTUFBTSxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDZixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRTVCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDYjs7WUFFSyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLElBQUk7WUFDekIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTthQUNuQjtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7YUFDeEI7UUFDSCxDQUFDLEVBQUMsQ0FBQyxNQUFNOzs7OztRQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsR0FBRyxDQUFDLEVBQUwsQ0FBSyxHQUFFLENBQUMsQ0FBQzs7WUFFekIsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQzs7WUFDakMsQ0FBQyxHQUFHLENBQUM7UUFDVCxJQUFJLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsSUFBSTtZQUNoQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3pDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztpQkFDM0M7YUFDRjtpQkFBTTtnQkFDTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDN0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekI7YUFDRjtRQUNILENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFFSCxnQkFBQztBQUFELENBQUMsQUEzREQsSUEyREM7Ozs7SUExREMsaUNBQW9COztJQUNwQixrQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTXVsdGlwYXJ0ICB7XG4gIHByZWFtYmxlQ1JMRiA9IHRydWU7XG4gIHBvc3RhbWJsZUNSTEYgPSB0cnVlO1xuXG4gIGJ1aWxkKHBhcnRzLCBib3VuZGFyeSkge1xuICAgIGNvbnN0IGJvZHkgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFkZCAocGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBwYXJ0ID0gcGFydC50b1N0cmluZygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJvZHkucHVzaChwYXJ0KVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByZWFtYmxlQ1JMRikge1xuICAgICAgYWRkKCdcXHJcXG4nKVxuICAgIH1cblxuICAgIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgIGxldCBwcmVhbWJsZSA9ICctLScgKyBib3VuZGFyeSArICdcXHJcXG4nO1xuICAgICAgT2JqZWN0LmtleXMocGFydCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdib2R5JykgeyByZXR1cm4gfVxuICAgICAgICBwcmVhbWJsZSArPSBrZXkgKyAnOiAnICsgcGFydFtrZXldICsgJ1xcclxcbidcbiAgICAgIH0pO1xuICAgICAgcHJlYW1ibGUgKz0gJ1xcclxcbic7XG4gICAgICBhZGQocHJlYW1ibGUpO1xuICAgICAgYWRkKHBhcnQuYm9keSk7XG4gICAgICBhZGQoJ1xcclxcbicpO1xuICAgIH0pO1xuICAgIGFkZCgnLS0nICsgYm91bmRhcnkgKyAnLS0nKTtcblxuICAgIGlmICh0aGlzLnBvc3RhbWJsZUNSTEYpIHtcbiAgICAgIGFkZCgnXFxyXFxuJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2l6ZSA9IGJvZHkubWFwKChwYXJ0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwYXJ0Lmxlbmd0aFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcnQuYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICB9KS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcblxuICAgIGxldCB1aW50OGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGJvZHkuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhcnQubGVuZ3RoOyBpKyssIGorKykge1xuICAgICAgICAgIHVpbnQ4YXJyYXlbaV0gPSBwYXJ0LmNoYXJDb2RlQXQoaikgJiAweGZmO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhcnQuYnl0ZUxlbmd0aDsgaSsrLCBqKyspIHtcbiAgICAgICAgICB1aW50OGFycmF5W2ldID0gcGFydFtqXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB1aW50OGFycmF5LmJ1ZmZlcjtcbiAgfVxuXG59XG4iXX0=