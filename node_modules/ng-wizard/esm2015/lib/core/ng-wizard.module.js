/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { NgWizardStepComponent } from './wizard-step/ng-wizard-step.component';
import { NgWizardComponent } from './wizard/ng-wizard.component';
import * as ɵngcc0 from '@angular/core';
export class NgWizardModule {
    /**
     * forRoot
     * @param {?} ngWizardConfig
     * @return {?} A module with its provider dependencies
     */
    static forRoot(ngWizardConfig) {
        return {
            ngModule: NgWizardModule,
            providers: [
                {
                    provide: NG_WIZARD_CONFIG_TOKEN,
                    useValue: ngWizardConfig
                }
            ]
        };
    }
}
NgWizardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWizardModule });
NgWizardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWizardModule_Factory(t) { return new (t || NgWizardModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWizardModule, { declarations: function () { return [NgWizardComponent, NgWizardStepComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgWizardComponent, NgWizardStepComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NgWizardComponent, NgWizardStepComponent],
                exports: [NgWizardComponent, NgWizardStepComponent]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L25nLXdpemFyZC9saWIvY29yZS9uZy13aXphcmQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHL0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBT2pFLE1BQU0sT0FBTyxjQUFjO0FBQzNCO0FBQ0U7QUFDRTtBQUFpQztBQUVEO0FBQVEsSUFBMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUE4QjtBQUFJLFFBQy9DLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxjQUFjO0FBQzlCLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHNCQUFzQjtBQUN6QyxvQkFBVSxRQUFRLEVBQUUsY0FBYztBQUNsQyxpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDswQ0FyQkMsUUFBUSxTQUFDO0lBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLGtCQUN2QixZQUFZLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsQ0FBQyxrQkFDeEQsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUU7TUFBcUIsQ0FBQyxjQUNwRDs7Ozs7Ozs7O0FBWkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXBCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IE5nV2l6YXJkQ29uZmlnIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBOR19XSVpBUkRfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi9uZy13aXphcmQtY29uZmlnLnRva2VuJztcbmltcG9ydCB7IE5nV2l6YXJkU3RlcENvbXBvbmVudCB9IGZyb20gJy4vd2l6YXJkLXN0ZXAvbmctd2l6YXJkLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IE5nV2l6YXJkQ29tcG9uZW50IH0gZnJvbSAnLi93aXphcmQvbmctd2l6YXJkLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ1dpemFyZENvbXBvbmVudCwgTmdXaXphcmRTdGVwQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW05nV2l6YXJkQ29tcG9uZW50LCBOZ1dpemFyZFN0ZXBDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5nV2l6YXJkTW9kdWxlIHtcbiAgLyoqXG4gICAqIGZvclJvb3RcbiAgICogQHJldHVybnMgQSBtb2R1bGUgd2l0aCBpdHMgcHJvdmlkZXIgZGVwZW5kZW5jaWVzXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChuZ1dpemFyZENvbmZpZzogTmdXaXphcmRDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nV2l6YXJkTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOR19XSVpBUkRfQ09ORklHX1RPS0VOLFxuICAgICAgICAgIHVzZVZhbHVlOiBuZ1dpemFyZENvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19