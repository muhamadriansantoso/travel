/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ContentChildren, QueryList } from '@angular/core';
import { NgWizardService } from '../ng-wizard.service';
import { NgWizardStep } from '../../utils/interfaces';
import { TOOLBAR_POSITION, STEP_STATE, STEP_STATUS } from '../../utils/enums';
import { merge } from '../../utils/functions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NgWizardComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r1066 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 5);
    ɵngcc0.ɵɵelementStart(1, "a", 6);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_li_2_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1066); const step_r1063 = ctx.$implicit; const ctx_r1065 = ɵngcc0.ɵɵnextContext(); return ctx_r1065._showSelectedStep($event, step_r1063); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelement(3, "br");
    ɵngcc0.ɵɵelementStart(4, "small");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r1063 = ctx.$implicit;
    const i_r1064 = ctx.index;
    const ctx_r1060 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1060._getStepCssClass(step_r1063));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("href", "#step-", i_r1064, "", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(step_r1063.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(step_r1063.description);
} }
function NgWizardComponent_div_3_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r1071 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1071); const ctx_r1070 = ɵngcc0.ɵɵnextContext(2); return ctx_r1070._showPreviousStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1067 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1067.styles.previousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1067.config.lang.previous);
} }
function NgWizardComponent_div_3_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r1073 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1073); const ctx_r1072 = ɵngcc0.ɵɵnextContext(2); return ctx_r1072._showNextStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1068 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1068.styles.nextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1068.config.lang.next);
} }
function NgWizardComponent_div_3_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r1078 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_div_4_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r1078); const button_r1075 = ctx.$implicit; const ctx_r1077 = ɵngcc0.ɵɵnextContext(3); return ctx_r1077._extraButtonClicked(button_r1075); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r1075 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", button_r1075.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(button_r1075.text);
} }
function NgWizardComponent_div_3_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_div_3_div_4_button_1_Template, 2, 2, "button", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1069 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1069.config.toolbarSettings.toolbarExtraButtons);
} }
function NgWizardComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵtemplate(2, NgWizardComponent_div_3_button_2_Template, 2, 2, "button", 8);
    ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_3_button_3_Template, 2, 2, "button", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, NgWizardComponent_div_3_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1061 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1061.styles.toolbarTop);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1061.showPreviousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1061.showNextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1061.showExtraButtons);
} }
function NgWizardComponent_div_6_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r1083 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1083); const ctx_r1082 = ɵngcc0.ɵɵnextContext(2); return ctx_r1082._showPreviousStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1079 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1079.styles.previousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1079.config.lang.previous);
} }
function NgWizardComponent_div_6_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r1085 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1085); const ctx_r1084 = ɵngcc0.ɵɵnextContext(2); return ctx_r1084._showNextStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1080 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1080.styles.nextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1080.config.lang.next);
} }
function NgWizardComponent_div_6_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r1090 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_div_4_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r1090); const button_r1087 = ctx.$implicit; const ctx_r1089 = ɵngcc0.ɵɵnextContext(3); return ctx_r1089._extraButtonClicked(button_r1087); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r1087 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", button_r1087.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(button_r1087.text);
} }
function NgWizardComponent_div_6_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_div_6_div_4_button_1_Template, 2, 2, "button", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1081 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1081.config.toolbarSettings.toolbarExtraButtons);
} }
function NgWizardComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵtemplate(2, NgWizardComponent_div_6_button_2_Template, 2, 2, "button", 8);
    ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_6_button_3_Template, 2, 2, "button", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, NgWizardComponent_div_6_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1062 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1062.styles.toolbarBottom);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1062.showPreviousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1062.showNextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1062.showExtraButtons);
} }
const _c0 = ["*"];
export class NgWizardComponent {
    /**
     * @param {?} ngService
     */
    constructor(ngService) {
        this.ngService = ngService;
        this.stepChanged = new EventEmitter();
        this.themeChanged = new EventEmitter();
        this.reseted = new EventEmitter();
        this.styles = {};
        this.showToolbarTop = false;
        this.showPreviousButton = false;
        this.showNextButton = false;
        this.showToolbarBottom = false;
        this.showExtraButtons = false;
        this.current_index = null; // Active step index
    }
    /**
     * @return {?}
     */
    get pConfig() {
        return this._pConfig || {};
    }
    /**
     * @param {?} config
     * @return {?}
     */
    set pConfig(config) {
        this._pConfig = config;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._backupStepStates();
        this._init();
        // Set toolbar
        this._setToolbar();
        // Assign plugin events
        this._setEvents();
        this.resetWizardWatcher = this.ngService.resetWizard$
            .subscribe((/**
         * @return {?}
         */
        () => {
            this._reset();
        }));
        this.showNextStepWatcher = this.ngService.showNextStep$
            .subscribe((/**
         * @return {?}
         */
        () => {
            this._showNextStep();
        }));
        this.showPreviousStepWatcher = this.ngService.showPreviousStep$
            .subscribe((/**
         * @return {?}
         */
        () => {
            this._showPreviousStep();
        }));
        this.setThemeWatcher = this.ngService.setTheme$
            .subscribe((/**
         * @param {?} theme
         * @return {?}
         */
        theme => {
            this._setTheme(theme);
        }));
    }
    /**
     * @return {?}
     */
    _init() {
        // set config
        /** @type {?} */
        var defaultConfig = this.ngService.getDefaultConfig();
        this.config = merge(defaultConfig, this.pConfig);
        // set step states
        this._initSteps();
        // Set the elements
        this._initStyles();
        // Show the initial step
        this._showStep(this.config.selected);
    }
    /**
     * @return {?}
     */
    _initSteps() {
        this.steps.forEach((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        (step, index) => {
            step.index = index;
            step.status = step.status || STEP_STATUS.untouched;
            step.state = step.state || STEP_STATE.normal;
        }));
        // Mark previous steps of the active step as done
        if (this.config.selected > 0
            && this.config.anchorSettings.markDoneStep
            && this.config.anchorSettings.markAllPreviousStepsAsDone) {
            this.steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            step => {
                if (step.state != STEP_STATE.disabled && step.state != STEP_STATE.hidden) {
                    step.status = step.index < this.config.selected ? STEP_STATUS.done : step.status;
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    _backupStepStates() {
        this.steps.forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            step.initialStatus = step.status;
            step.initialState = step.state;
        }));
    }
    /**
     * @return {?}
     */
    _restoreStepStates() {
        this.steps.forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            step.status = step.initialStatus;
            step.state = step.initialState;
        }));
    }
    // PRIVATE FUNCTIONS
    /**
     * @return {?}
     */
    _initStyles() {
        // Set the main element
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
        // Set anchor elements
        this.styles.step = 'nav-item'; // li
        // Make the anchor clickable
        if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {
            this.styles.step += ' clickable';
        }
        // Set the toolbar styles
        this.styles.toolbarTop = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-top justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;
        this.styles.toolbarBottom = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-bottom justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;
        // Set previous&next buttons 
        this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';
        this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';
    }
    /**
     * @return {?}
     */
    _setToolbar() {
        this.showToolbarTop = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.top ||
            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;
        this.showToolbarBottom = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.bottom ||
            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;
        this.showPreviousButton = this.config.toolbarSettings.showPreviousButton;
        this.showNextButton = this.config.toolbarSettings.showNextButton;
        this.showExtraButtons = this.config.toolbarSettings.toolbarExtraButtons && this.config.toolbarSettings.toolbarExtraButtons.length > 0;
    }
    /**
     * @return {?}
     */
    _setEvents() {
        //TODO: keyNavigation
        // Keyboard navigation event
        if (this.config.keyNavigation) {
            // $(document).keyup(function (e) {
            //   mi._keyNav(e);
            // });
        }
    }
    /**
     * @param {?} selectedStep
     * @return {?}
     */
    _getStepCssClass(selectedStep) {
        /** @type {?} */
        var stepClass = this.styles.step;
        switch (selectedStep.state) {
            case STEP_STATE.disabled:
                stepClass += ' disabled';
                break;
            case STEP_STATE.error:
                stepClass += ' danger';
                break;
            case STEP_STATE.hidden:
                stepClass += ' hidden';
                break;
        }
        switch (selectedStep.status) {
            case STEP_STATUS.done:
                stepClass += ' done';
                break;
            case STEP_STATUS.active:
                stepClass += ' active';
                break;
        }
        return stepClass;
    }
    /**
     * @param {?} event
     * @param {?} selectedStep
     * @return {?}
     */
    _showSelectedStep(event, selectedStep) {
        event.preventDefault();
        if (!this.config.anchorSettings.anchorClickable) {
            return;
        }
        if (!this.config.anchorSettings.enableAnchorOnDoneStep && selectedStep.status == STEP_STATUS.done) {
            return true;
        }
        if (selectedStep.index != this.current_index) {
            if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {
                this._showStep(selectedStep.index);
            }
            else {
                if (selectedStep.status == STEP_STATUS.done) {
                    this._showStep(selectedStep.index);
                }
            }
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    _showNextStep(event) {
        if (event) {
            event.preventDefault();
        }
        // Find the next not disabled & hidden step
        /** @type {?} */
        var filteredSteps = this.steps.filter((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            return step.index > (this.current_index == null ? -1 : this.current_index)
                && step.state != STEP_STATE.disabled
                && step.state != STEP_STATE.hidden;
        }));
        if (filteredSteps.length == 0) {
            if (!this.config.cycleSteps) {
                return;
            }
            this._showStep(0);
        }
        else {
            this._showStep(filteredSteps.shift().index);
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    _showPreviousStep(event) {
        if (event) {
            event.preventDefault();
        }
        // Find the previous not disabled & hidden step
        /** @type {?} */
        var filteredSteps = this.steps.filter((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            return step.index < (this.current_index == null && this.config.cycleSteps ? this.steps.length : this.current_index)
                && step.state != STEP_STATE.disabled
                && step.state != STEP_STATE.hidden;
        }));
        if (filteredSteps.length == 0) {
            if (!this.config.cycleSteps) {
                return;
            }
            this._showStep(this.steps.length - 1);
        }
        else {
            this._showStep(filteredSteps.pop().index);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    _showStep(index) {
        // If step not found, skip
        if (index >= this.steps.length || index < 0) {
            return;
        }
        // If current step is requested again, skip
        if (index == this.current_index) {
            return;
        }
        /** @type {?} */
        var selectedStep = this.steps.toArray()[index];
        // If it is a disabled or hidden step, skip
        if (selectedStep.state == STEP_STATE.disabled || selectedStep.state == STEP_STATE.hidden) {
            return;
        }
        // Load step content
        this._loadStepContent(selectedStep);
    }
    /**
     * @param {?} selectedStep
     * @return {?}
     */
    _loadStepContent(selectedStep) {
        // Get the direction of step navigation
        /** @type {?} */
        var stepDirection = (this.current_index != null && this.current_index != selectedStep.index) ? (this.current_index < selectedStep.index ? "forward" : "backward") : '';
        /** @type {?} */
        var stepPosition = (selectedStep.index == 0) ? 'first' : (selectedStep.index == this.steps.length - 1 ? 'final' : 'middle');
        // Update controls
        this._setAnchor(selectedStep);
        // Set the buttons based on the step
        this._setButtons(selectedStep.index);
        // Trigger "stepChanged" event
        this.stepChanged.emit({
            step: selectedStep,
            previousStep: this.currentStep,
            direction: stepDirection,
            position: stepPosition
        });
        // Update the current index
        this.current_index = selectedStep.index;
        this.currentStep = selectedStep;
    }
    /**
     * @param {?} selectedStep
     * @return {?}
     */
    _setAnchor(selectedStep) {
        // Current step anchor > Remove other classes and add done class
        if (this.currentStep) {
            this.currentStep.status = STEP_STATUS.untouched;
            if (this.config.anchorSettings.markDoneStep) {
                this.currentStep.status = STEP_STATUS.done;
                if (this.config.anchorSettings.removeDoneStepOnNavigateBack) {
                    this.steps.forEach((/**
                     * @param {?} step
                     * @return {?}
                     */
                    step => {
                        if (step.index > selectedStep.index) {
                            step.status = STEP_STATUS.untouched;
                        }
                    }));
                }
            }
        }
        // Next step anchor > Remove other classes and add active class
        selectedStep.status = STEP_STATUS.active;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    _setButtons(index) {
        // Previous/Next Button enable/disable based on step
        if (!this.config.cycleSteps) {
            if (0 >= index) {
                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev disabled';
            }
            else {
                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';
            }
            if (this.steps.length - 1 <= index) {
                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next disabled';
            }
            else {
                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';
            }
        }
    }
    /**
     * @param {?} button
     * @return {?}
     */
    _extraButtonClicked(button) {
        if (button.event) {
            button.event();
        }
    }
    // HELPER FUNCTIONS
    /**
     * @param {?} event
     * @return {?}
     */
    _keyNav(event) {
        // Keyboard navigation
        switch (event.which) {
            case 37:
                // left
                this._showPreviousStep(event);
                event.preventDefault();
                break;
            case 39:
                // right
                this._showNextStep(event);
                event.preventDefault();
                break;
            default:
                return; // exit this handler for other keys
        }
    }
    /*
      _showLoader() {
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme + ' ng-wizard-loading';
      }
    
      _hideLoader() {
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
      }
      */
    // PUBLIC FUNCTIONS
    /**
     * @param {?} theme
     * @return {?}
     */
    _setTheme(theme) {
        if (this.config.theme == theme) {
            return false;
        }
        this.config.theme = theme;
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
        // Trigger "themeChanged" event
        this.themeChanged.emit(this.config.theme);
    }
    /**
     * @return {?}
     */
    _reset() {
        // Reset all elements and classes
        this.current_index = null;
        this.currentStep = null;
        this._restoreStepStates();
        this._init();
        // Trigger "reseted" event
        this.reseted.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.resetWizardWatcher) {
            this.resetWizardWatcher.unsubscribe();
        }
        if (this.showNextStepWatcher) {
            this.showNextStepWatcher.unsubscribe();
        }
        if (this.showPreviousStepWatcher) {
            this.showPreviousStepWatcher.unsubscribe();
        }
        if (this.setThemeWatcher) {
            this.setThemeWatcher.unsubscribe();
        }
    }
}
NgWizardComponent.ɵfac = function NgWizardComponent_Factory(t) { return new (t || NgWizardComponent)(ɵngcc0.ɵɵdirectiveInject(NgWizardService)); };
NgWizardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardComponent, selectors: [["ng-wizard"]], contentQueries: function NgWizardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgWizardStep, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.steps = _t);
    } }, inputs: { pConfig: ["config", "pConfig"] }, outputs: { stepChanged: "stepChanged", themeChanged: "themeChanged", reseted: "reseted" }, ngContentSelectors: _c0, decls: 7, vars: 4, consts: [["id", "ngwizard", 3, "ngClass"], [1, "nav", "nav-tabs", "step-anchor"], [3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass", 4, "ngIf"], [1, "ng-wizard-container", "tab-content"], [3, "ngClass"], [1, "nav-link", 3, "href", "click"], ["role", "group", 1, "btn-group", "mr-2", "ng-wizard-btn-group"], ["type", "button", 3, "ngClass", "click", 4, "ngIf"], ["class", "btn-group mr-2 ng-wizard-btn-group-extra", "role", "group", 4, "ngIf"], ["type", "button", 3, "ngClass", "click"], ["role", "group", 1, "btn-group", "mr-2", "ng-wizard-btn-group-extra"], ["type", "button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"]], template: function NgWizardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "ul", 1);
        ɵngcc0.ɵɵtemplate(2, NgWizardComponent_li_2_Template, 6, 4, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_3_Template, 5, 4, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, NgWizardComponent_div_6_Template, 5, 4, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.styles.main);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.steps);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbarTop);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbarBottom);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf], styles: [""] });
/** @nocollapse */
NgWizardComponent.ctorParameters = () => [
    { type: NgWizardService }
];
NgWizardComponent.propDecorators = {
    steps: [{ type: ContentChildren, args: [NgWizardStep,] }],
    pConfig: [{ type: Input, args: ['config',] }],
    stepChanged: [{ type: Output }],
    themeChanged: [{ type: Output }],
    reseted: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard',
                template: "<div id=\"ngwizard\" [ngClass]=\"styles.main\">\n    <ul class=\"nav nav-tabs step-anchor\">\n        <li *ngFor=\"let step of steps; let i = index\" [ngClass]=\"_getStepCssClass(step)\">\n            <a href=\"#step-{{ i }}\" (click)=\"_showSelectedStep($event, step)\"\n                class=\"nav-link\">{{ step.title }}<br /><small>{{ step.description }}</small></a>\n        </li>\n    </ul>\n\n    <div *ngIf=\"showToolbarTop\" [ngClass]=\"styles.toolbarTop\">\n        <div class=\"btn-group mr-2 ng-wizard-btn-group\" role=\"group\">\n            <button *ngIf=\"showPreviousButton\" [ngClass]=\"styles.previousButton\" type=\"button\"\n                (click)=\"_showPreviousStep($event)\">{{ config.lang.previous }}</button>\n            <button *ngIf=\"showNextButton\" [ngClass]=\"styles.nextButton\" type=\"button\"\n                (click)=\"_showNextStep($event)\">{{ config.lang.next }}</button>\n        </div>\n\n        <div *ngIf=\"showExtraButtons\" class=\"btn-group mr-2 ng-wizard-btn-group-extra\" role=\"group\">\n            <button *ngFor=\"let button of config.toolbarSettings.toolbarExtraButtons; let j = index\"\n                [ngClass]=\"button.class\" type=\"button\" (click)=\"_extraButtonClicked(button)\">{{ button.text }}</button>\n        </div>\n    </div>\n\n    <div class=\"ng-wizard-container tab-content\">\n        <ng-content></ng-content>\n    </div>\n\n    <div *ngIf=\"showToolbarBottom\" [ngClass]=\"styles.toolbarBottom\">\n        <div class=\"btn-group mr-2 ng-wizard-btn-group\" role=\"group\">\n            <button *ngIf=\"showPreviousButton\" [ngClass]=\"styles.previousButton\" type=\"button\"\n                (click)=\"_showPreviousStep($event)\">{{ config.lang.previous }}</button>\n            <button *ngIf=\"showNextButton\" [ngClass]=\"styles.nextButton\" type=\"button\"\n                (click)=\"_showNextStep($event)\">{{ config.lang.next }}</button>\n        </div>\n\n        <div *ngIf=\"showExtraButtons\" class=\"btn-group mr-2 ng-wizard-btn-group-extra\" role=\"group\">\n            <button *ngFor=\"let button of config.toolbarSettings.toolbarExtraButtons; let j = index\"\n                [ngClass]=\"button.class\" type=\"button\" (click)=\"_extraButtonClicked(button)\">{{ button.text }}</button>\n        </div>\n    </div>\n</div>",
                styles: [""]
            }]
    }], function () { return [{ type: NgWizardService }]; }, { stepChanged: [{
            type: Output
        }], themeChanged: [{
            type: Output
        }], reseted: [{
            type: Output
        }], pConfig: [{
            type: Input,
            args: ['config']
        }], steps: [{
            type: ContentChildren,
            args: [NgWizardStep]
        }] }); })();
if (false) {
    /** @type {?} */
    NgWizardComponent.prototype.steps;
    /** @type {?} */
    NgWizardComponent.prototype._pConfig;
    /** @type {?} */
    NgWizardComponent.prototype.config;
    /** @type {?} */
    NgWizardComponent.prototype.stepChanged;
    /** @type {?} */
    NgWizardComponent.prototype.themeChanged;
    /** @type {?} */
    NgWizardComponent.prototype.reseted;
    /** @type {?} */
    NgWizardComponent.prototype.styles;
    /** @type {?} */
    NgWizardComponent.prototype.showToolbarTop;
    /** @type {?} */
    NgWizardComponent.prototype.showPreviousButton;
    /** @type {?} */
    NgWizardComponent.prototype.showNextButton;
    /** @type {?} */
    NgWizardComponent.prototype.showToolbarBottom;
    /** @type {?} */
    NgWizardComponent.prototype.showExtraButtons;
    /** @type {?} */
    NgWizardComponent.prototype.current_index;
    /** @type {?} */
    NgWizardComponent.prototype.currentStep;
    /** @type {?} */
    NgWizardComponent.prototype.resetWizardWatcher;
    /** @type {?} */
    NgWizardComponent.prototype.showNextStepWatcher;
    /** @type {?} */
    NgWizardComponent.prototype.showPreviousStepWatcher;
    /** @type {?} */
    NgWizardComponent.prototype.setThemeWatcher;
    /**
     * @type {?}
     * @private
     */
    NgWizardComponent.prototype.ngService;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,