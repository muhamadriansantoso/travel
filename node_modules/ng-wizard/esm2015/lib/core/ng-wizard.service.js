/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { DEFAULT_CONFIG } from '../utils/constants';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { Subject } from 'rxjs';
import { merge } from '../utils/functions';
import * as i0 from "@angular/core";
import * as i1 from "./ng-wizard-config.token";
import * as ɵngcc0 from '@angular/core';
export class NgWizardService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this.defaultConfig = merge(this.defaultConfig, this.config);
        }
        // Observable sources
        this.resetWizard = new Subject();
        this.showNextStep = new Subject();
        this.showPreviousStep = new Subject();
        this.setTheme = new Subject();
        // Observable streams
        this.resetWizard$ = this.resetWizard.asObservable();
        this.showNextStep$ = this.showNextStep.asObservable();
        this.showPreviousStep$ = this.showPreviousStep.asObservable();
        this.setTheme$ = this.setTheme.asObservable();
    }
    /**
     * @return {?}
     */
    getDefaultConfig() {
        return Object.assign({}, this.defaultConfig);
    }
    /**
     * @return {?}
     */
    reset() {
        this.resetWizard.next();
    }
    /**
     * @return {?}
     */
    next() {
        this.showNextStep.next();
    }
    /**
     * @return {?}
     */
    previous() {
        this.showPreviousStep.next();
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    theme(theme) {
        this.setTheme.next(theme);
    }
}
NgWizardService.ɵfac = function NgWizardService_Factory(t) { return new (t || NgWizardService)(ɵngcc0.ɵɵinject(NG_WIZARD_CONFIG_TOKEN, 8)); };
NgWizardService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgWizardService, factory: NgWizardService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgWizardService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_WIZARD_CONFIG_TOKEN,] }] }
];
/** @nocollapse */ NgWizardService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgWizardService_Factory() { return new NgWizardService(i0.ɵɵinject(i1.NG_WIZARD_CONFIG_TOKEN, 8)); }, token: NgWizardService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_WIZARD_CONFIG_TOKEN]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    NgWizardService.prototype.resetWizard$;
    /** @type {?} */
    NgWizardService.prototype.showNextStep$;
    /** @type {?} */
    NgWizardService.prototype.showPreviousStep$;
    /** @type {?} */
    NgWizardService.prototype.setTheme$;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.resetWizard;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showNextStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showPreviousStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.setTheme;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy13aXphcmQvbGliL2NvcmUvbmctd2l6YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbEUsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0M7QUFHQzs7QUFDRCxNQUFNLE9BQU8sZUFBZTtBQUM1QjtBQUFRO0FBQXlCO0FBQVEsSUFXdkMsWUFBZ0UsTUFBc0I7QUFDeEYsUUFEa0UsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7QUFBQyxRQUNyRixJQUFJLENBQUMsYUFBYSxxQkFBUSxjQUFjLENBQUUsQ0FBQztBQUMvQyxRQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNyQixZQUFNLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xFLFNBQUs7QUFDTCxRQUNJLHFCQUFxQjtBQUN6QixRQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztBQUMxQyxRQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztBQUMzQyxRQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0FBQy9DLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO0FBQ3pDLFFBQ0kscUJBQXFCO0FBQ3pCLFFBQUksSUFB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LEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXBEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBYUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBWEEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgREVGQVVMVF9DT05GSUcgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgTkdfV0laQVJEX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vbmctd2l6YXJkLWNvbmZpZy50b2tlbic7XG5pbXBvcnQgeyBOZ1dpemFyZENvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVEhFTUUgfSBmcm9tICcuLi91dGlscy9lbnVtcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4uL3V0aWxzL2Z1bmN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nV2l6YXJkU2VydmljZSB7XG4gIHJlc2V0V2l6YXJkJDogT2JzZXJ2YWJsZTxhbnk+OyAvL0ZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgc2hvd05leHRTdGVwJDogT2JzZXJ2YWJsZTxhbnk+OyAvL0ZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgc2hvd1ByZXZpb3VzU3RlcCQ6IE9ic2VydmFibGU8YW55PjsgLy9Gb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gIHNldFRoZW1lJDogT2JzZXJ2YWJsZTxUSEVNRT47IC8vRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXG4gIHByaXZhdGUgcmVzZXRXaXphcmQ6IFN1YmplY3Q8YW55PjtcbiAgcHJpdmF0ZSBzaG93TmV4dFN0ZXA6IFN1YmplY3Q8YW55PjtcbiAgcHJpdmF0ZSBzaG93UHJldmlvdXNTdGVwOiBTdWJqZWN0PGFueT47XG4gIHByaXZhdGUgc2V0VGhlbWU6IFN1YmplY3Q8VEhFTUU+O1xuICBwcml2YXRlIGRlZmF1bHRDb25maWc6IE5nV2l6YXJkQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfV0laQVJEX0NPTkZJR19UT0tFTikgcHJpdmF0ZSBjb25maWc6IE5nV2l6YXJkQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0Q29uZmlnID0geyAuLi5ERUZBVUxUX0NPTkZJRyB9O1xuICAgIGlmICh0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5kZWZhdWx0Q29uZmlnID0gbWVyZ2UodGhpcy5kZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgLy8gT2JzZXJ2YWJsZSBzb3VyY2VzXG4gICAgdGhpcy5yZXNldFdpemFyZCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICB0aGlzLnNob3dOZXh0U3RlcCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICB0aGlzLnNob3dQcmV2aW91c1N0ZXAgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgdGhpcy5zZXRUaGVtZSA9IG5ldyBTdWJqZWN0PFRIRU1FPigpO1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBzdHJlYW1zXG4gICAgdGhpcy5yZXNldFdpemFyZCQgPSB0aGlzLnJlc2V0V2l6YXJkLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuc2hvd05leHRTdGVwJCA9IHRoaXMuc2hvd05leHRTdGVwLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuc2hvd1ByZXZpb3VzU3RlcCQgPSB0aGlzLnNob3dQcmV2aW91c1N0ZXAuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5zZXRUaGVtZSQgPSB0aGlzLnNldFRoZW1lLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgZ2V0RGVmYXVsdENvbmZpZygpOiBOZ1dpemFyZENvbmZpZyB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5kZWZhdWx0Q29uZmlnIH07XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnJlc2V0V2l6YXJkLm5leHQoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5zaG93TmV4dFN0ZXAubmV4dCgpO1xuICB9XG5cbiAgcHJldmlvdXMoKSB7XG4gICAgdGhpcy5zaG93UHJldmlvdXNTdGVwLm5leHQoKTtcbiAgfVxuXG4gIHRoZW1lKHRoZW1lOiBUSEVNRSkge1xuICAgIHRoaXMuc2V0VGhlbWUubmV4dCh0aGVtZSk7XG4gIH1cbn1cbiJdfQ==