/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { STEP_STATE, STEP_STATUS } from './enums';
import { Input, HostBinding } from '@angular/core';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function Language() { }
if (false) {
    /** @type {?|undefined} */
    Language.prototype.next;
    /** @type {?|undefined} */
    Language.prototype.previous;
}
/**
 * @record
 */
export function ToolbarSettings() { }
if (false) {
    /** @type {?|undefined} */
    ToolbarSettings.prototype.toolbarPosition;
    /** @type {?|undefined} */
    ToolbarSettings.prototype.toolbarButtonPosition;
    /** @type {?|undefined} */
    ToolbarSettings.prototype.showNextButton;
    /** @type {?|undefined} */
    ToolbarSettings.prototype.showPreviousButton;
    /** @type {?|undefined} */
    ToolbarSettings.prototype.toolbarExtraButtons;
}
/**
 * @record
 */
export function ToolbarButton() { }
if (false) {
    /** @type {?} */
    ToolbarButton.prototype.text;
    /** @type {?} */
    ToolbarButton.prototype.class;
    /** @type {?|undefined} */
    ToolbarButton.prototype.event;
}
/**
 * @record
 */
export function AnchorSettings() { }
if (false) {
    /** @type {?|undefined} */
    AnchorSettings.prototype.anchorClickable;
    /** @type {?|undefined} */
    AnchorSettings.prototype.enableAllAnchors;
    /** @type {?|undefined} */
    AnchorSettings.prototype.markDoneStep;
    /** @type {?|undefined} */
    AnchorSettings.prototype.markAllPreviousStepsAsDone;
    /** @type {?|undefined} */
    AnchorSettings.prototype.removeDoneStepOnNavigateBack;
    /** @type {?|undefined} */
    AnchorSettings.prototype.enableAnchorOnDoneStep;
}
/**
 * @record
 */
export function NgWizardConfig() { }
if (false) {
    /** @type {?|undefined} */
    NgWizardConfig.prototype.selected;
    /** @type {?|undefined} */
    NgWizardConfig.prototype.keyNavigation;
    /** @type {?|undefined} */
    NgWizardConfig.prototype.cycleSteps;
    /** @type {?|undefined} */
    NgWizardConfig.prototype.lang;
    /** @type {?|undefined} */
    NgWizardConfig.prototype.toolbarSettings;
    /** @type {?|undefined} */
    NgWizardConfig.prototype.anchorSettings;
    /** @type {?|undefined} */
    NgWizardConfig.prototype.theme;
}
/**
 * @abstract
 */
var NgWizardStep = /** @class */ (function () {
    function NgWizardStep() {
    }
    Object.defineProperty(NgWizardStep.prototype, "hidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status != STEP_STATUS.active;
        },
        enumerable: true,
        configurable: true
    });
    NgWizardStep.propDecorators = {
        title: [{ type: Input }],
        description: [{ type: Input }],
        state: [{ type: Input }],
        hidden: [{ type: HostBinding, args: ['hidden',] }]
    };
NgWizardStep.ɵfac = function NgWizardStep_Factory(t) { return new (t || NgWizardStep)(); };
NgWizardStep.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgWizardStep, hostVars: 1, hostBindings: function NgWizardStep_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("hidden", ctx.hidden);
    } }, inputs: { title: "title", description: "description", state: "state" } });

    return NgWizardStep;
}());
export { NgWizardStep };
if (false) {
    /** @type {?} */
    NgWizardStep.prototype.index;
    /** @type {?} */
    NgWizardStep.prototype.title;
    /** @type {?} */
    NgWizardStep.prototype.description;
    /** @type {?} */
    NgWizardStep.prototype.state;
    /** @type {?} */
    NgWizardStep.prototype.initialState;
    /** @type {?} */
    NgWizardStep.prototype.status;
    /** @type {?} */
    NgWizardStep.prototype.initialStatus;
}
/**
 * @record
 */
export function StepChangedArgs() { }
if (false) {
    /** @type {?} */
    StepChangedArgs.prototype.step;
    /** @type {?} */
    StepChangedArgs.prototype.previousStep;
    /** @type {?} */
    StepChangedArgs.prototype.direction;
    /** @type {?} */
    StepChangedArgs.prototype.position;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZXMiOlsibmc6L25nLXdpemFyZC9saWIvdXRpbHMvaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUEyRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzNILE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25EO0FBQ0c7QUFBVzs7QUFBZCw4QkFHQztBQUNEO0FBQ1k7QUFDSixJQUxKLHdCQUFjO0FBQ2xCO0FBR0ssSUFIRCw0QkFBa0I7QUFDdEI7QUFDQTtBQUNHO0FBQVc7QUFBZCxxQ0FNQztBQUNEO0FBQ1k7QUFDRixJQVJOLDBDQUFtQztBQUFDO0FBQ3BDLElBQUEsZ0RBQWdEO0FBQUM7QUFDcEMsSUFBYix5Q0FBeUI7QUFBQztBQUMxQixJQUFBLDZDQUE2QjtBQUFDO0FBQ2xDLElBQUksOENBQXNDO0FBQUM7QUFBRTtBQUFJO0FBQVc7QUFHNUQsbUNBSUM7QUFDRDtBQUNZO0FBQXFCLElBTDdCLDZCQUFhO0FBQ2pCO0FBQ0UsSUFERSw4QkFBYztBQUNsQjtBQUdJLElBSEEsOEJBQW1CO0FBQ3ZCO0FBQ0E7QUFDRztBQUFXO0FBQWQsb0NBT0M7QUFDRDtBQUNZO0FBQ0gsSUFUTCx5Q0FBMEI7QUFBQztBQUErQixJQUMxRCwwQ0FBMkI7QUFBQztBQUErQixJQUMzRCxzQ0FBdUI7QUFBQztBQUNiLElBQVgsb0RBQXFDO0FBQUM7QUFBK0IsSUFDckUsc0RBQXVDO0FBQUM7QUFBK0IsSUFDdkUsZ0RBQWlDO0FBQUM7QUFBRTtBQUFJO0FBQVc7QUFHdkQsb0NBUUM7QUFDRDtBQUNZO0FBQ04sSUFWRixrQ0FBa0I7QUFBQztBQUErQixJQUNsRCx1Q0FBd0I7QUFBQztBQUErQixJQUN4RCxvQ0FBcUI7QUFBQztBQUErQixJQUNyRCw4QkFBZ0I7QUFBQztBQUErQixJQUNoRCx5Q0FBa0M7QUFDdEM7QUFBK0IsSUFBM0Isd0NBQWdDO0FBQ3BDO0FBQStCLElBQTNCLCtCQUFjO0FBQUM7QUFBRTtBQUFJO0FBQWE7QUFHdEM7QUFDVyxJQURYO0FBQTBCLElBb0IxQixDQUFDO0FBQ0QsSUFMSSxzQkFDVyxnQ0FBTTtBQUFJO0FBQ2xCO0FBQXVCO0FBQVksUUFGdEM7QUFBYyxZQUVWLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDO0FBQ2pELFFBQUksQ0FBQztBQUNKO0FBRXVCO0FBQ1IsT0FKWDtBQUNMO0FBRWlDLHdCQW5CNUIsS0FBSztBQUNSLDhCQUVHLEtBQUs7QUFDUix3QkFFRyxLQUFLO0FBQ1IseUJBTUcsV0FBVyxTQUFDLFFBQVE7QUFDckI7Ozs7O0FBQU07QUFBQyxJQUdYLG1CQUFDO0FBRUQsQ0FGQyxBQXBCRCxJQW9CQztBQUNELFNBckJzQixZQUFZO0FBQ2pDO0FBQWE7QUFHWixJQUhFLDZCQUFjO0FBQ2xCO0FBRU8sSUFESCw2QkFDYztBQUNsQjtBQUVPLElBREgsbUNBQ29CO0FBQ3hCO0FBRU8sSUFESCw2QkFDbUI7QUFDdkI7QUFBcUIsSUFBakIsb0NBQTBCO0FBQzlCO0FBQ29CLElBQWhCLDhCQUFxQjtBQUN6QjtBQUFxQixJQUFqQixxQ0FBNEI7QUFDaEM7QUFDQztBQUFJO0FBQVc7QUFNaEIscUNBS0M7QUFDRDtBQUFhO0FBQXFCLElBTDlCLCtCQUFtQjtBQUN2QjtBQUFxQixJQUFqQix1Q0FBMkI7QUFDL0I7QUFBcUIsSUFBakIsb0NBQWtCO0FBQ3RCO0FBQ0EsSUFESSxtQ0FBZ0I7O0FBbkVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUdBLEFBRkEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQU1BLEFBTEEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUlBLEFBSEEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFPQSxBQU5BLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBUUEsQUFQQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQW9CQSxBQUFBLEFBSkEsQUFDQSxBQUFBLEFBREEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQWhCQSxBQUFBLEFBR0EsQUFBQSxBQUdBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQXBCQSxBQW9CQSxBQXBCQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQ0EsQUFFQSxBQUNBLEFBRUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBS0EsQUFKQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVE9PTEJBUl9QT1NJVElPTiwgVE9PTEJBUl9CVVRUT05fUE9TSVRJT04sLyogVFJBTlNJVElPTl9FRkZFQ1QsKi8gVEhFTUUsIFNURVBfU1RBVEUsIFNURVBfU1RBVFVTIH0gZnJvbSAnLi9lbnVtcyc7XG5pbXBvcnQgeyBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZSB7XG4gICAgbmV4dD86IHN0cmluZztcbiAgICBwcmV2aW91cz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyU2V0dGluZ3Mge1xuICAgIHRvb2xiYXJQb3NpdGlvbj86IFRPT0xCQVJfUE9TSVRJT047IC8vIG5vbmUsIHRvcCwgYm90dG9tLCBib3RoXG4gICAgdG9vbGJhckJ1dHRvblBvc2l0aW9uPzogVE9PTEJBUl9CVVRUT05fUE9TSVRJT047IC8vIHN0YXJ0LCBlbmRcbiAgICBzaG93TmV4dEJ1dHRvbj86IGJvb2xlYW47IC8vIHNob3cvaGlkZSBhIE5leHQgYnV0dG9uXG4gICAgc2hvd1ByZXZpb3VzQnV0dG9uPzogYm9vbGVhbjsgLy8gc2hvdy9oaWRlIGEgUHJldmlvdXMgYnV0dG9uXG4gICAgdG9vbGJhckV4dHJhQnV0dG9ucz86IFRvb2xiYXJCdXR0b25bXTsgLy8gRXh0cmEgYnV0dG9ucyB0byBzaG93IG9uIHRvb2xiYXIsIGFycmF5IG9mIGlucHV0L2J1dHRvbnMgZWxlbWVudHNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyQnV0dG9uIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgY2xhc3M6IHN0cmluZztcbiAgICBldmVudD86ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5jaG9yU2V0dGluZ3Mge1xuICAgIGFuY2hvckNsaWNrYWJsZT86IGJvb2xlYW47IC8vIEVuYWJsZS9EaXNhYmxlIGFuY2hvciBuYXZpZ2F0aW9uXG4gICAgZW5hYmxlQWxsQW5jaG9ycz86IGJvb2xlYW47IC8vIEFjdGl2YXRlcyBhbGwgYW5jaG9ycyBjbGlja2FibGUgYWxsIHRpbWVzXG4gICAgbWFya0RvbmVTdGVwPzogYm9vbGVhbjsgLy8gQWRkIGRvbmUgY3NzXG4gICAgbWFya0FsbFByZXZpb3VzU3RlcHNBc0RvbmU/OiBib29sZWFuOyAvLyBXaGVuIGEgc3RlcCBzZWxlY3RlZCwgYWxsIHByZXZpb3VzIHN0ZXBzIGFyZSBtYXJrZWQgZG9uZVxuICAgIHJlbW92ZURvbmVTdGVwT25OYXZpZ2F0ZUJhY2s/OiBib29sZWFuOyAvLyBXaGlsZSBuYXZpZ2F0ZSBiYWNrIGRvbmUgc3RlcCBhZnRlciBhY3RpdmUgc3RlcCB3aWxsIGJlIGNsZWFyZWRcbiAgICBlbmFibGVBbmNob3JPbkRvbmVTdGVwPzogYm9vbGVhbjsgLy8gRW5hYmxlL0Rpc2FibGUgdGhlIGRvbmUgc3RlcHMgbmF2aWdhdGlvblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5nV2l6YXJkQ29uZmlnIHtcbiAgICBzZWxlY3RlZD86IG51bWJlcjsgLy8gSW5pdGlhbCBzZWxlY3RlZCBzdGVwLCAwID0gZmlyc3Qgc3RlcFxuICAgIGtleU5hdmlnYXRpb24/OiBib29sZWFuOyAvLyBFbmFibGUvRGlzYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uKGxlZnQgYW5kIHJpZ2h0IGtleXMgYXJlIHVzZWQgaWYgZW5hYmxlZClcbiAgICBjeWNsZVN0ZXBzPzogYm9vbGVhbjsgLy8gQWxsb3dzIHRvIGN5Y2xlIHRoZSBuYXZpZ2F0aW9uIG9mIHN0ZXBzXG4gICAgbGFuZz86IExhbmd1YWdlOyAvLyBMYW5ndWFnZSB2YXJpYWJsZXMgZm9yIGJ1dHRvblxuICAgIHRvb2xiYXJTZXR0aW5ncz86IFRvb2xiYXJTZXR0aW5ncztcbiAgICBhbmNob3JTZXR0aW5ncz86IEFuY2hvclNldHRpbmdzO1xuICAgIHRoZW1lPzogVEhFTUU7IC8vIHRoZW1lIGZvciB0aGUgd2l6YXJkLCByZWxhdGVkIGNzcyBuZWVkIHRvIGluY2x1ZGUgZm9yIG90aGVyIHRoYW4gZGVmYXVsdCB0aGVtZVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmdXaXphcmRTdGVwIHtcbiAgICBpbmRleDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICB0aXRsZTogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBzdGF0ZT86IFNURVBfU1RBVEU7XG4gICAgaW5pdGlhbFN0YXRlPzogU1RFUF9TVEFURTtcblxuICAgIHN0YXR1cz86IFNURVBfU1RBVFVTO1xuICAgIGluaXRpYWxTdGF0dXM/OiBTVEVQX1NUQVRVUztcblxuICAgIEBIb3N0QmluZGluZygnaGlkZGVuJylcbiAgICBwdWJsaWMgZ2V0IGhpZGRlbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzICE9IFNURVBfU1RBVFVTLmFjdGl2ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RlcENoYW5nZWRBcmdzIHtcbiAgICBzdGVwOiBOZ1dpemFyZFN0ZXAsXG4gICAgcHJldmlvdXNTdGVwOiBOZ1dpemFyZFN0ZXAsXG4gICAgZGlyZWN0aW9uOiBzdHJpbmcsXG4gICAgcG9zaXRpb246IHN0cmluZ1xufVxuIl19