/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { NgWizardStepComponent } from './wizard-step/ng-wizard-step.component';
import { NgWizardComponent } from './wizard/ng-wizard.component';
import * as ɵngcc0 from '@angular/core';
var NgWizardModule = /** @class */ (function () {
    function NgWizardModule() {
    }
    /**
     * forRoot
     * @returns A module with its provider dependencies
     */
    /**
     * forRoot
     * @param {?} ngWizardConfig
     * @return {?} A module with its provider dependencies
     */
    NgWizardModule.forRoot = /**
     * forRoot
     * @param {?} ngWizardConfig
     * @return {?} A module with its provider dependencies
     */
    function (ngWizardConfig) {
        return {
            ngModule: NgWizardModule,
            providers: [
                {
                    provide: NG_WIZARD_CONFIG_TOKEN,
                    useValue: ngWizardConfig
                }
            ]
        };
    };
NgWizardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWizardModule });
NgWizardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWizardModule_Factory(t) { return new (t || NgWizardModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWizardModule, { declarations: function () { return [NgWizardComponent, NgWizardStepComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgWizardComponent, NgWizardStepComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NgWizardComponent, NgWizardStepComponent],
                exports: [NgWizardComponent, NgWizardStepComponent]
            }]
    }], function () { return []; }, null); })();
    return NgWizardModule;
}());
export { NgWizardModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L25nLXdpemFyZC9saWIvY29yZS9uZy13aXphcmQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHL0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRWpFO0FBRVcsSUFGWDtBQUNnQixJQW9CaEIsQ0FBQztBQUNELElBaEJFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTDtBQUFRO0FBQWU7QUFBaUM7QUFFMUI7QUFDeEIsSUFIRyxzQkFBTztBQUFPO0FBQWU7QUFBaUM7QUFHMUQ7QUFDWCxJQUpBLFVBQWUsY0FBOEI7QUFBSSxRQUMvQyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsY0FBYztBQUM5QixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxzQkFBc0I7QUFDekMsb0JBQVUsUUFBUSxFQUFFLGNBQWM7QUFDbEMsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO2tEQXBCRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLHNCQUN2QixZQUFZLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsQ0FBQyxzQkFDeEQsT0FBTyxFQUFFLENBQUM7R0FBaUIsRUFBRSxxQkFBcUIsQ0FBQyxrQkFDcEQ7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFnQlYscUJBQUM7QUFDQSxDQURBLEFBckJELElBcUJDOztBQTdCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFxQkEsQUFBQSxBQWZBLEFBR0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBcEJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFpQkEsQUFBQSxBQUFBLEFBckJBLEFBcUJBLEFBaEJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgTmdXaXphcmRDb25maWcgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE5HX1dJWkFSRF9DT05GSUdfVE9LRU4gfSBmcm9tICcuL25nLXdpemFyZC1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgTmdXaXphcmRTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi93aXphcmQtc3RlcC9uZy13aXphcmQtc3RlcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdXaXphcmRDb21wb25lbnQgfSBmcm9tICcuL3dpemFyZC9uZy13aXphcmQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW05nV2l6YXJkQ29tcG9uZW50LCBOZ1dpemFyZFN0ZXBDb21wb25lbnRdLFxuICBleHBvcnRzOiBbTmdXaXphcmRDb21wb25lbnQsIE5nV2l6YXJkU3RlcENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmdXaXphcmRNb2R1bGUge1xuICAvKipcbiAgICogZm9yUm9vdFxuICAgKiBAcmV0dXJucyBBIG1vZHVsZSB3aXRoIGl0cyBwcm92aWRlciBkZXBlbmRlbmNpZXNcbiAgICovXG4gIHN0YXRpYyBmb3JSb290KG5nV2l6YXJkQ29uZmlnOiBOZ1dpemFyZENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdXaXphcmRNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HX1dJWkFSRF9DT05GSUdfVE9LRU4sXG4gICAgICAgICAgdXNlVmFsdWU6IG5nV2l6YXJkQ29uZmlnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=