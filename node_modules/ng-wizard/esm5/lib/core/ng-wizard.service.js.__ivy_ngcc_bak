/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { DEFAULT_CONFIG } from '../utils/constants';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { Subject } from 'rxjs';
import { merge } from '../utils/functions';
import * as i0 from "@angular/core";
import * as i1 from "./ng-wizard-config.token";
var NgWizardService = /** @class */ (function () {
    function NgWizardService(config) {
        this.config = config;
        this.defaultConfig = tslib_1.__assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this.defaultConfig = merge(this.defaultConfig, this.config);
        }
        // Observable sources
        this.resetWizard = new Subject();
        this.showNextStep = new Subject();
        this.showPreviousStep = new Subject();
        this.setTheme = new Subject();
        // Observable streams
        this.resetWizard$ = this.resetWizard.asObservable();
        this.showNextStep$ = this.showNextStep.asObservable();
        this.showPreviousStep$ = this.showPreviousStep.asObservable();
        this.setTheme$ = this.setTheme.asObservable();
    }
    /**
     * @return {?}
     */
    NgWizardService.prototype.getDefaultConfig = /**
     * @return {?}
     */
    function () {
        return tslib_1.__assign({}, this.defaultConfig);
    };
    /**
     * @return {?}
     */
    NgWizardService.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.resetWizard.next();
    };
    /**
     * @return {?}
     */
    NgWizardService.prototype.next = /**
     * @return {?}
     */
    function () {
        this.showNextStep.next();
    };
    /**
     * @return {?}
     */
    NgWizardService.prototype.previous = /**
     * @return {?}
     */
    function () {
        this.showPreviousStep.next();
    };
    /**
     * @param {?} theme
     * @return {?}
     */
    NgWizardService.prototype.theme = /**
     * @param {?} theme
     * @return {?}
     */
    function (theme) {
        this.setTheme.next(theme);
    };
    NgWizardService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgWizardService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_WIZARD_CONFIG_TOKEN,] }] }
    ]; };
    /** @nocollapse */ NgWizardService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgWizardService_Factory() { return new NgWizardService(i0.ɵɵinject(i1.NG_WIZARD_CONFIG_TOKEN, 8)); }, token: NgWizardService, providedIn: "root" });
    return NgWizardService;
}());
export { NgWizardService };
if (false) {
    /** @type {?} */
    NgWizardService.prototype.resetWizard$;
    /** @type {?} */
    NgWizardService.prototype.showNextStep$;
    /** @type {?} */
    NgWizardService.prototype.showPreviousStep$;
    /** @type {?} */
    NgWizardService.prototype.setTheme$;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.resetWizard;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showNextStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.showPreviousStep;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.setTheme;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy13aXphcmQvIiwic291cmNlcyI6WyJsaWIvY29yZS9uZy13aXphcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbEUsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQUUzQztJQWVFLHlCQUFnRSxNQUFzQjtRQUF0QixXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUNwRixJQUFJLENBQUMsYUFBYSx3QkFBUSxjQUFjLENBQUUsQ0FBQztRQUMzQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3RDtRQUVELHFCQUFxQjtRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVMsQ0FBQztRQUVyQyxxQkFBcUI7UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzlELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsMENBQWdCOzs7SUFBaEI7UUFDRSw0QkFBWSxJQUFJLENBQUMsYUFBYSxFQUFHO0lBQ25DLENBQUM7Ozs7SUFFRCwrQkFBSzs7O0lBQUw7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCw4QkFBSTs7O0lBQUo7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxrQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFRCwrQkFBSzs7OztJQUFMLFVBQU0sS0FBWTtRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOztnQkFwREYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnREFhYyxRQUFRLFlBQUksTUFBTSxTQUFDLHNCQUFzQjs7OzBCQXhCeEQ7Q0E4REMsQUFyREQsSUFxREM7U0FsRFksZUFBZTs7O0lBQzFCLHVDQUE4Qjs7SUFDOUIsd0NBQStCOztJQUMvQiw0Q0FBbUM7O0lBQ25DLG9DQUE2Qjs7Ozs7SUFFN0Isc0NBQWtDOzs7OztJQUNsQyx1Q0FBbUM7Ozs7O0lBQ25DLDJDQUF1Qzs7Ozs7SUFDdkMsbUNBQWlDOzs7OztJQUNqQyx3Q0FBc0M7Ozs7O0lBRTFCLGlDQUEwRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgREVGQVVMVF9DT05GSUcgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgTkdfV0laQVJEX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vbmctd2l6YXJkLWNvbmZpZy50b2tlbic7XG5pbXBvcnQgeyBOZ1dpemFyZENvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVEhFTUUgfSBmcm9tICcuLi91dGlscy9lbnVtcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4uL3V0aWxzL2Z1bmN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nV2l6YXJkU2VydmljZSB7XG4gIHJlc2V0V2l6YXJkJDogT2JzZXJ2YWJsZTxhbnk+OyAvL0ZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgc2hvd05leHRTdGVwJDogT2JzZXJ2YWJsZTxhbnk+OyAvL0ZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgc2hvd1ByZXZpb3VzU3RlcCQ6IE9ic2VydmFibGU8YW55PjsgLy9Gb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gIHNldFRoZW1lJDogT2JzZXJ2YWJsZTxUSEVNRT47IC8vRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXG4gIHByaXZhdGUgcmVzZXRXaXphcmQ6IFN1YmplY3Q8YW55PjtcbiAgcHJpdmF0ZSBzaG93TmV4dFN0ZXA6IFN1YmplY3Q8YW55PjtcbiAgcHJpdmF0ZSBzaG93UHJldmlvdXNTdGVwOiBTdWJqZWN0PGFueT47XG4gIHByaXZhdGUgc2V0VGhlbWU6IFN1YmplY3Q8VEhFTUU+O1xuICBwcml2YXRlIGRlZmF1bHRDb25maWc6IE5nV2l6YXJkQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfV0laQVJEX0NPTkZJR19UT0tFTikgcHJpdmF0ZSBjb25maWc6IE5nV2l6YXJkQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0Q29uZmlnID0geyAuLi5ERUZBVUxUX0NPTkZJRyB9O1xuICAgIGlmICh0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5kZWZhdWx0Q29uZmlnID0gbWVyZ2UodGhpcy5kZWZhdWx0Q29uZmlnLCB0aGlzLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgLy8gT2JzZXJ2YWJsZSBzb3VyY2VzXG4gICAgdGhpcy5yZXNldFdpemFyZCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICB0aGlzLnNob3dOZXh0U3RlcCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICB0aGlzLnNob3dQcmV2aW91c1N0ZXAgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgdGhpcy5zZXRUaGVtZSA9IG5ldyBTdWJqZWN0PFRIRU1FPigpO1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBzdHJlYW1zXG4gICAgdGhpcy5yZXNldFdpemFyZCQgPSB0aGlzLnJlc2V0V2l6YXJkLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuc2hvd05leHRTdGVwJCA9IHRoaXMuc2hvd05leHRTdGVwLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuc2hvd1ByZXZpb3VzU3RlcCQgPSB0aGlzLnNob3dQcmV2aW91c1N0ZXAuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5zZXRUaGVtZSQgPSB0aGlzLnNldFRoZW1lLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgZ2V0RGVmYXVsdENvbmZpZygpOiBOZ1dpemFyZENvbmZpZyB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5kZWZhdWx0Q29uZmlnIH07XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnJlc2V0V2l6YXJkLm5leHQoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5zaG93TmV4dFN0ZXAubmV4dCgpO1xuICB9XG5cbiAgcHJldmlvdXMoKSB7XG4gICAgdGhpcy5zaG93UHJldmlvdXNTdGVwLm5leHQoKTtcbiAgfVxuXG4gIHRoZW1lKHRoZW1lOiBUSEVNRSkge1xuICAgIHRoaXMuc2V0VGhlbWUubmV4dCh0aGVtZSk7XG4gIH1cbn1cbiJdfQ==