import { TOOLBAR_POSITION, TOOLBAR_BUTTON_POSITION, /* TRANSITION_EFFECT,*/ THEME, STEP_STATE, STEP_STATUS } from './enums';
import * as ɵngcc0 from '@angular/core';
export interface Language {
    next?: string;
    previous?: string;
}
export interface ToolbarSettings {
    toolbarPosition?: TOOLBAR_POSITION;
    toolbarButtonPosition?: TOOLBAR_BUTTON_POSITION;
    showNextButton?: boolean;
    showPreviousButton?: boolean;
    toolbarExtraButtons?: ToolbarButton[];
}
export interface ToolbarButton {
    text: string;
    class: string;
    event?: () => void;
}
export interface AnchorSettings {
    anchorClickable?: boolean;
    enableAllAnchors?: boolean;
    markDoneStep?: boolean;
    markAllPreviousStepsAsDone?: boolean;
    removeDoneStepOnNavigateBack?: boolean;
    enableAnchorOnDoneStep?: boolean;
}
export interface NgWizardConfig {
    selected?: number;
    keyNavigation?: boolean;
    cycleSteps?: boolean;
    lang?: Language;
    toolbarSettings?: ToolbarSettings;
    anchorSettings?: AnchorSettings;
    theme?: THEME;
}
export declare abstract class NgWizardStep {
    index: number;
    title: string;
    description: string;
    state?: STEP_STATE;
    initialState?: STEP_STATE;
    status?: STEP_STATUS;
    initialStatus?: STEP_STATUS;
    readonly hidden: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgWizardStep, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgWizardStep, never, never, { "title": "title"; "description": "description"; "state": "state"; }, {}, never>;
}
export interface StepChangedArgs {
    step: NgWizardStep;
    previousStep: NgWizardStep;
    direction: string;
    position: string;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5kLnRzIiwic291cmNlcyI6WyJpbnRlcmZhY2VzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRPT0xCQVJfUE9TSVRJT04sIFRPT0xCQVJfQlVUVE9OX1BPU0lUSU9OLCAvKiBUUkFOU0lUSU9OX0VGRkVDVCwqLyBUSEVNRSwgU1RFUF9TVEFURSwgU1RFUF9TVEFUVVMgfSBmcm9tICcuL2VudW1zJztcclxuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZSB7XHJcbiAgICBuZXh0Pzogc3RyaW5nO1xyXG4gICAgcHJldmlvdXM/OiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyU2V0dGluZ3Mge1xyXG4gICAgdG9vbGJhclBvc2l0aW9uPzogVE9PTEJBUl9QT1NJVElPTjtcclxuICAgIHRvb2xiYXJCdXR0b25Qb3NpdGlvbj86IFRPT0xCQVJfQlVUVE9OX1BPU0lUSU9OO1xyXG4gICAgc2hvd05leHRCdXR0b24/OiBib29sZWFuO1xyXG4gICAgc2hvd1ByZXZpb3VzQnV0dG9uPzogYm9vbGVhbjtcclxuICAgIHRvb2xiYXJFeHRyYUJ1dHRvbnM/OiBUb29sYmFyQnV0dG9uW107XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyQnV0dG9uIHtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIGNsYXNzOiBzdHJpbmc7XHJcbiAgICBldmVudD86ICgpID0+IHZvaWQ7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBBbmNob3JTZXR0aW5ncyB7XHJcbiAgICBhbmNob3JDbGlja2FibGU/OiBib29sZWFuO1xyXG4gICAgZW5hYmxlQWxsQW5jaG9ycz86IGJvb2xlYW47XHJcbiAgICBtYXJrRG9uZVN0ZXA/OiBib29sZWFuO1xyXG4gICAgbWFya0FsbFByZXZpb3VzU3RlcHNBc0RvbmU/OiBib29sZWFuO1xyXG4gICAgcmVtb3ZlRG9uZVN0ZXBPbk5hdmlnYXRlQmFjaz86IGJvb2xlYW47XHJcbiAgICBlbmFibGVBbmNob3JPbkRvbmVTdGVwPzogYm9vbGVhbjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIE5nV2l6YXJkQ29uZmlnIHtcclxuICAgIHNlbGVjdGVkPzogbnVtYmVyO1xyXG4gICAga2V5TmF2aWdhdGlvbj86IGJvb2xlYW47XHJcbiAgICBjeWNsZVN0ZXBzPzogYm9vbGVhbjtcclxuICAgIGxhbmc/OiBMYW5ndWFnZTtcclxuICAgIHRvb2xiYXJTZXR0aW5ncz86IFRvb2xiYXJTZXR0aW5ncztcclxuICAgIGFuY2hvclNldHRpbmdzPzogQW5jaG9yU2V0dGluZ3M7XHJcbiAgICB0aGVtZT86IFRIRU1FO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIE5nV2l6YXJkU3RlcCB7XHJcbiAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBzdGF0ZT86IFNURVBfU1RBVEU7XHJcbiAgICBpbml0aWFsU3RhdGU/OiBTVEVQX1NUQVRFO1xyXG4gICAgc3RhdHVzPzogU1RFUF9TVEFUVVM7XHJcbiAgICBpbml0aWFsU3RhdHVzPzogU1RFUF9TVEFUVVM7XHJcbiAgICByZWFkb25seSBoaWRkZW46IGJvb2xlYW47XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTdGVwQ2hhbmdlZEFyZ3Mge1xyXG4gICAgc3RlcDogTmdXaXphcmRTdGVwO1xyXG4gICAgcHJldmlvdXNTdGVwOiBOZ1dpemFyZFN0ZXA7XHJcbiAgICBkaXJlY3Rpb246IHN0cmluZztcclxuICAgIHBvc2l0aW9uOiBzdHJpbmc7XHJcbn1cclxuIl19