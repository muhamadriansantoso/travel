import { ClassProvider, FactoryProvider, InjectionToken } from '@angular/core';
/**
 * Create a new injection token for injecting the window into a component.
 */
import * as ɵngcc0 from '@angular/core';
export declare const WINDOW: InjectionToken<{}>;
/**
 * Define abstract class for obtaining reference to the global window object.
 */
export declare abstract class WindowRef {
    readonly nativeWindow: Window | Object;
}
/**
 * Define class that implements the abstract class and returns the native window object.
 */
export declare class BrowserWindowRef extends WindowRef {
    constructor();
    /**
     * @returns window object
     */
    readonly nativeWindow: Window | Object;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BrowserWindowRef, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BrowserWindowRef>;
}
/**
 * Create an factory function that returns the native window object.
 * @param browserWindowRef Native window object
 * @param platformId id of platform
 * @returns type of platform of empty object
 */
export declare function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object;
/**
 * Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class.
 */
export declare const browserWindowProvider: ClassProvider;
/**
 * Create an injectable provider that uses the windowFactory function for returning the native window object.
 */
export declare const windowProvider: FactoryProvider;
/**
 * Create an array of providers.
 */
export declare const WINDOW_PROVIDERS: (ClassProvider | FactoryProvider)[];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXJlZi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIndpbmRvdy1yZWYuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xhc3NQcm92aWRlciwgRmFjdG9yeVByb3ZpZGVyLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQ3JlYXRlIGEgbmV3IGluamVjdGlvbiB0b2tlbiBmb3IgaW5qZWN0aW5nIHRoZSB3aW5kb3cgaW50byBhIGNvbXBvbmVudC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFdJTkRPVzogSW5qZWN0aW9uVG9rZW48e30+O1xyXG4vKipcclxuICogRGVmaW5lIGFic3RyYWN0IGNsYXNzIGZvciBvYnRhaW5pbmcgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgd2luZG93IG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFdpbmRvd1JlZiB7XHJcbiAgICByZWFkb25seSBuYXRpdmVXaW5kb3c6IFdpbmRvdyB8IE9iamVjdDtcclxufVxyXG4vKipcclxuICogRGVmaW5lIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgYWJzdHJhY3QgY2xhc3MgYW5kIHJldHVybnMgdGhlIG5hdGl2ZSB3aW5kb3cgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnJvd3NlcldpbmRvd1JlZiBleHRlbmRzIFdpbmRvd1JlZiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyB3aW5kb3cgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IG5hdGl2ZVdpbmRvdzogV2luZG93IHwgT2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5hdGl2ZSB3aW5kb3cgb2JqZWN0LlxyXG4gKiBAcGFyYW0gYnJvd3NlcldpbmRvd1JlZiBOYXRpdmUgd2luZG93IG9iamVjdFxyXG4gKiBAcGFyYW0gcGxhdGZvcm1JZCBpZCBvZiBwbGF0Zm9ybVxyXG4gKiBAcmV0dXJucyB0eXBlIG9mIHBsYXRmb3JtIG9mIGVtcHR5IG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gd2luZG93RmFjdG9yeShicm93c2VyV2luZG93UmVmOiBCcm93c2VyV2luZG93UmVmLCBwbGF0Zm9ybUlkOiBPYmplY3QpOiBXaW5kb3cgfCBPYmplY3Q7XHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBpbmplY3RhYmxlIHByb3ZpZGVyIGZvciB0aGUgV2luZG93UmVmIHRva2VuIHRoYXQgdXNlcyB0aGUgQnJvd3NlcldpbmRvd1JlZiBjbGFzcy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGJyb3dzZXJXaW5kb3dQcm92aWRlcjogQ2xhc3NQcm92aWRlcjtcclxuLyoqXHJcbiAqIENyZWF0ZSBhbiBpbmplY3RhYmxlIHByb3ZpZGVyIHRoYXQgdXNlcyB0aGUgd2luZG93RmFjdG9yeSBmdW5jdGlvbiBmb3IgcmV0dXJuaW5nIHRoZSBuYXRpdmUgd2luZG93IG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHdpbmRvd1Byb3ZpZGVyOiBGYWN0b3J5UHJvdmlkZXI7XHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gYXJyYXkgb2YgcHJvdmlkZXJzLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgV0lORE9XX1BST1ZJREVSUzogKENsYXNzUHJvdmlkZXIgfCBGYWN0b3J5UHJvdmlkZXIpW107XHJcbiJdfQ==