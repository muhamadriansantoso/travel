import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { merge, of } from 'rxjs';
import { tap, skip, take } from 'rxjs/operators';
import { CarouselService } from './carousel.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var HashService = /** @class */ (function () {
    function HashService(carouselService, route, router) {
        this.carouselService = carouselService;
        this.route = route;
        this.router = router;
        this.spyDataStreams();
        if (!this.route) {
            this.route = {
                fragment: of('no route').pipe(take(1))
            };
        }
        ;
        if (!this.router) {
            this.router = {
                navigate: function (commands, extras) { return; }
            };
        }
    }
    HashService.prototype.ngOnDestroy = function () {
        this.hashSubscription.unsubscribe();
    };
    /**
     * Defines Observables which service must observe
     */
    HashService.prototype.spyDataStreams = function () {
        var _this = this;
        var initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(function () { return _this.listenToRoute(); }));
        var changedSettings$ = this.carouselService.getChangedState().pipe(tap(function (data) {
            if (_this.carouselService.settings.URLhashListener && data.property.name === 'position') {
                var newCurSlide = _this.carouselService.current();
                var newCurFragment = _this.carouselService.slidesData[newCurSlide].hashFragment;
                if (!newCurFragment || newCurFragment === _this.currentHashFragment) {
                    return;
                }
                _this.router.navigate(['./'], { fragment: newCurFragment, relativeTo: _this.route });
            }
        }));
        var hashFragment$ = merge(initializedCarousel$, changedSettings$);
        this.hashSubscription = hashFragment$.subscribe(function () { });
    };
    /**
     * rewinds carousel to slide which has the same hashFragment as fragment of current url
     * @param fragment fragment of url
     */
    HashService.prototype.rewind = function (fragment) {
        var position = this.carouselService.slidesData.findIndex(function (slide) { return slide.hashFragment === fragment && slide.isCloned === false; });
        if (position === -1 || position === this.carouselService.current()) {
            return;
        }
        this.carouselService.to(this.carouselService.relative(position), false);
    };
    /**
     * Initiate listening to ActivatedRoute.fragment
     */
    HashService.prototype.listenToRoute = function () {
        var _this = this;
        var count = this.carouselService.settings.startPosition === 'URLHash' ? 0 : 2;
        this.route.fragment.pipe(skip(count))
            .subscribe(function (fragment) {
            _this.currentHashFragment = fragment;
            _this.rewind(fragment);
        });
    };
    HashService = tslib_1.__decorate([ tslib_1.__param(1, Optional()),
        tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [CarouselService,
            ActivatedRoute,
            Router])
    ], HashService);
HashService.ɵfac = function HashService_Factory(t) { return new (t || HashService)(ɵngcc0.ɵɵinject(CarouselService), ɵngcc0.ɵɵinject(ɵngcc1.ActivatedRoute, 8), ɵngcc0.ɵɵinject(ɵngcc1.Router, 8)); };
HashService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HashService, factory: function (t) { return HashService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HashService, [{
        type: Injectable
    }], function () { return [{ type: CarouselService }, { type: ɵngcc1.ActivatedRoute, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.Router, decorators: [{
                type: Optional
            }] }]; }, null); })();
    return HashService;
}());
export { HashService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,