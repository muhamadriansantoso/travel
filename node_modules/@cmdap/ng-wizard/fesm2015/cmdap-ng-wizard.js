import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { Injectable, Component, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns true if the component extends the NgWizardStep class or implements the NgWizardStepInterface.
 *
 * @param {?} componentRef The reference to the component to verify
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@angular/common';

function NgWizardErrorComponent_div_0_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "br");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵelementStart(5, "pre");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r292 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" No route configuration for the ", ctx_r292.error.wizardComponentName, " found.");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" Add a route for the ", ctx_r292.error.wizardComponentName, " to your AppRoutingModule.");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1("const routes: Routes = [\n    { path: '', component: ", ctx_r292.error.wizardComponentName, " },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }");
} }
function NgWizardErrorComponent_div_0_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "br");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵelementStart(5, "pre");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r293 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" No child routes for the ", ctx_r293.error.wizardComponentName, " found.");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" Add at least one child route for the ", ctx_r293.error.wizardComponentName, " to your AppRoutingModule.");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate2("{ path: '", ctx_r293.error.wizardPath, "', component: ", ctx_r293.error.wizardComponentName, ", children: [\n    { path: 'step1', component: Step1Component },\n    { path: '**', redirectTo: 'step1' },\n] },");
} }
function NgWizardErrorComponent_div_0_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "br");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵelementStart(5, "pre");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "br");
    ɵngcc0.ɵɵtext(8, " or");
    ɵngcc0.ɵɵelement(9, "br");
    ɵngcc0.ɵɵelementStart(10, "pre");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r294 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" The ", ctx_r294.error.stepComponentName, " does not extend the NgWizardStep class or implement the NgWizardStepInterface.");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" Extend the NgWizardStep class in your ", ctx_r294.error.stepComponentName, " or implement the NgWizardStepInterface.");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1("@NgComponent(...)\nexport class ", ctx_r294.error.stepComponentName, " extends NgWizardStep {\n    constructor() {\n        super();\n    }\n}");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1("@NgComponent(...)\nexport class ", ctx_r294.error.stepComponentName, " implements NgWizardStepInterface {\n    wsIsValid() {\n        return true;\n    }\n    wsOnNext() { }\n    wsOnPrevious() { }\n}");
} }
function NgWizardErrorComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵtemplate(2, NgWizardErrorComponent_div_0_span_2_Template, 7, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(3, NgWizardErrorComponent_div_0_span_3_Template, 7, 4, "span", 4);
    ɵngcc0.ɵɵtemplate(4, NgWizardErrorComponent_div_0_span_4_Template, 12, 4, "span", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r291 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r291.error.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r291.NgWizardErrorType.NO_WIZARD_ROUTE);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r291.NgWizardErrorType.NO_CHILD_ROUTES);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r291.NgWizardErrorType.NO_WS_INTERFACE);
} }
const _c0 = function (a0, a1) { return { "ng-wizard-navigation-link": a0, "ng-wizard-navigation-disabled": a1 }; };
function NgWizardNavigationComponent_li_3_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelement(1, "span", 9);
    ɵngcc0.ɵɵelementStart(2, "span", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const stepData_r296 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r297 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c0, !(ctx_r297.currentStepData == null ? null : ctx_r297.currentStepData.options.disableNavigation), ctx_r297.currentStepData == null ? null : ctx_r297.currentStepData.options.disableNavigation));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", stepData_r296.options.icon || ctx_r297.wizardOptions.navBar.icons.previous, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", stepData_r296.options.title, " ");
} }
function NgWizardNavigationComponent_li_3_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelement(1, "span", 9);
    ɵngcc0.ɵɵelementStart(2, "span", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const stepData_r296 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r298 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", stepData_r296.options.icon || ctx_r298.wizardOptions.navBar.icons.current, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", stepData_r296.options.title, " ");
} }
function NgWizardNavigationComponent_li_3_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelement(1, "span", 9);
    ɵngcc0.ɵɵelementStart(2, "span", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const stepData_r296 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r299 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", stepData_r296.options.icon || ctx_r299.wizardOptions.navBar.icons.next, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", stepData_r296.options.title, " ");
} }
function NgWizardNavigationComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r304 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵlistener("click", function NgWizardNavigationComponent_li_3_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r304); const stepData_r296 = ctx.$implicit; const ctx_r303 = ɵngcc0.ɵɵnextContext(); return ctx_r303.goToStep(stepData_r296); });
    ɵngcc0.ɵɵtemplate(1, NgWizardNavigationComponent_li_3_div_1_Template, 4, 6, "div", 5);
    ɵngcc0.ɵɵtemplate(2, NgWizardNavigationComponent_li_3_div_2_Template, 4, 2, "div", 6);
    ɵngcc0.ɵɵtemplate(3, NgWizardNavigationComponent_li_3_div_3_Template, 4, 2, "div", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const stepData_r296 = ctx.$implicit;
    const ctx_r295 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (stepData_r296 == null ? null : stepData_r296.order) < (ctx_r295.currentStepData == null ? null : ctx_r295.currentStepData.order));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (stepData_r296 == null ? null : stepData_r296.order) === (ctx_r295.currentStepData == null ? null : ctx_r295.currentStepData.order));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (stepData_r296 == null ? null : stepData_r296.order) > (ctx_r295.currentStepData == null ? null : ctx_r295.currentStepData.order));
} }
function NgWizardButtonsComponent_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r312 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function NgWizardButtonsComponent_div_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r312); const currentStepData_r306 = ɵngcc0.ɵɵnextContext().ngIf; const ctx_r310 = ɵngcc0.ɵɵnextContext(); return ctx_r310.goToPath(currentStepData_r306.options.buttons == null ? null : currentStepData_r306.options.buttons.extra.path); });
    ɵngcc0.ɵɵelement(1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentStepData_r306 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", currentStepData_r306.options.buttons.extra.label, ɵngcc0.ɵɵsanitizeHtml);
} }
function NgWizardButtonsComponent_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r315 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function NgWizardButtonsComponent_div_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r315); const ctx_r314 = ɵngcc0.ɵɵnextContext(2); return ctx_r314.goToPreviousStep(); });
    ɵngcc0.ɵɵelement(1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentStepData_r306 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r308 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", (currentStepData_r306.options.buttons == null ? null : currentStepData_r306.options.buttons.previous == null ? null : currentStepData_r306.options.buttons.previous.label) || ctx_r308.wizardOptions.buttons.previous.label, ɵngcc0.ɵɵsanitizeHtml);
} }
function NgWizardButtonsComponent_div_1_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r318 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function NgWizardButtonsComponent_div_1_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r318); const ctx_r317 = ɵngcc0.ɵɵnextContext(2); return ctx_r317.goToNextStep(); });
    ɵngcc0.ɵɵelement(1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentStepData_r306 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r309 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", (currentStepData_r306.options.buttons == null ? null : currentStepData_r306.options.buttons.next == null ? null : currentStepData_r306.options.buttons.next.label) || ctx_r309.wizardOptions.buttons.next.label, ɵngcc0.ɵɵsanitizeHtml);
} }
function NgWizardButtonsComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtemplate(1, NgWizardButtonsComponent_div_1_button_1_Template, 2, 1, "button", 3);
    ɵngcc0.ɵɵtemplate(2, NgWizardButtonsComponent_div_1_button_2_Template, 2, 1, "button", 4);
    ɵngcc0.ɵɵtemplate(3, NgWizardButtonsComponent_div_1_button_3_Template, 2, 1, "button", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentStepData_r306 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", currentStepData_r306.options.buttons == null ? null : currentStepData_r306.options.buttons.extra);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", currentStepData_r306.previousStep && !(currentStepData_r306.options.buttons == null ? null : currentStepData_r306.options.buttons.previous == null ? null : currentStepData_r306.options.buttons.previous.hidden));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", currentStepData_r306.nextStep && !(currentStepData_r306.options.buttons == null ? null : currentStepData_r306.options.buttons.next == null ? null : currentStepData_r306.options.buttons.next.hidden));
} }
function componentImplementsNgWizardStepInterface(componentRef) {
    return 'wsIsValid' in componentRef && 'wsOnNext' in componentRef && 'wsOnPrevious' in componentRef;
}
/**
 * Returns the NgWizardStepData with the given path in the stepData list or undefined if none is
 * found.
 *
 * @param {?} stepData The list with NgWizardStepDatas
 * @param {?} path The path you want to get the NgWizardStepData for
 * @return {?}
 */
function getStepDataForPath(stepData, path) {
    return stepData.find((/**
     * @param {?} data
     * @return {?}
     */
    data => data.path === path));
}
/**
 * Returns the NgWizardStepData for the given url in the stepData list or undefined if none is
 * found.
 *
 * @param {?} stepData The list with NgWizardStepDatas
 * @param {?} url The url which you want to get the NgWizardStepData for
 * @return {?}
 */
function getStepDataForUrl(stepData, url) {
    // gets 'path' in the url '/wizard/path?key=value'
    /** @type {?} */
    const path = url.split('/').pop().split('?')[0];
    return getStepDataForPath(stepData, path);
}
/**
 * Returns the default wizard options.
 * @return {?}
 */
function getDefaultWizardOptions() {
    return {
        navBar: {
            icons: {
                previous: '<i class="material-icons ng-wizard-icon">done</i>',
                current: '<i class="material-icons ng-wizard-icon">create</i>',
                next: '<i class="material-icons ng-wizard-icon">lock</i>',
            },
        },
        buttons: {
            previous: {
                label: '<i class="material-icons ng-wizard-icon">chevron_left</i> Previous',
            },
            next: {
                label: 'Next <i class="material-icons ng-wizard-icon">chevron_right</i>',
            },
        }
    };
}
/**
 * Merges the wizard options in the wizard route's config with the default wizard options.
 *
 * @param {?} wizardOptions The wizard options in the wizard route's config
 * @return {?}
 */
function mergeWizardOptions(wizardOptions) {
    if (!wizardOptions) {
        return getDefaultWizardOptions();
    }
    return Object.assign({}, getDefaultWizardOptions(), wizardOptions);
}
/**
 * Returns the options passed to the wizard step route with an added title attribute.
 *
 * @param {?} route The wizard step route configuration
 * @return {?}
 */
function getWizardStepOptions(route) {
    if (!route.data) {
        return { title: getStepTitleFromRoute(route) };
    }
    return Object.assign({}, route.data, { title: getStepTitleFromRoute(route) });
}
/**
 * Returns the step title based on the Route configuration.
 * If the route has a data.title attribute it will be returned.
 * Else the path will be capitalized and '-' or '_' characters will be replaces by spaces.
 *
 * @param {?} route The Angular Route object
 * @return {?}
 */
function getStepTitleFromRoute(route) {
    if (route.data && route.data.title) {
        return route.data.title;
    }
    return capitalize(insertSpaces(route.path));
}
/**
 * Capitalizes the first character of the passed value.
 * @param {?} value
 * @return {?}
 */
function capitalize(value) {
    if (!value) {
        return value;
    }
    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
}
/**
 * Replaces '-' and '_' characters by spaces.
 * @param {?} value
 * @return {?}
 */
function insertSpaces(value) {
    if (!value) {
        return value;
    }
    return value.replace(/[-_]/g, ' ').trim();
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const NgWizardErrorType = {
    NO_WIZARD_ROUTE: 0,
    NO_CHILD_ROUTES: 1,
    NO_WS_INTERFACE: 2,
};
NgWizardErrorType[NgWizardErrorType.NO_WIZARD_ROUTE] = 'NO_WIZARD_ROUTE';
NgWizardErrorType[NgWizardErrorType.NO_CHILD_ROUTES] = 'NO_CHILD_ROUTES';
NgWizardErrorType[NgWizardErrorType.NO_WS_INTERFACE] = 'NO_WS_INTERFACE';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class NgWizardError extends Error {
    /**
     * @protected
     * @param {?} type
     * @param {?} message
     */
    constructor(type, message) {
        super(message);
        this.wizardComponentName = '';
        this.wizardPath = '';
        this.stepComponentName = '';
        this.type = type;
    }
}
class NoWizardRoute extends NgWizardError {
    /**
     * @param {?} wizardComponentName
     */
    constructor(wizardComponentName) {
        super(NgWizardErrorType.NO_WIZARD_ROUTE, `No route configuration for the ${wizardComponentName} found.`);
        this.wizardComponentName = wizardComponentName;
    }
}
class NoChildRoutes extends NgWizardError {
    /**
     * @param {?} wizardComponentName
     * @param {?} wizardPath
     */
    constructor(wizardComponentName, wizardPath) {
        super(NgWizardErrorType.NO_CHILD_ROUTES, `No child routes for the ${wizardComponentName} found.`);
        this.wizardComponentName = wizardComponentName;
        this.wizardPath = wizardPath;
    }
}
class NoWsInterface extends NgWizardError {
    /**
     * @param {?} stepComponentName
     */
    constructor(stepComponentName) {
        super(NgWizardErrorType.NO_WS_INTERFACE, `The ${stepComponentName} does not extend the NgWizardStep class or implement the NgWizardStepInterface.`);
        this.stepComponentName = stepComponentName;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgWizardService {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        this.stepData = [];
        this.stepDataChanges = new BehaviorSubject([]);
    }
    /**
     * Initializes the wizard by parsing the wizard's child routes found in Angular's router config
     * into a list of NgWizardStepData.
     * @param {?} wizardComponentName The name of the wizard component
     * @return {?}
     */
    loadWizardRoutes(wizardComponentName) {
        this.wizardRoute = this.getWizardRoute(wizardComponentName);
        if (!this.wizardRoute) {
            throw new NoWizardRoute(wizardComponentName);
        }
        this.wizardOptions = mergeWizardOptions(this.wizardRoute.data);
        this.loadChildRoutes(this.wizardRoute);
    }
    /**
     * Checks and stores the currently displayed component.
     * @param {?} componentRef A reference to the currently displayed component
     * @return {?}
     */
    registerActiveComponent(componentRef) {
        if (!componentImplementsNgWizardStepInterface(componentRef)) {
            throw new NoWsInterface(componentRef.constructor.name);
        }
        // Cast to unknown before casting to NgWizardStep to let typescript know we checked and approve
        // this conversion.
        this.currentComponent = (/** @type {?} */ (((/** @type {?} */ (componentRef)))));
        this.currentStepData = getStepDataForUrl(this.stepData, this.router.url);
        this.currentStepData.componentRef = componentRef;
        this.resetCurrentStep();
        this.currentStepData.isCurrent = true;
        this.onStepDataChange();
    }
    /**
     * Calls the current component's wsOnPrevious() or wsOnNext()) methods and navigates to the given
     * step if the component does not abort or its state is invalid (for next navigation).
     *
     * @param {?} stepData The NgWizardStepData of the the step to navigate to
     * @return {?}
     */
    navigateToStep(stepData) {
        /** @type {?} */
        let goAhead;
        if (this.currentStepData.order > stepData.order) {
            goAhead = this.currentComponent.wsOnPrevious();
        }
        else {
            goAhead = this.currentComponent.wsIsValid() && this.currentComponent.wsOnNext();
        }
        if (goAhead === false) {
            return;
        }
        /** @type {?} */
        let stepPath = stepData.path;
        // If the wizard is added to a specific path in the application we have to join that path and
        // the step's path as the path to navigate to.
        // The Angular Router's relativeTo option does not seem to work when using the hash location
        // strategy.
        if (this.wizardRoute.path) {
            stepPath = [this.wizardRoute.path, stepData.path].join('/');
        }
        if (stepData.options.cleanQueryParameters) {
            return this.router.navigate([stepPath], { queryParams: {} });
        }
        else {
            return this.router.navigate([stepPath], { queryParamsHandling: 'merge' });
        }
        return this.router.navigate([stepPath], { queryParamsHandling: 'merge' });
    }
    /**
     * Utility method to navigate to the next step.
     * @return {?}
     */
    navigateToNextStep() {
        /** @type {?} */
        const nextStepData = getStepDataForPath(this.stepData, this.currentStepData.nextStep);
        return this.navigateToStep(nextStepData);
    }
    /**
     * Utility method to navigate to the previous step.
     * @return {?}
     */
    navigateToPreviousStep() {
        /** @type {?} */
        const previousStepData = getStepDataForPath(this.stepData, this.currentStepData.previousStep);
        return this.navigateToStep(previousStepData);
    }
    /**
     * Utility method to navigate to a specific route path (external to the wizard)
     * @param {?} path
     * @return {?}
     */
    navigateToPath(path) {
        return this.router.navigate([path], { queryParamsHandling: 'merge' });
    }
    /**
     * Returns the step data changes as an observable.
     * @return {?}
     */
    getStepDataChangesAsObservable() {
        return this.stepDataChanges.asObservable();
    }
    /**
     * Returns the current step data as an observable.
     * @return {?}
     */
    // TODO: Write a unit test for this method
    getCurrentStepDataAsObservable() {
        return this.getStepDataChangesAsObservable().pipe(map((/**
         * @param {?} stepDatas
         * @return {?}
         */
        (stepDatas) => stepDatas.find((/**
         * @param {?} stepData
         * @return {?}
         */
        (stepData) => stepData.isCurrent)))));
    }
    /**
     * Returns the Angular Route for the wizard component found in Angular's router config.
     * @private
     * @param {?} wizardComponentName The name of the wizard component
     * @return {?}
     */
    getWizardRoute(wizardComponentName) {
        return this.router.config.find((/**
         * @param {?} route
         * @return {?}
         */
        (route) => route.component && route.component.name === wizardComponentName));
    }
    /**
     * Parses the child routes of the wizard component route and stores them as a list of
     * NgWizardStepData.
     * @private
     * @param {?} wizardRoute The Angular Route for the wizard component
     * @return {?}
     */
    loadChildRoutes(wizardRoute) {
        if (!wizardRoute.children) {
            throw new NoChildRoutes(wizardRoute.component.name, wizardRoute.path);
        }
        /** @type {?} */
        const childRoutes = wizardRoute.children.filter((/**
         * @param {?} route
         * @return {?}
         */
        (route) => route.component));
        this.stepData = [];
        for (let i = 0; i < childRoutes.length; i++) {
            this.registerStep(i, childRoutes[i], childRoutes[i - 1], childRoutes[i + 1]);
        }
    }
    /**
     * Stores a child route as an NgWizardStepData.
     * @private
     * @param {?} index The index in the list of child routes
     * @param {?} stepRoute The child route
     * @param {?} previousStep The previous child route (undefined if first child route)
     * @param {?} nextStep The next child route (undefined if last child route)
     * @return {?}
     */
    registerStep(index, stepRoute, previousStep, nextStep) {
        this.stepData.push({
            order: index + 1,
            componentName: stepRoute.component.name,
            path: stepRoute.path,
            previousStep: previousStep ? previousStep.path : undefined,
            nextStep: nextStep ? nextStep.path : undefined,
            isCurrent: false,
            options: getWizardStepOptions(stepRoute),
        });
        this.onStepDataChange();
    }
    /**
     * Emits a step data change event to the subscribers when the step data changes.
     * @private
     * @return {?}
     */
    onStepDataChange() {
        this.stepDataChanges.next(this.stepData);
    }
    /**
     * Sets the isCurrent attribute of all step data to false.
     * @private
     * @return {?}
     */
    resetCurrentStep() {
        this.stepData.map((/**
         * @param {?} stepData
         * @return {?}
         */
        (stepData) => {
            stepData.isCurrent = false;
            return stepData;
        }));
    }
}
NgWizardService.ɵfac = function NgWizardService_Factory(t) { return new (t || NgWizardService)(ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
NgWizardService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgWizardService, factory: NgWizardService.ɵfac });
/** @nocollapse */
NgWizardService.ctorParameters = () => [
    { type: Router }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgWizardComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        try {
            this.service.loadWizardRoutes(this.constructor.name);
        }
        catch (error) {
            this.error = error;
        }
    }
    /**
     * @param {?} componentRef
     * @return {?}
     */
    onActivate(componentRef) {
        try {
            this.service.registerActiveComponent(componentRef);
        }
        catch (error) {
            this.error = error;
        }
    }
}
NgWizardComponent.ɵfac = function NgWizardComponent_Factory(t) { return new (t || NgWizardComponent)(ɵngcc0.ɵɵdirectiveInject(NgWizardService)); };
NgWizardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardComponent, selectors: [["ng-wizard"]], decls: 6, vars: 1, consts: [[1, "ng-wizard-container"], [3, "error"], [1, "ng-wizard-content-container"], [3, "activate"]], template: function NgWizardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "ng-wizard-error", 1);
        ɵngcc0.ɵɵelement(2, "ng-wizard-navigation");
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "router-outlet", 3);
        ɵngcc0.ɵɵlistener("activate", function NgWizardComponent_Template_router_outlet_activate_4_listener($event) { return ctx.onActivate($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "ng-wizard-buttons");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.error);
    } }, directives: function () { return [NgWizardErrorComponent,
        NgWizardNavigationComponent, ɵngcc1.RouterOutlet, NgWizardButtonsComponent]; }, encapsulation: 2 });
/** @nocollapse */
NgWizardComponent.ctorParameters = () => [
    { type: NgWizardService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard',
                template: "<div class=\"ng-wizard-container\">\r\n  <ng-wizard-error [error]=\"error\"></ng-wizard-error>\r\n  <ng-wizard-navigation></ng-wizard-navigation>\r\n  <div class=\"ng-wizard-content-container\">\r\n    <router-outlet (activate)=\"onActivate($event)\"></router-outlet>\r\n  </div>\r\n  <ng-wizard-buttons></ng-wizard-buttons>\r\n</div>\r\n"
            }]
    }], function () { return [{ type: NgWizardService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgWizardErrorComponent {
    constructor() {
        this.NgWizardErrorType = NgWizardErrorType;
    }
}
NgWizardErrorComponent.ɵfac = function NgWizardErrorComponent_Factory(t) { return new (t || NgWizardErrorComponent)(); };
NgWizardErrorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardErrorComponent, selectors: [["ng-wizard-error"]], inputs: { error: "error" }, decls: 1, vars: 1, consts: [["class", "ng-wizard-error", 4, "ngIf"], [1, "ng-wizard-error"], [1, "ng-wizard-error-message", 3, "ngSwitch"], ["class", "no-wizard-route", 4, "ngSwitchCase"], ["class", "no-child-routes", 4, "ngSwitchCase"], ["class", "no-ws-interface", 4, "ngSwitchCase"], [1, "no-wizard-route"], [1, "no-child-routes"], [1, "no-ws-interface"]], template: function NgWizardErrorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgWizardErrorComponent_div_0_Template, 5, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.error);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [".ng-wizard-error[_ngcontent-%COMP%]{border:1px solid #d71117;border-radius:5px;color:#d71117;padding:10px 10px 0;margin-top:10px}.ng-wizard-error[_ngcontent-%COMP%]   .ng-wizard-error-message[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%]{display:inline-block;border-radius:3px;background-color:rgba(218,215,197,.4);color:#4d4d4d;padding:15px}"] });
NgWizardErrorComponent.propDecorators = {
    error: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardErrorComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard-error',
                template: "<div *ngIf=\"error\" class=\"ng-wizard-error\">\r\n  <div [ngSwitch]=\"error.type\" class=\"ng-wizard-error-message\">\r\n\r\n    <!-- NO_WIZARD_ROUTE error -->\r\n\r\n    <span *ngSwitchCase=\"NgWizardErrorType.NO_WIZARD_ROUTE\" class=\"no-wizard-route\">\r\n      No route configuration for the {{ error.wizardComponentName }} found.<br/>\r\n      Add a route for the {{ error.wizardComponentName }} to your AppRoutingModule.<br/>\r\n      <pre>\r\nconst routes: Routes = [\r\n    &#123; path: '', component: {{ error.wizardComponentName }} &#125;,\r\n];\r\n\r\n@NgModule(&#123;\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n&#125;)\r\nexport class AppRoutingModule &#123; &#125;</pre>\r\n    </span>\r\n\r\n    <!-- NO_CHILD_ROUTES error -->\r\n\r\n    <span *ngSwitchCase=\"NgWizardErrorType.NO_CHILD_ROUTES\" class=\"no-child-routes\">\r\n      No child routes for the {{ error.wizardComponentName }} found.<br/>\r\n      Add at least one child route for the {{ error.wizardComponentName }} to your AppRoutingModule.<br/>\r\n      <pre>\r\n&#123; path: '{{ error.wizardPath }}', component: {{ error.wizardComponentName }}, children: [\r\n    &#123; path: 'step1', component: Step1Component &#125;,\r\n    &#123; path: '**', redirectTo: 'step1' &#125;,\r\n] &#125;,</pre>\r\n    </span>\r\n\r\n    <!-- NO_WS_INTERFACE error -->\r\n\r\n    <span *ngSwitchCase=\"NgWizardErrorType.NO_WS_INTERFACE\" class=\"no-ws-interface\">\r\n      The {{ error.stepComponentName}} does not extend the NgWizardStep class or implement the\r\n      NgWizardStepInterface.<br/>\r\n      Extend the NgWizardStep class in your {{ error.stepComponentName}} or implement the\r\n      NgWizardStepInterface.<br/>\r\n      <pre>\r\n@NgComponent(...)\r\nexport class {{ error.stepComponentName }} extends NgWizardStep &#123;\r\n    constructor() &#123;\r\n        super();\r\n    &#125;\r\n&#125;</pre><br/>\r\n      or<br/>\r\n      <pre>\r\n@NgComponent(...)\r\nexport class {{ error.stepComponentName }} implements NgWizardStepInterface &#123;\r\n    wsIsValid() &#123;\r\n        return true;\r\n    &#125;\r\n    wsOnNext() &#123; &#125;\r\n    wsOnPrevious() &#123; &#125;\r\n&#125;</pre>\r\n    </span>\r\n\r\n  </div>\r\n</div>\r\n",
                styles: [".ng-wizard-error{border:1px solid #d71117;border-radius:5px;color:#d71117;padding:10px 10px 0;margin-top:10px}.ng-wizard-error .ng-wizard-error-message pre{display:inline-block;border-radius:3px;background-color:rgba(218,215,197,.4);color:#4d4d4d;padding:15px}"]
            }]
    }], function () { return []; }, { error: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgWizardNavigationComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.stepData$ = this.service.getStepDataChangesAsObservable();
        this.service.getCurrentStepDataAsObservable().subscribe((/**
         * @param {?} stepData
         * @return {?}
         */
        stepData => this.currentStepData = stepData));
        this.wizardOptions = this.service.wizardOptions;
    }
    /**
     * @param {?} stepData
     * @return {?}
     */
    goToStep(stepData) {
        if ((this.currentStepData && this.currentStepData.options && this.currentStepData.options.disableNavigation)
            || stepData.order >= this.currentStepData.order) {
            return;
        }
        this.service.navigateToStep(stepData);
    }
}
NgWizardNavigationComponent.ɵfac = function NgWizardNavigationComponent_Factory(t) { return new (t || NgWizardNavigationComponent)(ɵngcc0.ɵɵdirectiveInject(NgWizardService)); };
NgWizardNavigationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardNavigationComponent, selectors: [["ng-wizard-navigation"]], decls: 5, vars: 3, consts: [[1, "ng-wizard-navigation-container"], [1, "ng-wizard-navigation"], [1, "ng-wizard-navigation-list"], ["class", "ng-wizard-navigation-list-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "ng-wizard-navigation-list-item", 3, "click"], [3, "ngClass", 4, "ngIf"], ["class", "ng-wizard-navigation-active", 4, "ngIf"], ["class", "ng-wizard-navigation-disabled", 4, "ngIf"], [3, "ngClass"], [1, "ng-wizard-navigation-icon", 3, "innerHTML"], [1, "ng-wizard-navigation-label"], [1, "ng-wizard-navigation-active"], [1, "ng-wizard-navigation-disabled"]], template: function NgWizardNavigationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "nav", 1);
        ɵngcc0.ɵɵelementStart(2, "ul", 2);
        ɵngcc0.ɵɵtemplate(3, NgWizardNavigationComponent_li_3_Template, 4, 3, "li", 3);
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(4, 1, ctx.stepData$));
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc2.NgClass], pipes: [ɵngcc2.AsyncPipe], styles: [""] });
/** @nocollapse */
NgWizardNavigationComponent.ctorParameters = () => [
    { type: NgWizardService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardNavigationComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard-navigation',
                template: "<div class=\"ng-wizard-navigation-container\">\r\n  <nav class=\"ng-wizard-navigation\">\r\n    <ul class=\"ng-wizard-navigation-list\">\r\n      <li *ngFor=\"let stepData of stepData$ | async\" class=\"ng-wizard-navigation-list-item\" (click)=\"goToStep(stepData);\">\r\n        <div *ngIf=\"stepData?.order < currentStepData?.order\"\r\n             [ngClass]=\"{\r\n               'ng-wizard-navigation-link': !currentStepData?.options.disableNavigation,\r\n               'ng-wizard-navigation-disabled': currentStepData?.options.disableNavigation\r\n             }\">\r\n          <span [innerHTML]=\"stepData.options.icon || wizardOptions.navBar.icons.previous\" class=\"ng-wizard-navigation-icon\"></span>\r\n          <span class=\"ng-wizard-navigation-label\">\r\n            {{ stepData.options.title }}\r\n          </span>\r\n        </div>\r\n\r\n        <div\r\n          *ngIf=\"stepData?.order === currentStepData?.order\"\r\n          class=\"ng-wizard-navigation-active\">\r\n          <span [innerHTML]=\"stepData.options.icon || wizardOptions.navBar.icons.current\" class=\"ng-wizard-navigation-icon\"></span>\r\n          <span class=\"ng-wizard-navigation-label\">\r\n            {{ stepData.options.title }}\r\n          </span>\r\n        </div>\r\n\r\n        <div *ngIf=\"stepData?.order > currentStepData?.order\"\r\n             class=\"ng-wizard-navigation-disabled\">\r\n          <span [innerHTML]=\"stepData.options.icon || wizardOptions.navBar.icons.next\" class=\"ng-wizard-navigation-icon\"></span>\r\n          <span class=\"ng-wizard-navigation-label\">\r\n            {{ stepData.options.title }}\r\n          </span>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n</div>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: NgWizardService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgWizardButtonsComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentStepData$ = this.service.getCurrentStepDataAsObservable();
        this.wizardOptions = this.service.wizardOptions;
    }
    /**
     * @return {?}
     */
    goToNextStep() {
        this.service.navigateToNextStep();
    }
    /**
     * @return {?}
     */
    goToPreviousStep() {
        this.service.navigateToPreviousStep();
    }
    /**
     * @param {?} path
     * @return {?}
     */
    goToPath(path) {
        this.service.navigateToPath(path);
    }
}
NgWizardButtonsComponent.ɵfac = function NgWizardButtonsComponent_Factory(t) { return new (t || NgWizardButtonsComponent)(ɵngcc0.ɵɵdirectiveInject(NgWizardService)); };
NgWizardButtonsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardButtonsComponent, selectors: [["ng-wizard-buttons"]], decls: 3, vars: 3, consts: [[1, "ng-wizard-buttons-container"], ["class", "ng-wizard-buttons", 4, "ngIf"], [1, "ng-wizard-buttons"], ["class", "ng-wizard-button-extra", 3, "click", 4, "ngIf"], ["class", "ng-wizard-button-previous", 3, "click", 4, "ngIf"], ["class", "ng-wizard-button-next", 3, "click", 4, "ngIf"], [1, "ng-wizard-button-extra", 3, "click"], [1, "ng-wizard-button-label", 3, "innerHTML"], [1, "ng-wizard-button-previous", 3, "click"], [1, "ng-wizard-button-next", 3, "click"]], template: function NgWizardButtonsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, NgWizardButtonsComponent_div_1_Template, 4, 3, "div", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx.currentStepData$));
    } }, directives: [ɵngcc2.NgIf], pipes: [ɵngcc2.AsyncPipe], styles: [""] });
/** @nocollapse */
NgWizardButtonsComponent.ctorParameters = () => [
    { type: NgWizardService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardButtonsComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard-buttons',
                template: "<div class=\"ng-wizard-buttons-container\">\r\n  <div *ngIf=\"currentStepData$ | async as currentStepData\" class=\"ng-wizard-buttons\">\r\n    <button *ngIf=\"currentStepData.options.buttons?.extra\"\r\n            (click)=\"goToPath(currentStepData.options.buttons?.extra.path)\"\r\n            class=\"ng-wizard-button-extra\">\r\n      <span\r\n        [innerHTML]=\"currentStepData.options.buttons.extra.label\"\r\n        class=\"ng-wizard-button-label\"></span>\r\n    </button>\r\n    <button *ngIf=\"currentStepData.previousStep && !currentStepData.options.buttons?.previous?.hidden\"\r\n            (click)=\"goToPreviousStep()\"\r\n            class=\"ng-wizard-button-previous\">\r\n      <span\r\n        [innerHTML]=\"currentStepData.options.buttons?.previous?.label || wizardOptions.buttons.previous.label\"\r\n        class=\"ng-wizard-button-label\"></span>\r\n    </button>\r\n    <button *ngIf=\"currentStepData.nextStep && !currentStepData.options.buttons?.next?.hidden\"\r\n            (click)=\"goToNextStep()\"\r\n            class=\"ng-wizard-button-next\">\r\n      <span\r\n        [innerHTML]=\"currentStepData.options.buttons?.next?.label || wizardOptions.buttons.next.label\"\r\n        class=\"ng-wizard-button-label\"></span>\r\n    </button>\r\n  </div>\r\n</div>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: NgWizardService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgWizardModule {
}
NgWizardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWizardModule });
NgWizardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWizardModule_Factory(t) { return new (t || NgWizardModule)(); }, providers: [NgWizardService], imports: [[CommonModule, RouterModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWizardModule, { declarations: function () { return [NgWizardComponent,
        NgWizardErrorComponent,
        NgWizardNavigationComponent,
        NgWizardButtonsComponent]; }, imports: function () { return [CommonModule, RouterModule]; }, exports: function () { return [NgWizardComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NgWizardComponent,
                    NgWizardErrorComponent,
                    NgWizardNavigationComponent,
                    NgWizardButtonsComponent,
                ],
                imports: [CommonModule, RouterModule],
                providers: [NgWizardService],
                exports: [NgWizardComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class NgWizardStep {
    /**
     * @return {?}
     */
    wsIsValid() {
        return true;
    }
    /**
     * @return {?}
     */
    wsOnNext() {
        return;
    }
    /**
     * @return {?}
     */
    wsOnPrevious() {
        return;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgWizardComponent, NgWizardModule, NgWizardStep, NgWizardButtonsComponent as ɵd, NgWizardErrorComponent as ɵb, NgWizardNavigationComponent as ɵc, NgWizardService as ɵa };

//# sourceMappingURL=cmdap-ng-wizard.js.map