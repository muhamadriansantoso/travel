/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns true if the component extends the NgWizardStep class or implements the NgWizardStepInterface.
 *
 * @param {?} componentRef The reference to the component to verify
 * @return {?}
 */
export function componentImplementsNgWizardStepInterface(componentRef) {
    return 'wsIsValid' in componentRef && 'wsOnNext' in componentRef && 'wsOnPrevious' in componentRef;
}
/**
 * Returns the NgWizardStepData with the given path in the stepData list or undefined if none is
 * found.
 *
 * @param {?} stepData The list with NgWizardStepDatas
 * @param {?} path The path you want to get the NgWizardStepData for
 * @return {?}
 */
export function getStepDataForPath(stepData, path) {
    return stepData.find((/**
     * @param {?} data
     * @return {?}
     */
    data => data.path === path));
}
/**
 * Returns the NgWizardStepData for the given url in the stepData list or undefined if none is
 * found.
 *
 * @param {?} stepData The list with NgWizardStepDatas
 * @param {?} url The url which you want to get the NgWizardStepData for
 * @return {?}
 */
export function getStepDataForUrl(stepData, url) {
    // gets 'path' in the url '/wizard/path?key=value'
    /** @type {?} */
    const path = url.split('/').pop().split('?')[0];
    return getStepDataForPath(stepData, path);
}
/**
 * Returns the default wizard options.
 * @return {?}
 */
export function getDefaultWizardOptions() {
    return {
        navBar: {
            icons: {
                previous: '<i class="material-icons ng-wizard-icon">done</i>',
                current: '<i class="material-icons ng-wizard-icon">create</i>',
                next: '<i class="material-icons ng-wizard-icon">lock</i>',
            },
        },
        buttons: {
            previous: {
                label: '<i class="material-icons ng-wizard-icon">chevron_left</i> Previous',
            },
            next: {
                label: 'Next <i class="material-icons ng-wizard-icon">chevron_right</i>',
            },
        }
    };
}
/**
 * Merges the wizard options in the wizard route's config with the default wizard options.
 *
 * @param {?} wizardOptions The wizard options in the wizard route's config
 * @return {?}
 */
export function mergeWizardOptions(wizardOptions) {
    if (!wizardOptions) {
        return getDefaultWizardOptions();
    }
    return Object.assign({}, getDefaultWizardOptions(), wizardOptions);
}
/**
 * Returns the options passed to the wizard step route with an added title attribute.
 *
 * @param {?} route The wizard step route configuration
 * @return {?}
 */
export function getWizardStepOptions(route) {
    if (!route.data) {
        return { title: getStepTitleFromRoute(route) };
    }
    return Object.assign({}, route.data, { title: getStepTitleFromRoute(route) });
}
/**
 * Returns the step title based on the Route configuration.
 * If the route has a data.title attribute it will be returned.
 * Else the path will be capitalized and '-' or '_' characters will be replaces by spaces.
 *
 * @param {?} route The Angular Route object
 * @return {?}
 */
export function getStepTitleFromRoute(route) {
    if (route.data && route.data.title) {
        return route.data.title;
    }
    return capitalize(insertSpaces(route.path));
}
/**
 * Capitalizes the first character of the passed value.
 * @param {?} value
 * @return {?}
 */
function capitalize(value) {
    if (!value) {
        return value;
    }
    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
}
/**
 * Replaces '-' and '_' characters by spaces.
 * @param {?} value
 * @return {?}
 */
function insertSpaces(value) {
    if (!value) {
        return value;
    }
    return value.replace(/[-_]/g, ' ').trim();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNtZGFwL25nLXdpemFyZC8iLCJzb3VyY2VzIjpbImxpYi9uZy13aXphcmQudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVdBLE1BQU0sVUFBVSx3Q0FBd0MsQ0FBQyxZQUErQjtJQUN0RixPQUFPLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxjQUFjLElBQUksWUFBWSxDQUFDO0FBQ3JHLENBQUM7Ozs7Ozs7OztBQVNELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxRQUE0QixFQUFFLElBQVk7SUFDM0UsT0FBTyxRQUFRLENBQUMsSUFBSTs7OztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUMsQ0FBQztBQUNuRCxDQUFDOzs7Ozs7Ozs7QUFTRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsUUFBNEIsRUFBRSxHQUFXOzs7VUFFbkUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxPQUFPLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1QyxDQUFDOzs7OztBQUtELE1BQU0sVUFBVSx1QkFBdUI7SUFDckMsT0FBTztRQUNMLE1BQU0sRUFBRTtZQUNOLEtBQUssRUFBRTtnQkFDTCxRQUFRLEVBQUUsbURBQW1EO2dCQUM3RCxPQUFPLEVBQUUscURBQXFEO2dCQUM5RCxJQUFJLEVBQUUsbURBQW1EO2FBQzFEO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUCxRQUFRLEVBQUU7Z0JBQ1IsS0FBSyxFQUFFLG9FQUFvRTthQUM1RTtZQUNELElBQUksRUFBRTtnQkFDSixLQUFLLEVBQUUsaUVBQWlFO2FBQ3pFO1NBQ0Y7S0FDRixDQUFDO0FBQ0osQ0FBQzs7Ozs7OztBQU9ELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxhQUFpQjtJQUNsRCxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLE9BQU8sdUJBQXVCLEVBQUUsQ0FBQztLQUNsQztJQUVELHlCQUFZLHVCQUF1QixFQUFFLEVBQUssYUFBYSxFQUFHO0FBQzVELENBQUM7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsS0FBWTtJQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNmLE9BQU8sRUFBRSxLQUFLLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztLQUNoRDtJQUVELHlCQUNLLEtBQUssQ0FBQyxJQUFJLElBQ2IsS0FBSyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxJQUNuQztBQUNKLENBQUM7Ozs7Ozs7OztBQVNELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxLQUFZO0lBQ2hELElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNsQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7Ozs7OztBQUtELFNBQVMsVUFBVSxDQUFDLEtBQWE7SUFDL0IsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN0RSxDQUFDOzs7Ozs7QUFLRCxTQUFTLFlBQVksQ0FBQyxLQUFhO0lBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdXaXphcmRTdGVwRGF0YSB9IGZyb20gJy4vbmctd2l6YXJkLXN0ZXAvbmctd2l6YXJkLXN0ZXAtZGF0YS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBOZ1dpemFyZE9wdGlvbnMgfSBmcm9tICcuL25nLXdpemFyZC1vcHRpb25zL25nLXdpemFyZC1vcHRpb25zLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IE5nV2l6YXJkU3RlcE9wdGlvbnMgfSBmcm9tICcuL25nLXdpemFyZC1zdGVwL25nLXdpemFyZC1zdGVwLW9wdGlvbnMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGV4dGVuZHMgdGhlIE5nV2l6YXJkU3RlcCBjbGFzcyBvciBpbXBsZW1lbnRzIHRoZSBOZ1dpemFyZFN0ZXBJbnRlcmZhY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBjb21wb25lbnRSZWYgVGhlIHJlZmVyZW5jZSB0byB0aGUgY29tcG9uZW50IHRvIHZlcmlmeVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudEltcGxlbWVudHNOZ1dpemFyZFN0ZXBJbnRlcmZhY2UoY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55Pik6IGJvb2xlYW4ge1xyXG4gIHJldHVybiAnd3NJc1ZhbGlkJyBpbiBjb21wb25lbnRSZWYgJiYgJ3dzT25OZXh0JyBpbiBjb21wb25lbnRSZWYgJiYgJ3dzT25QcmV2aW91cycgaW4gY29tcG9uZW50UmVmO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgTmdXaXphcmRTdGVwRGF0YSB3aXRoIHRoZSBnaXZlbiBwYXRoIGluIHRoZSBzdGVwRGF0YSBsaXN0IG9yIHVuZGVmaW5lZCBpZiBub25lIGlzXHJcbiAqIGZvdW5kLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RlcERhdGEgVGhlIGxpc3Qgd2l0aCBOZ1dpemFyZFN0ZXBEYXRhc1xyXG4gKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCB5b3Ugd2FudCB0byBnZXQgdGhlIE5nV2l6YXJkU3RlcERhdGEgZm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RlcERhdGFGb3JQYXRoKHN0ZXBEYXRhOiBOZ1dpemFyZFN0ZXBEYXRhW10sIHBhdGg6IHN0cmluZykge1xyXG4gIHJldHVybiBzdGVwRGF0YS5maW5kKGRhdGEgPT4gZGF0YS5wYXRoID09PSBwYXRoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIE5nV2l6YXJkU3RlcERhdGEgZm9yIHRoZSBnaXZlbiB1cmwgaW4gdGhlIHN0ZXBEYXRhIGxpc3Qgb3IgdW5kZWZpbmVkIGlmIG5vbmUgaXNcclxuICogZm91bmQuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdGVwRGF0YSBUaGUgbGlzdCB3aXRoIE5nV2l6YXJkU3RlcERhdGFzXHJcbiAqIEBwYXJhbSB1cmwgVGhlIHVybCB3aGljaCB5b3Ugd2FudCB0byBnZXQgdGhlIE5nV2l6YXJkU3RlcERhdGEgZm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RlcERhdGFGb3JVcmwoc3RlcERhdGE6IE5nV2l6YXJkU3RlcERhdGFbXSwgdXJsOiBzdHJpbmcpIHtcclxuICAvLyBnZXRzICdwYXRoJyBpbiB0aGUgdXJsICcvd2l6YXJkL3BhdGg/a2V5PXZhbHVlJ1xyXG4gIGNvbnN0IHBhdGggPSB1cmwuc3BsaXQoJy8nKS5wb3AoKS5zcGxpdCgnPycpWzBdO1xyXG4gIHJldHVybiBnZXRTdGVwRGF0YUZvclBhdGgoc3RlcERhdGEsIHBhdGgpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgZGVmYXVsdCB3aXphcmQgb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0V2l6YXJkT3B0aW9ucygpOiBOZ1dpemFyZE9wdGlvbnMge1xyXG4gIHJldHVybiB7XHJcbiAgICBuYXZCYXI6IHtcclxuICAgICAgaWNvbnM6IHtcclxuICAgICAgICBwcmV2aW91czogJzxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgbmctd2l6YXJkLWljb25cIj5kb25lPC9pPicsXHJcbiAgICAgICAgY3VycmVudDogJzxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgbmctd2l6YXJkLWljb25cIj5jcmVhdGU8L2k+JyxcclxuICAgICAgICBuZXh0OiAnPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29ucyBuZy13aXphcmQtaWNvblwiPmxvY2s8L2k+JyxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBidXR0b25zOiB7XHJcbiAgICAgIHByZXZpb3VzOiB7XHJcbiAgICAgICAgbGFiZWw6ICc8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zIG5nLXdpemFyZC1pY29uXCI+Y2hldnJvbl9sZWZ0PC9pPiBQcmV2aW91cycsXHJcbiAgICAgIH0sXHJcbiAgICAgIG5leHQ6IHtcclxuICAgICAgICBsYWJlbDogJ05leHQgPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29ucyBuZy13aXphcmQtaWNvblwiPmNoZXZyb25fcmlnaHQ8L2k+JyxcclxuICAgICAgfSxcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogTWVyZ2VzIHRoZSB3aXphcmQgb3B0aW9ucyBpbiB0aGUgd2l6YXJkIHJvdXRlJ3MgY29uZmlnIHdpdGggdGhlIGRlZmF1bHQgd2l6YXJkIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB3aXphcmRPcHRpb25zIFRoZSB3aXphcmQgb3B0aW9ucyBpbiB0aGUgd2l6YXJkIHJvdXRlJ3MgY29uZmlnXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VXaXphcmRPcHRpb25zKHdpemFyZE9wdGlvbnM6IHt9KTogTmdXaXphcmRPcHRpb25zIHtcclxuICBpZiAoIXdpemFyZE9wdGlvbnMpIHtcclxuICAgIHJldHVybiBnZXREZWZhdWx0V2l6YXJkT3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgLi4uZ2V0RGVmYXVsdFdpemFyZE9wdGlvbnMoKSwgLi4ud2l6YXJkT3B0aW9ucyB9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIHdpemFyZCBzdGVwIHJvdXRlIHdpdGggYW4gYWRkZWQgdGl0bGUgYXR0cmlidXRlLlxyXG4gKlxyXG4gKiBAcGFyYW0gcm91dGUgVGhlIHdpemFyZCBzdGVwIHJvdXRlIGNvbmZpZ3VyYXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXaXphcmRTdGVwT3B0aW9ucyhyb3V0ZTogUm91dGUpOiBOZ1dpemFyZFN0ZXBPcHRpb25zIHtcclxuICBpZiAoIXJvdXRlLmRhdGEpIHtcclxuICAgIHJldHVybiB7IHRpdGxlOiBnZXRTdGVwVGl0bGVGcm9tUm91dGUocm91dGUpIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucm91dGUuZGF0YSxcclxuICAgIHRpdGxlOiBnZXRTdGVwVGl0bGVGcm9tUm91dGUocm91dGUpLFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBzdGVwIHRpdGxlIGJhc2VkIG9uIHRoZSBSb3V0ZSBjb25maWd1cmF0aW9uLlxyXG4gKiBJZiB0aGUgcm91dGUgaGFzIGEgZGF0YS50aXRsZSBhdHRyaWJ1dGUgaXQgd2lsbCBiZSByZXR1cm5lZC5cclxuICogRWxzZSB0aGUgcGF0aCB3aWxsIGJlIGNhcGl0YWxpemVkIGFuZCAnLScgb3IgJ18nIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlcyBieSBzcGFjZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSByb3V0ZSBUaGUgQW5ndWxhciBSb3V0ZSBvYmplY3RcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGVwVGl0bGVGcm9tUm91dGUocm91dGU6IFJvdXRlKTogc3RyaW5nIHtcclxuICBpZiAocm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhLnRpdGxlKSB7XHJcbiAgICByZXR1cm4gcm91dGUuZGF0YS50aXRsZTtcclxuICB9XHJcbiAgcmV0dXJuIGNhcGl0YWxpemUoaW5zZXJ0U3BhY2VzKHJvdXRlLnBhdGgpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHBhc3NlZCB2YWx1ZS5cclxuICovXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemUodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgaWYgKCF2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gdmFsdWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwbGFjZXMgJy0nIGFuZCAnXycgY2hhcmFjdGVycyBieSBzcGFjZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnNlcnRTcGFjZXModmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgaWYgKCF2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWy1fXS9nLCAnICcpLnRyaW0oKTtcclxufVxyXG4iXX0=