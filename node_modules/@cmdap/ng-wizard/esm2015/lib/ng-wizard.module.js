/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgWizardComponent } from './ng-wizard.component';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { NgWizardErrorComponent } from './ng-wizard-error/ng-wizard-error.component';
import { NgWizardNavigationComponent } from './ng-wizard-navigation/ng-wizard-navigation.component';
import { NgWizardButtonsComponent } from './ng-wizard-buttons/ng-wizard-buttons.component';
import { NgWizardService } from './ng-wizard.service';
import * as ɵngcc0 from '@angular/core';
export class NgWizardModule {
}
NgWizardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWizardModule });
NgWizardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWizardModule_Factory(t) { return new (t || NgWizardModule)(); }, providers: [NgWizardService], imports: [[CommonModule, RouterModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWizardModule, { declarations: function () { return [NgWizardComponent,
        NgWizardErrorComponent,
        NgWizardNavigationComponent,
        NgWizardButtonsComponent]; }, imports: function () { return [CommonModule, RouterModule]; }, exports: function () { return [NgWizardComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NgWizardComponent,
                    NgWizardErrorComponent,
                    NgWizardNavigationComponent,
                    NgWizardButtonsComponent,
                ],
                imports: [CommonModule, RouterModule],
                providers: [NgWizardService],
                exports: [NgWizardComponent]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0BjbWRhcC9uZy13aXphcmQvbGliL25nLXdpemFyZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNyRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNwRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBYXRELE1BQU0sT0FBTyxjQUFjO0FBQUc7MENBWDdCLFFBQVEsU0FBQztJQUNSLFlBQVksRUFBRSxzQkFDWixpQkFBaUIsc0JBQ2pCLHNCQUFzQixzQkFDdEIsMkJBQTJCLHNCQUMzQix3QkFBd0I7UUFDekIsa0JBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxrQkFDckMsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLGtCQUM1QixPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUM3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFuQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFBQSxBQVhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nV2l6YXJkQ29tcG9uZW50IH0gZnJvbSAnLi9uZy13aXphcmQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgTmdXaXphcmRFcnJvckNvbXBvbmVudCB9IGZyb20gJy4vbmctd2l6YXJkLWVycm9yL25nLXdpemFyZC1lcnJvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ1dpemFyZE5hdmlnYXRpb25Db21wb25lbnQgfSBmcm9tICcuL25nLXdpemFyZC1uYXZpZ2F0aW9uL25nLXdpemFyZC1uYXZpZ2F0aW9uLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5nV2l6YXJkQnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vbmctd2l6YXJkLWJ1dHRvbnMvbmctd2l6YXJkLWJ1dHRvbnMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTmdXaXphcmRTZXJ2aWNlIH0gZnJvbSAnLi9uZy13aXphcmQuc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgTmdXaXphcmRDb21wb25lbnQsXHJcbiAgICBOZ1dpemFyZEVycm9yQ29tcG9uZW50LFxyXG4gICAgTmdXaXphcmROYXZpZ2F0aW9uQ29tcG9uZW50LFxyXG4gICAgTmdXaXphcmRCdXR0b25zQ29tcG9uZW50LFxyXG4gIF0sXHJcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUm91dGVyTW9kdWxlXSxcclxuICBwcm92aWRlcnM6IFtOZ1dpemFyZFNlcnZpY2VdLFxyXG4gIGV4cG9ydHM6IFtOZ1dpemFyZENvbXBvbmVudF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1dpemFyZE1vZHVsZSB7fVxyXG4iXX0=