/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * Returns true if the component extends the NgWizardStep class or implements the NgWizardStepInterface.
 *
 * @param {?} componentRef The reference to the component to verify
 * @return {?}
 */
export function componentImplementsNgWizardStepInterface(componentRef) {
    return 'wsIsValid' in componentRef && 'wsOnNext' in componentRef && 'wsOnPrevious' in componentRef;
}
/**
 * Returns the NgWizardStepData with the given path in the stepData list or undefined if none is
 * found.
 *
 * @param {?} stepData The list with NgWizardStepDatas
 * @param {?} path The path you want to get the NgWizardStepData for
 * @return {?}
 */
export function getStepDataForPath(stepData, path) {
    return stepData.find((/**
     * @param {?} data
     * @return {?}
     */
    function (data) { return data.path === path; }));
}
/**
 * Returns the NgWizardStepData for the given url in the stepData list or undefined if none is
 * found.
 *
 * @param {?} stepData The list with NgWizardStepDatas
 * @param {?} url The url which you want to get the NgWizardStepData for
 * @return {?}
 */
export function getStepDataForUrl(stepData, url) {
    // gets 'path' in the url '/wizard/path?key=value'
    /** @type {?} */
    var path = url.split('/').pop().split('?')[0];
    return getStepDataForPath(stepData, path);
}
/**
 * Returns the default wizard options.
 * @return {?}
 */
export function getDefaultWizardOptions() {
    return {
        navBar: {
            icons: {
                previous: '<i class="material-icons ng-wizard-icon">done</i>',
                current: '<i class="material-icons ng-wizard-icon">create</i>',
                next: '<i class="material-icons ng-wizard-icon">lock</i>',
            },
        },
        buttons: {
            previous: {
                label: '<i class="material-icons ng-wizard-icon">chevron_left</i> Previous',
            },
            next: {
                label: 'Next <i class="material-icons ng-wizard-icon">chevron_right</i>',
            },
        }
    };
}
/**
 * Merges the wizard options in the wizard route's config with the default wizard options.
 *
 * @param {?} wizardOptions The wizard options in the wizard route's config
 * @return {?}
 */
export function mergeWizardOptions(wizardOptions) {
    if (!wizardOptions) {
        return getDefaultWizardOptions();
    }
    return tslib_1.__assign({}, getDefaultWizardOptions(), wizardOptions);
}
/**
 * Returns the options passed to the wizard step route with an added title attribute.
 *
 * @param {?} route The wizard step route configuration
 * @return {?}
 */
export function getWizardStepOptions(route) {
    if (!route.data) {
        return { title: getStepTitleFromRoute(route) };
    }
    return tslib_1.__assign({}, route.data, { title: getStepTitleFromRoute(route) });
}
/**
 * Returns the step title based on the Route configuration.
 * If the route has a data.title attribute it will be returned.
 * Else the path will be capitalized and '-' or '_' characters will be replaces by spaces.
 *
 * @param {?} route The Angular Route object
 * @return {?}
 */
export function getStepTitleFromRoute(route) {
    if (route.data && route.data.title) {
        return route.data.title;
    }
    return capitalize(insertSpaces(route.path));
}
/**
 * Capitalizes the first character of the passed value.
 * @param {?} value
 * @return {?}
 */
function capitalize(value) {
    if (!value) {
        return value;
    }
    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
}
/**
 * Replaces '-' and '_' characters by spaces.
 * @param {?} value
 * @return {?}
 */
function insertSpaces(value) {
    if (!value) {
        return value;
    }
    return value.replace(/[-_]/g, ' ').trim();
}
//# sourceMappingURL=data:application/json;base64,