/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import * as utils from './ng-wizard.utils';
import { NoChildRoutes, NoWizardRoute, NoWsInterface } from './ng-wizard-error/ng-wizard.error';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
var NgWizardService = /** @class */ (function () {
    function NgWizardService(router) {
        this.router = router;
        this.stepData = [];
        this.stepDataChanges = new BehaviorSubject([]);
    }
    /**
     * Initializes the wizard by parsing the wizard's child routes found in Angular's router config
     * into a list of NgWizardStepData.
     * @param wizardComponentName The name of the wizard component
     */
    /**
     * Initializes the wizard by parsing the wizard's child routes found in Angular's router config
     * into a list of NgWizardStepData.
     * @param {?} wizardComponentName The name of the wizard component
     * @return {?}
     */
    NgWizardService.prototype.loadWizardRoutes = /**
     * Initializes the wizard by parsing the wizard's child routes found in Angular's router config
     * into a list of NgWizardStepData.
     * @param {?} wizardComponentName The name of the wizard component
     * @return {?}
     */
    function (wizardComponentName) {
        this.wizardRoute = this.getWizardRoute(wizardComponentName);
        if (!this.wizardRoute) {
            throw new NoWizardRoute(wizardComponentName);
        }
        this.wizardOptions = utils.mergeWizardOptions(this.wizardRoute.data);
        this.loadChildRoutes(this.wizardRoute);
    };
    /**
     * Checks and stores the currently displayed component.
     * @param componentRef A reference to the currently displayed component
     */
    /**
     * Checks and stores the currently displayed component.
     * @param {?} componentRef A reference to the currently displayed component
     * @return {?}
     */
    NgWizardService.prototype.registerActiveComponent = /**
     * Checks and stores the currently displayed component.
     * @param {?} componentRef A reference to the currently displayed component
     * @return {?}
     */
    function (componentRef) {
        if (!utils.componentImplementsNgWizardStepInterface(componentRef)) {
            throw new NoWsInterface(componentRef.constructor.name);
        }
        // Cast to unknown before casting to NgWizardStep to let typescript know we checked and approve
        // this conversion.
        this.currentComponent = (/** @type {?} */ (((/** @type {?} */ (componentRef)))));
        this.currentStepData = utils.getStepDataForUrl(this.stepData, this.router.url);
        this.currentStepData.componentRef = componentRef;
        this.resetCurrentStep();
        this.currentStepData.isCurrent = true;
        this.onStepDataChange();
    };
    /**
     * Calls the current component's wsOnPrevious() or wsOnNext()) methods and navigates to the given
     * step if the component does not abort or its state is invalid (for next navigation).
     *
     * @param stepData The NgWizardStepData of the the step to navigate to
     */
    /**
     * Calls the current component's wsOnPrevious() or wsOnNext()) methods and navigates to the given
     * step if the component does not abort or its state is invalid (for next navigation).
     *
     * @param {?} stepData The NgWizardStepData of the the step to navigate to
     * @return {?}
     */
    NgWizardService.prototype.navigateToStep = /**
     * Calls the current component's wsOnPrevious() or wsOnNext()) methods and navigates to the given
     * step if the component does not abort or its state is invalid (for next navigation).
     *
     * @param {?} stepData The NgWizardStepData of the the step to navigate to
     * @return {?}
     */
    function (stepData) {
        /** @type {?} */
        var goAhead;
        if (this.currentStepData.order > stepData.order) {
            goAhead = this.currentComponent.wsOnPrevious();
        }
        else {
            goAhead = this.currentComponent.wsIsValid() && this.currentComponent.wsOnNext();
        }
        if (goAhead === false) {
            return;
        }
        /** @type {?} */
        var stepPath = stepData.path;
        // If the wizard is added to a specific path in the application we have to join that path and
        // the step's path as the path to navigate to.
        // The Angular Router's relativeTo option does not seem to work when using the hash location
        // strategy.
        if (this.wizardRoute.path) {
            stepPath = [this.wizardRoute.path, stepData.path].join('/');
        }
        if (stepData.options.cleanQueryParameters) {
            return this.router.navigate([stepPath], { queryParams: {} });
        }
        else {
            return this.router.navigate([stepPath], { queryParamsHandling: 'merge' });
        }
        return this.router.navigate([stepPath], { queryParamsHandling: 'merge' });
    };
    /**
     * Utility method to navigate to the next step.
     */
    /**
     * Utility method to navigate to the next step.
     * @return {?}
     */
    NgWizardService.prototype.navigateToNextStep = /**
     * Utility method to navigate to the next step.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nextStepData = utils.getStepDataForPath(this.stepData, this.currentStepData.nextStep);
        return this.navigateToStep(nextStepData);
    };
    /**
     * Utility method to navigate to the previous step.
     */
    /**
     * Utility method to navigate to the previous step.
     * @return {?}
     */
    NgWizardService.prototype.navigateToPreviousStep = /**
     * Utility method to navigate to the previous step.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousStepData = utils.getStepDataForPath(this.stepData, this.currentStepData.previousStep);
        return this.navigateToStep(previousStepData);
    };
    /**
     * Utility method to navigate to a specific route path (external to the wizard)
     */
    /**
     * Utility method to navigate to a specific route path (external to the wizard)
     * @param {?} path
     * @return {?}
     */
    NgWizardService.prototype.navigateToPath = /**
     * Utility method to navigate to a specific route path (external to the wizard)
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.router.navigate([path], { queryParamsHandling: 'merge' });
    };
    /**
     * Returns the step data changes as an observable.
     */
    /**
     * Returns the step data changes as an observable.
     * @return {?}
     */
    NgWizardService.prototype.getStepDataChangesAsObservable = /**
     * Returns the step data changes as an observable.
     * @return {?}
     */
    function () {
        return this.stepDataChanges.asObservable();
    };
    /**
     * Returns the current step data as an observable.
     */
    // TODO: Write a unit test for this method
    /**
     * Returns the current step data as an observable.
     * @return {?}
     */
    // TODO: Write a unit test for this method
    NgWizardService.prototype.getCurrentStepDataAsObservable = /**
     * Returns the current step data as an observable.
     * @return {?}
     */
    // TODO: Write a unit test for this method
    function () {
        return this.getStepDataChangesAsObservable().pipe(map((/**
         * @param {?} stepDatas
         * @return {?}
         */
        function (stepDatas) { return stepDatas.find((/**
         * @param {?} stepData
         * @return {?}
         */
        function (stepData) { return stepData.isCurrent; })); })));
    };
    /**
     * Returns the Angular Route for the wizard component found in Angular's router config.
     * @param wizardComponentName The name of the wizard component
     */
    /**
     * Returns the Angular Route for the wizard component found in Angular's router config.
     * @private
     * @param {?} wizardComponentName The name of the wizard component
     * @return {?}
     */
    NgWizardService.prototype.getWizardRoute = /**
     * Returns the Angular Route for the wizard component found in Angular's router config.
     * @private
     * @param {?} wizardComponentName The name of the wizard component
     * @return {?}
     */
    function (wizardComponentName) {
        return this.router.config.find((/**
         * @param {?} route
         * @return {?}
         */
        function (route) { return route.component && route.component.name === wizardComponentName; }));
    };
    /**
     * Parses the child routes of the wizard component route and stores them as a list of
     * NgWizardStepData.
     * @param wizardRoute The Angular Route for the wizard component
     */
    /**
     * Parses the child routes of the wizard component route and stores them as a list of
     * NgWizardStepData.
     * @private
     * @param {?} wizardRoute The Angular Route for the wizard component
     * @return {?}
     */
    NgWizardService.prototype.loadChildRoutes = /**
     * Parses the child routes of the wizard component route and stores them as a list of
     * NgWizardStepData.
     * @private
     * @param {?} wizardRoute The Angular Route for the wizard component
     * @return {?}
     */
    function (wizardRoute) {
        if (!wizardRoute.children) {
            throw new NoChildRoutes(wizardRoute.component.name, wizardRoute.path);
        }
        /** @type {?} */
        var childRoutes = wizardRoute.children.filter((/**
         * @param {?} route
         * @return {?}
         */
        function (route) { return route.component; }));
        this.stepData = [];
        for (var i = 0; i < childRoutes.length; i++) {
            this.registerStep(i, childRoutes[i], childRoutes[i - 1], childRoutes[i + 1]);
        }
    };
    /**
     * Stores a child route as an NgWizardStepData.
     * @param index The index in the list of child routes
     * @param stepRoute The child route
     * @param previousStep The previous child route (undefined if first child route)
     * @param nextStep The next child route (undefined if last child route)
     */
    /**
     * Stores a child route as an NgWizardStepData.
     * @private
     * @param {?} index The index in the list of child routes
     * @param {?} stepRoute The child route
     * @param {?} previousStep The previous child route (undefined if first child route)
     * @param {?} nextStep The next child route (undefined if last child route)
     * @return {?}
     */
    NgWizardService.prototype.registerStep = /**
     * Stores a child route as an NgWizardStepData.
     * @private
     * @param {?} index The index in the list of child routes
     * @param {?} stepRoute The child route
     * @param {?} previousStep The previous child route (undefined if first child route)
     * @param {?} nextStep The next child route (undefined if last child route)
     * @return {?}
     */
    function (index, stepRoute, previousStep, nextStep) {
        this.stepData.push({
            order: index + 1,
            componentName: stepRoute.component.name,
            path: stepRoute.path,
            previousStep: previousStep ? previousStep.path : undefined,
            nextStep: nextStep ? nextStep.path : undefined,
            isCurrent: false,
            options: utils.getWizardStepOptions(stepRoute),
        });
        this.onStepDataChange();
    };
    /**
     * Emits a step data change event to the subscribers when the step data changes.
     */
    /**
     * Emits a step data change event to the subscribers when the step data changes.
     * @private
     * @return {?}
     */
    NgWizardService.prototype.onStepDataChange = /**
     * Emits a step data change event to the subscribers when the step data changes.
     * @private
     * @return {?}
     */
    function () {
        this.stepDataChanges.next(this.stepData);
    };
    /**
     * Sets the isCurrent attribute of all step data to false.
     */
    /**
     * Sets the isCurrent attribute of all step data to false.
     * @private
     * @return {?}
     */
    NgWizardService.prototype.resetCurrentStep = /**
     * Sets the isCurrent attribute of all step data to false.
     * @private
     * @return {?}
     */
    function () {
        this.stepData.map((/**
         * @param {?} stepData
         * @return {?}
         */
        function (stepData) {
            stepData.isCurrent = false;
            return stepData;
        }));
    };
    NgWizardService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgWizardService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return NgWizardService;
}());
export { NgWizardService };
if (false) {
    /** @type {?} */
    NgWizardService.prototype.wizardOptions;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.wizardRoute;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.stepData;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.currentStepData;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.currentComponent;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.stepDataChanges;
    /**
     * @type {?}
     * @private
     */
    NgWizardService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,