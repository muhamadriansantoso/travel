import { ComponentRef } from '@angular/core';
import { Router } from '@angular/router';
import { NgWizardStepData } from './ng-wizard-step/ng-wizard-step-data.interface';
import { Observable } from 'rxjs';
import { NgWizardOptions } from './ng-wizard-options/ng-wizard-options.interface';
import * as ɵngcc0 from '@angular/core';
export declare class NgWizardService {
    private router;
    wizardOptions: NgWizardOptions;
    private wizardRoute;
    private stepData;
    private currentStepData;
    private currentComponent;
    private stepDataChanges;
    constructor(router: Router);
    /**
     * Initializes the wizard by parsing the wizard's child routes found in Angular's router config
     * into a list of NgWizardStepData.
     * @param wizardComponentName The name of the wizard component
     */
    loadWizardRoutes(wizardComponentName: string): void;
    /**
     * Checks and stores the currently displayed component.
     * @param componentRef A reference to the currently displayed component
     */
    registerActiveComponent(componentRef: ComponentRef<any>): void;
    /**
     * Calls the current component's wsOnPrevious() or wsOnNext()) methods and navigates to the given
     * step if the component does not abort or its state is invalid (for next navigation).
     *
     * @param stepData The NgWizardStepData of the the step to navigate to
     */
    navigateToStep(stepData: NgWizardStepData): Promise<boolean>;
    /**
     * Utility method to navigate to the next step.
     */
    navigateToNextStep(): Promise<boolean>;
    /**
     * Utility method to navigate to the previous step.
     */
    navigateToPreviousStep(): Promise<boolean>;
    /**
     * Utility method to navigate to a specific route path (external to the wizard)
     */
    navigateToPath(path: string): Promise<boolean>;
    /**
     * Returns the step data changes as an observable.
     */
    getStepDataChangesAsObservable(): Observable<NgWizardStepData[]>;
    /**
     * Returns the current step data as an observable.
     */
    getCurrentStepDataAsObservable(): Observable<NgWizardStepData>;
    /**
     * Returns the Angular Route for the wizard component found in Angular's router config.
     * @param wizardComponentName The name of the wizard component
     */
    private getWizardRoute;
    /**
     * Parses the child routes of the wizard component route and stores them as a list of
     * NgWizardStepData.
     * @param wizardRoute The Angular Route for the wizard component
     */
    private loadChildRoutes;
    /**
     * Stores a child route as an NgWizardStepData.
     * @param index The index in the list of child routes
     * @param stepRoute The child route
     * @param previousStep The previous child route (undefined if first child route)
     * @param nextStep The next child route (undefined if last child route)
     */
    private registerStep;
    /**
     * Emits a step data change event to the subscribers when the step data changes.
     */
    private onStepDataChange;
    /**
     * Sets the isCurrent attribute of all step data to false.
     */
    private resetCurrentStep;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgWizardService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgWizardService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibmctd2l6YXJkLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE5nV2l6YXJkU3RlcERhdGEgfSBmcm9tICcuL25nLXdpemFyZC1zdGVwL25nLXdpemFyZC1zdGVwLWRhdGEuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ1dpemFyZE9wdGlvbnMgfSBmcm9tICcuL25nLXdpemFyZC1vcHRpb25zL25nLXdpemFyZC1vcHRpb25zLmludGVyZmFjZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nV2l6YXJkU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJvdXRlcjtcclxuICAgIHdpemFyZE9wdGlvbnM6IE5nV2l6YXJkT3B0aW9ucztcclxuICAgIHByaXZhdGUgd2l6YXJkUm91dGU7XHJcbiAgICBwcml2YXRlIHN0ZXBEYXRhO1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50U3RlcERhdGE7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIHN0ZXBEYXRhQ2hhbmdlcztcclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHdpemFyZCBieSBwYXJzaW5nIHRoZSB3aXphcmQncyBjaGlsZCByb3V0ZXMgZm91bmQgaW4gQW5ndWxhcidzIHJvdXRlciBjb25maWdcclxuICAgICAqIGludG8gYSBsaXN0IG9mIE5nV2l6YXJkU3RlcERhdGEuXHJcbiAgICAgKiBAcGFyYW0gd2l6YXJkQ29tcG9uZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgd2l6YXJkIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBsb2FkV2l6YXJkUm91dGVzKHdpemFyZENvbXBvbmVudE5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBhbmQgc3RvcmVzIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIGNvbXBvbmVudC5cclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRSZWYgQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnRseSBkaXNwbGF5ZWQgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyQWN0aXZlQ29tcG9uZW50KGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxscyB0aGUgY3VycmVudCBjb21wb25lbnQncyB3c09uUHJldmlvdXMoKSBvciB3c09uTmV4dCgpKSBtZXRob2RzIGFuZCBuYXZpZ2F0ZXMgdG8gdGhlIGdpdmVuXHJcbiAgICAgKiBzdGVwIGlmIHRoZSBjb21wb25lbnQgZG9lcyBub3QgYWJvcnQgb3IgaXRzIHN0YXRlIGlzIGludmFsaWQgKGZvciBuZXh0IG5hdmlnYXRpb24pLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzdGVwRGF0YSBUaGUgTmdXaXphcmRTdGVwRGF0YSBvZiB0aGUgdGhlIHN0ZXAgdG8gbmF2aWdhdGUgdG9cclxuICAgICAqL1xyXG4gICAgbmF2aWdhdGVUb1N0ZXAoc3RlcERhdGE6IE5nV2l6YXJkU3RlcERhdGEpOiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IG1ldGhvZCB0byBuYXZpZ2F0ZSB0byB0aGUgbmV4dCBzdGVwLlxyXG4gICAgICovXHJcbiAgICBuYXZpZ2F0ZVRvTmV4dFN0ZXAoKTogUHJvbWlzZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSBtZXRob2QgdG8gbmF2aWdhdGUgdG8gdGhlIHByZXZpb3VzIHN0ZXAuXHJcbiAgICAgKi9cclxuICAgIG5hdmlnYXRlVG9QcmV2aW91c1N0ZXAoKTogUHJvbWlzZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSBtZXRob2QgdG8gbmF2aWdhdGUgdG8gYSBzcGVjaWZpYyByb3V0ZSBwYXRoIChleHRlcm5hbCB0byB0aGUgd2l6YXJkKVxyXG4gICAgICovXHJcbiAgICBuYXZpZ2F0ZVRvUGF0aChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGVwIGRhdGEgY2hhbmdlcyBhcyBhbiBvYnNlcnZhYmxlLlxyXG4gICAgICovXHJcbiAgICBnZXRTdGVwRGF0YUNoYW5nZXNBc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxOZ1dpemFyZFN0ZXBEYXRhW10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0ZXAgZGF0YSBhcyBhbiBvYnNlcnZhYmxlLlxyXG4gICAgICovXHJcbiAgICBnZXRDdXJyZW50U3RlcERhdGFBc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxOZ1dpemFyZFN0ZXBEYXRhPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgQW5ndWxhciBSb3V0ZSBmb3IgdGhlIHdpemFyZCBjb21wb25lbnQgZm91bmQgaW4gQW5ndWxhcidzIHJvdXRlciBjb25maWcuXHJcbiAgICAgKiBAcGFyYW0gd2l6YXJkQ29tcG9uZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgd2l6YXJkIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFdpemFyZFJvdXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgdGhlIGNoaWxkIHJvdXRlcyBvZiB0aGUgd2l6YXJkIGNvbXBvbmVudCByb3V0ZSBhbmQgc3RvcmVzIHRoZW0gYXMgYSBsaXN0IG9mXHJcbiAgICAgKiBOZ1dpemFyZFN0ZXBEYXRhLlxyXG4gICAgICogQHBhcmFtIHdpemFyZFJvdXRlIFRoZSBBbmd1bGFyIFJvdXRlIGZvciB0aGUgd2l6YXJkIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGxvYWRDaGlsZFJvdXRlcztcclxuICAgIC8qKlxyXG4gICAgICogU3RvcmVzIGEgY2hpbGQgcm91dGUgYXMgYW4gTmdXaXphcmRTdGVwRGF0YS5cclxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggaW4gdGhlIGxpc3Qgb2YgY2hpbGQgcm91dGVzXHJcbiAgICAgKiBAcGFyYW0gc3RlcFJvdXRlIFRoZSBjaGlsZCByb3V0ZVxyXG4gICAgICogQHBhcmFtIHByZXZpb3VzU3RlcCBUaGUgcHJldmlvdXMgY2hpbGQgcm91dGUgKHVuZGVmaW5lZCBpZiBmaXJzdCBjaGlsZCByb3V0ZSlcclxuICAgICAqIEBwYXJhbSBuZXh0U3RlcCBUaGUgbmV4dCBjaGlsZCByb3V0ZSAodW5kZWZpbmVkIGlmIGxhc3QgY2hpbGQgcm91dGUpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJTdGVwO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0cyBhIHN0ZXAgZGF0YSBjaGFuZ2UgZXZlbnQgdG8gdGhlIHN1YnNjcmliZXJzIHdoZW4gdGhlIHN0ZXAgZGF0YSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uU3RlcERhdGFDaGFuZ2U7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGlzQ3VycmVudCBhdHRyaWJ1dGUgb2YgYWxsIHN0ZXAgZGF0YSB0byBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXNldEN1cnJlbnRTdGVwO1xyXG59XHJcbiJdfQ==