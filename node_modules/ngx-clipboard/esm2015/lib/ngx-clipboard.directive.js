/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { ClipboardService } from './ngx-clipboard.service';
import * as ɵngcc0 from '@angular/core';
export class ClipboardDirective {
    /**
     * @param {?} clipboardSrv
     */
    constructor(clipboardSrv) {
        this.clipboardSrv = clipboardSrv;
        this.cbOnSuccess = new EventEmitter();
        this.cbOnError = new EventEmitter();
    }
    // tslint:disable-next-line:no-empty
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clipboardSrv.destroy(this.container);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (!this.clipboardSrv.isSupported) {
            this.handleResult(false, undefined, event);
        }
        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {
            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);
        }
        else if (this.cbContent) {
            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);
        }
    }
    /**
     * Fires an event based on the copy operation result.
     * @private
     * @param {?} succeeded
     * @param {?} copiedContent
     * @param {?} event
     * @return {?}
     */
    handleResult(succeeded, copiedContent, event) {
        /** @type {?} */
        let response = {
            isSuccess: succeeded,
            event
        };
        if (succeeded) {
            response = Object.assign(response, {
                content: copiedContent,
                successMessage: this.cbSuccessMsg
            });
            this.cbOnSuccess.emit(response);
        }
        else {
            this.cbOnError.emit(response);
        }
        this.clipboardSrv.pushCopyResponse(response);
    }
}
ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };
ClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [["", "ngxClipboard", ""]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });
    } }, inputs: { targetElm: ["ngxClipboard", "targetElm"], container: "container", cbContent: "cbContent", cbSuccessMsg: "cbSuccessMsg" }, outputs: { cbOnSuccess: "cbOnSuccess", cbOnError: "cbOnError" } });
/** @nocollapse */
ClipboardDirective.ctorParameters = () => [
    { type: ClipboardService }
];
ClipboardDirective.propDecorators = {
    targetElm: [{ type: Input, args: ['ngxClipboard',] }],
    container: [{ type: Input }],
    cbContent: [{ type: Input }],
    cbSuccessMsg: [{ type: Input }],
    cbOnSuccess: [{ type: Output }],
    cbOnError: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxClipboard]'
            }]
    }], function () { return [{ type: ClipboardService }]; }, { cbOnSuccess: [{
            type: Output
        }], cbOnError: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event.target']]
        }], targetElm: [{
            type: Input,
            args: ['ngxClipboard']
        }], container: [{
            type: Input
        }], cbContent: [{
            type: Input
        }], cbSuccessMsg: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    ClipboardDirective.prototype.targetElm;
    /** @type {?} */
    ClipboardDirective.prototype.container;
    /** @type {?} */
    ClipboardDirective.prototype.cbContent;
    /** @type {?} */
    ClipboardDirective.prototype.cbSuccessMsg;
    /** @type {?} */
    ClipboardDirective.prototype.cbOnSuccess;
    /** @type {?} */
    ClipboardDirective.prototype.cbOnError;
    /**
     * @type {?}
     * @private
     */
    ClipboardDirective.prototype.clipboardSrv;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,