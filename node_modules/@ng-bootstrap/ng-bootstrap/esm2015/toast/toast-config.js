/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Interface used to type all toast config options. See `NgbToastConfig`.
 *
 * \@since 5.0.0
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbToastOptions() { }
if (false) {
    /**
     * Specify if the toast component should emit the `hide()` output
     * after a certain `delay` in ms.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.autohide;
    /**
     * Delay in ms after which the `hide()` output should be emitted.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.delay;
    /**
     * Type of aria-live attribute to be used.
     *
     * Could be one of these 2 values (as string):
     * - `polite` (default)
     * - `alert`
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.ariaLive;
}
/**
 * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
 * and customize the values of its properties in order to provide default values for all the toasts used in the
 * application.
 *
 * \@since 5.0.0
 */
export class NgbToastConfig {
    constructor() {
        this.autohide = true;
        this.delay = 500;
        this.ariaLive = 'polite';
    }
}
NgbToastConfig.ɵfac = function NgbToastConfig_Factory(t) { return new (t || NgbToastConfig)(); };
NgbToastConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbToastConfig, factory: NgbToastConfig.ɵfac, providedIn: 'root' });
/** @nocollapse */ NgbToastConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbToastConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgbToastConfig.prototype.autohide;
    /** @type {?} */
    NgbToastConfig.prototype.delay;
    /** @type {?} */
    NgbToastConfig.prototype.ariaLive;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29uZmlnLmpzIiwic291cmNlcyI6WyJuZzovQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvdG9hc3QvdG9hc3QtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDO0FBRWdDO0FBQUk7QUFJdkI7QUFBRztBQUFpQjtBQUU5Qjs7QUFGSCxxQ0FvQkM7QUFDRDtBQUVRO0FBQVE7QUFBc0U7QUFDOUU7QUFBMkI7QUFBUSxJQW5CekMsbUNBQW1CO0FBQ3JCO0FBRUM7QUFDRTtBQUdFO0FBQ0UsSUFITCxnQ0FBZTtBQUNqQjtBQUVDO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFFSjtBQUEyQjtBQUloQyxJQUpFLG1DQUE4QjtBQUNoQztBQUNBO0FBQ0c7QUFDZ0g7QUFDSjtBQUNoRztBQUNiO0FBRUY7QUFFQSxNQUFNLE9BQU8sY0FBYztBQUFHLElBRDlCO0FBQWdCLFFBRWQsYUFBUSxHQUFHLElBQUksQ0FBQztBQUNsQixRQUFFLFVBQUssR0FBRyxHQUFHLENBQUM7QUFDZCxRQUFFLGFBQVEsR0FBdUIsUUFBUSxDQUFDO0FBQzFDLEtBQUM7QUFDRDswQ0FOQyxVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzhIQUMzQjtBQUFDOzs7O2dEQUs4RDtBQUFDO0FBQWE7QUFBcUIsSUFKckcsa0NBQWdCO0FBQ2xCO0FBQ00sSUFESiwrQkFBWTtBQUNkO0FBQXFCLElBQW5CLGtDQUF3QztBQUMxQztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgdXNlZCB0byB0eXBlIGFsbCB0b2FzdCBjb25maWcgb3B0aW9ucy4gU2VlIGBOZ2JUb2FzdENvbmZpZ2AuXG4gKlxuICogQHNpbmNlIDUuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdiVG9hc3RPcHRpb25zIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgaWYgdGhlIHRvYXN0IGNvbXBvbmVudCBzaG91bGQgZW1pdCB0aGUgYGhpZGUoKWAgb3V0cHV0XG4gICAqIGFmdGVyIGEgY2VydGFpbiBgZGVsYXlgIGluIG1zLlxuICAgKi9cbiAgYXV0b2hpZGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZWxheSBpbiBtcyBhZnRlciB3aGljaCB0aGUgYGhpZGUoKWAgb3V0cHV0IHNob3VsZCBiZSBlbWl0dGVkLlxuICAgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgYXJpYS1saXZlIGF0dHJpYnV0ZSB0byBiZSB1c2VkLlxuICAgKlxuICAgKiBDb3VsZCBiZSBvbmUgb2YgdGhlc2UgMiB2YWx1ZXMgKGFzIHN0cmluZyk6XG4gICAqIC0gYHBvbGl0ZWAgKGRlZmF1bHQpXG4gICAqIC0gYGFsZXJ0YFxuICAgKi9cbiAgYXJpYUxpdmU/OiAncG9saXRlJyB8ICdhbGVydCc7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgTmdiVG9hc3QgY29tcG9uZW50LiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LFxuICogYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdG9hc3RzIHVzZWQgaW4gdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAc2luY2UgNS4wLjBcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTmdiVG9hc3RDb25maWcgaW1wbGVtZW50cyBOZ2JUb2FzdE9wdGlvbnMge1xuICBhdXRvaGlkZSA9IHRydWU7XG4gIGRlbGF5ID0gNTAwO1xuICBhcmlhTGl2ZTogJ3BvbGl0ZScgfCAnYWxlcnQnID0gJ3BvbGl0ZSc7XG59XG4iXX0=