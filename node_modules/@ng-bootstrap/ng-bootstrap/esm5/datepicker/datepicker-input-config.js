/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgbDatepickerConfig } from './datepicker-config';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the datepicker inputs used in the application.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
var NgbInputDatepickerConfig = /** @class */ (function (_super) {
    tslib_1.__extends(NgbInputDatepickerConfig, _super);
    function NgbInputDatepickerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autoClose = true;
        _this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
        _this.restoreFocus = true;
        return _this;
    }
    /** @nocollapse */ NgbInputDatepickerConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbInputDatepickerConfig_Factory() { return new NgbInputDatepickerConfig(); }, token: NgbInputDatepickerConfig, providedIn: "root" });
NgbInputDatepickerConfig.ɵfac = function NgbInputDatepickerConfig_Factory(t) { return ɵNgbInputDatepickerConfig_BaseFactory(t || NgbInputDatepickerConfig); };
NgbInputDatepickerConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbInputDatepickerConfig, factory: function (t) { return NgbInputDatepickerConfig.ɵfac(t); }, providedIn: 'root' });
var ɵNgbInputDatepickerConfig_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NgbInputDatepickerConfig);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbInputDatepickerConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
    return NgbInputDatepickerConfig;
}(NgbDatepickerConfig));
export { NgbInputDatepickerConfig };
if (false) {
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.autoClose;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.container;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.positionTarget;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.placement;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.restoreFocus;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbnB1dC1jb25maWcuanMiLCJzb3VyY2VzIjpbIm5nOi9AbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcC9kYXRlcGlja2VyL2RhdGVwaWNrZXItaW5wdXQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RDtBQUFxQztBQUFJO0FBR3VEO0FBQUc7QUFFSDtBQUN0QjtBQUFHO0FBRTVFOztBQUVEO0FBQ2dDLElBQWMsb0RBQW1CO0FBQUMsSUFEbEU7QUFDSSxRQURKLHFFQU9DO0FBQ0QsUUFORSxlQUFTLEdBQW1DLElBQUksQ0FBQztBQUNuRCxRQUVFLGVBQVMsR0FBbUIsQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN2RixRQUFFLGtCQUFZLEdBQWdDLElBQUksQ0FBQztBQUNuRDtBQUNvQixLQURuQixBQU5ROzREQURSLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsckdBQ3RCOzs7Ozs7OzBCQUlzRDtBQUFDLG1DQWxCakU7QUFBRSxDQW9CRCxBQVBELENBQzhDLG1CQUFtQixHQU1oRTtBQUNELFNBUGEsd0JBQXdCO0FBQUk7QUFBYTtBQUMvQyxJQUFMLDZDQUFpRDtBQUNuRDtBQUFxQixJQUFuQiw2Q0FBeUI7QUFDM0I7QUFBcUIsSUFBbkIsa0RBQXFDO0FBQ3ZDO0FBQXFCLElBQW5CLDZDQUFxRjtBQUN2RjtBQUFxQixJQUFuQixnREFBaUQ7QUFDbkQ7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7TmdiRGF0ZXBpY2tlckNvbmZpZ30gZnJvbSAnLi9kYXRlcGlja2VyLWNvbmZpZyc7XG5pbXBvcnQge1BsYWNlbWVudEFycmF5fSBmcm9tICcuLi91dGlsL3Bvc2l0aW9uaW5nJztcblxuLyoqXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiRGF0ZXBpY2tlcklucHV0YF0oIy9jb21wb25lbnRzL2RhdGVwaWNrZXIvYXBpI05nYkRhdGVwaWNrZXIpIGNvbXBvbmVudC5cbiAqXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgZGF0ZXBpY2tlciBpbnB1dHMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQHNpbmNlIDUuMi4wXG4gKi9cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIE5nYklucHV0RGF0ZXBpY2tlckNvbmZpZyBleHRlbmRzIE5nYkRhdGVwaWNrZXJDb25maWcge1xuICBhdXRvQ2xvc2U6IGJvb2xlYW4gfCAnaW5zaWRlJyB8ICdvdXRzaWRlJyA9IHRydWU7XG4gIGNvbnRhaW5lcjogbnVsbCB8ICdib2R5JztcbiAgcG9zaXRpb25UYXJnZXQ6IHN0cmluZyB8IEhUTUxFbGVtZW50O1xuICBwbGFjZW1lbnQ6IFBsYWNlbWVudEFycmF5ID0gWydib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0J107XG4gIHJlc3RvcmVGb2N1czogdHJ1ZSB8IEhUTUxFbGVtZW50IHwgc3RyaW5nID0gdHJ1ZTtcbn1cbiJdfQ==