/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Options available when opening new modal windows with `NgbModal.open()` method.
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbModalOptions() { }
if (false) {
    /**
     * `aria-labelledby` attribute value to set on the modal window.
     *
     * \@since 2.2.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.ariaLabelledBy;
    /**
     * If `true`, the backdrop element will be created for a given modal.
     *
     * Alternatively, specify `'static'` for a backdrop which doesn't close the modal on click.
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdrop;
    /**
     * Callback right before the modal will be dismissed.
     *
     * If this function returns:
     * * `false`
     * * a promise resolved with `false`
     * * a promise that is rejected
     *
     * then the modal won't be dismissed.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.beforeDismiss;
    /**
     * If `true`, the modal will be centered vertically.
     *
     * Default value is `false`.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.centered;
    /**
     * A selector specifying the element all new modal windows should be appended to.
     * Since v5.3.0 it is also possible to pass the reference to an `HTMLElement`.
     *
     * If not specified, will be `body`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.container;
    /**
     * The `Injector` to use for modal content.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.injector;
    /**
     * If `true`, the modal will be closed when `Escape` key is pressed
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.keyboard;
    /**
     * Scrollable modal content (false by default).
     *
     * \@since 5.0.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.scrollable;
    /**
     * Size of a new modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.size;
    /**
     * A custom class to append to the modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.windowClass;
    /**
     * A custom class to append to the modal backdrop.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdropClass;
}
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
 *
 * \@since 3.1.0
 */
var NgbModalConfig = /** @class */ (function () {
    function NgbModalConfig() {
        this.backdrop = true;
        this.keyboard = true;
    }
    /** @nocollapse */ NgbModalConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: "root" });
NgbModalConfig.ɵfac = function NgbModalConfig_Factory(t) { return new (t || NgbModalConfig)(); };
NgbModalConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbModalConfig, factory: function (t) { return NgbModalConfig.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbModalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return NgbModalConfig;
}());
export { NgbModalConfig };
if (false) {
    /** @type {?} */
    NgbModalConfig.prototype.ariaLabelledBy;
    /** @type {?} */
    NgbModalConfig.prototype.backdrop;
    /** @type {?} */
    NgbModalConfig.prototype.beforeDismiss;
    /** @type {?} */
    NgbModalConfig.prototype.centered;
    /** @type {?} */
    NgbModalConfig.prototype.container;
    /** @type {?} */
    NgbModalConfig.prototype.injector;
    /** @type {?} */
    NgbModalConfig.prototype.keyboard;
    /** @type {?} */
    NgbModalConfig.prototype.scrollable;
    /** @type {?} */
    NgbModalConfig.prototype.size;
    /** @type {?} */
    NgbModalConfig.prototype.windowClass;
    /** @type {?} */
    NgbModalConfig.prototype.backdropClass;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlcyI6WyJuZzovQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvbW9kYWwvbW9kYWwtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ25EO0FBRWdDO0FBQUk7QUFFSjtBQUU5Qjs7QUFGRixxQ0FpRkM7QUFDRDtBQUVRO0FBQVE7QUFBcUU7QUFDbkY7QUFDa0I7QUFBMkI7QUFBUSxJQWhGckQseUNBQXdCO0FBQzFCO0FBRUM7QUFDRTtBQUNFO0FBRUg7QUFBTztBQUVKO0FBQTJCO0FBR2hDLElBSEUsbUNBQThCO0FBQ2hDO0FBRUM7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUg7QUFBTztBQUVKO0FBQTJCO0FBQVEsSUFBNUMsd0NBQWlEO0FBQ25EO0FBRUM7QUFDRTtBQUNFO0FBRUg7QUFBTztBQUVIO0FBR0Y7QUFBUSxJQUhWLG1DQUFtQjtBQUNyQjtBQUVDO0FBQ0U7QUFFSDtBQUFPO0FBRUo7QUFBMkI7QUFFN0IsSUFGQyxvQ0FBaUM7QUFDbkM7QUFFQztBQUNFO0FBR0g7QUFDRSxJQUhBLG1DQUFvQjtBQUN0QjtBQUVDO0FBQ0U7QUFDRTtBQUVKO0FBRUk7QUFDRSxJQUhMLG1DQUFtQjtBQUNyQjtBQUVDO0FBQ0U7QUFDRTtBQUVIO0FBRUU7QUFDRSxJQUhKLHFDQUFxQjtBQUN2QjtBQUVDO0FBQ0U7QUFDcUI7QUFBUSxJQUE5QiwrQkFBbUM7QUFDckM7QUFFQztBQUNFO0FBRUg7QUFFQyxJQUhDLHNDQUFxQjtBQUN2QjtBQUVDO0FBQ0U7QUFDRTtBQUVIO0FBR0Y7QUFDSSxJQUpGLHdDQUF1QjtBQUN6QjtBQUNBO0FBQ0c7QUFDc0Y7QUFDdkY7QUFDNkc7QUFDckM7QUFFMUU7QUFDRTtBQUNGO0FBQ2dCLElBRGhCO0FBQTRCLFFBRzFCLGFBQVEsR0FBdUIsSUFBSSxDQUFDO0FBQ3RDLFFBSUUsYUFBUSxHQUFHLElBQUksQ0FBQztBQUNsQixLQUlDLEFBWlE7a0RBRFIsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQywzRkFDdEI7Ozs7OztnREFLRjtBQUFDLHlCQXRHVDtBQUFFLENBNkdELEFBYkQsSUFhQztBQUNELFNBYmEsY0FBYztBQUFJO0FBQWE7QUFBcUIsSUFDL0Qsd0NBQXVCO0FBQ3pCO0FBQXFCLElBQW5CLGtDQUFvQztBQUN0QztBQUFxQixJQUFuQix1Q0FBZ0Q7QUFDbEQ7QUFDQSxJQURFLGtDQUFrQjtBQUNwQjtBQUNBLElBREUsbUNBQWtCO0FBQ3BCO0FBQXFCLElBQW5CLGtDQUFtQjtBQUNyQjtBQUNFLElBREEsa0NBQWdCO0FBQ2xCO0FBQXFCLElBQW5CLG9DQUFvQjtBQUN0QjtBQUFxQixJQUFuQiw4QkFBa0M7QUFDcEM7QUFBcUIsSUFBbkIscUNBQW9CO0FBQ3RCO0FBQXFCLElBQW5CLHVDQUFzQjtBQUN4QjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBJbmplY3Rvcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogT3B0aW9ucyBhdmFpbGFibGUgd2hlbiBvcGVuaW5nIG5ldyBtb2RhbCB3aW5kb3dzIHdpdGggYE5nYk1vZGFsLm9wZW4oKWAgbWV0aG9kLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nYk1vZGFsT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3cuXG4gICAqXG4gICAqIEBzaW5jZSAyLjIuMFxuICAgKi9cbiAgYXJpYUxhYmVsbGVkQnk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGVsZW1lbnQgd2lsbCBiZSBjcmVhdGVkIGZvciBhIGdpdmVuIG1vZGFsLlxuICAgKlxuICAgKiBBbHRlcm5hdGl2ZWx5LCBzcGVjaWZ5IGAnc3RhdGljJ2AgZm9yIGEgYmFja2Ryb3Agd2hpY2ggZG9lc24ndCBjbG9zZSB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAqXG4gICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICAgKi9cbiAgYmFja2Ryb3A/OiBib29sZWFuIHwgJ3N0YXRpYyc7XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHJpZ2h0IGJlZm9yZSB0aGUgbW9kYWwgd2lsbCBiZSBkaXNtaXNzZWQuXG4gICAqXG4gICAqIElmIHRoaXMgZnVuY3Rpb24gcmV0dXJuczpcbiAgICogKiBgZmFsc2VgXG4gICAqICogYSBwcm9taXNlIHJlc29sdmVkIHdpdGggYGZhbHNlYFxuICAgKiAqIGEgcHJvbWlzZSB0aGF0IGlzIHJlamVjdGVkXG4gICAqXG4gICAqIHRoZW4gdGhlIG1vZGFsIHdvbid0IGJlIGRpc21pc3NlZC5cbiAgICovXG4gIGJlZm9yZURpc21pc3M/OiAoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBiZSBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgKlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAqXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKi9cbiAgY2VudGVyZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIHNlbGVjdG9yIHNwZWNpZnlpbmcgdGhlIGVsZW1lbnQgYWxsIG5ldyBtb2RhbCB3aW5kb3dzIHNob3VsZCBiZSBhcHBlbmRlZCB0by5cbiAgICogU2luY2UgdjUuMy4wIGl0IGlzIGFsc28gcG9zc2libGUgdG8gcGFzcyB0aGUgcmVmZXJlbmNlIHRvIGFuIGBIVE1MRWxlbWVudGAuXG4gICAqXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIHdpbGwgYmUgYGJvZHlgLlxuICAgKi9cbiAgY29udGFpbmVyPzogc3RyaW5nIHwgSFRNTEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBgSW5qZWN0b3JgIHRvIHVzZSBmb3IgbW9kYWwgY29udGVudC5cbiAgICovXG4gIGluamVjdG9yPzogSW5qZWN0b3I7XG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgYmUgY2xvc2VkIHdoZW4gYEVzY2FwZWAga2V5IGlzIHByZXNzZWRcbiAgICpcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAqL1xuICBrZXlib2FyZD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNjcm9sbGFibGUgbW9kYWwgY29udGVudCAoZmFsc2UgYnkgZGVmYXVsdCkuXG4gICAqXG4gICAqIEBzaW5jZSA1LjAuMFxuICAgKi9cbiAgc2Nyb2xsYWJsZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgYSBuZXcgbW9kYWwgd2luZG93LlxuICAgKi9cbiAgc2l6ZT86ICdzbScgfCAnbGcnIHwgJ3hsJyB8IHN0cmluZztcblxuICAvKipcbiAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCB3aW5kb3cuXG4gICAqL1xuICB3aW5kb3dDbGFzcz86IHN0cmluZztcblxuICAvKipcbiAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCBiYWNrZHJvcC5cbiAgICpcbiAgICogQHNpbmNlIDEuMS4wXG4gICAqL1xuICBiYWNrZHJvcENsYXNzPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JNb2RhbGBdKCMvY29tcG9uZW50cy9tb2RhbC9hcGkjTmdiTW9kYWwpIHNlcnZpY2UuXG4gKlxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgbW9kYWxzIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uLlxuKlxuKiBAc2luY2UgMy4xLjBcbiovXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBOZ2JNb2RhbENvbmZpZyBpbXBsZW1lbnRzIFJlcXVpcmVkPE5nYk1vZGFsT3B0aW9ucz4ge1xuICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICBiYWNrZHJvcDogYm9vbGVhbiB8ICdzdGF0aWMnID0gdHJ1ZTtcbiAgYmVmb3JlRGlzbWlzczogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4gIGNlbnRlcmVkOiBib29sZWFuO1xuICBjb250YWluZXI6IHN0cmluZztcbiAgaW5qZWN0b3I6IEluamVjdG9yO1xuICBrZXlib2FyZCA9IHRydWU7XG4gIHNjcm9sbGFibGU6IGJvb2xlYW47XG4gIHNpemU6ICdzbScgfCAnbGcnIHwgJ3hsJyB8IHN0cmluZztcbiAgd2luZG93Q2xhc3M6IHN0cmluZztcbiAgYmFja2Ryb3BDbGFzczogc3RyaW5nO1xufVxuIl19